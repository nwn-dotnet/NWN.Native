//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public unsafe class CNWCSync : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CNWCSync(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CNWCSync obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CNWCSync() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NWNXLibPINVOKE.delete_CNWCSync(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public global::System.IntPtr Pointer {
    get {
      return swigCPtr.Handle;
    }
  }

  public static unsafe implicit operator void*(CNWCSync self) {
    return (void*)self.swigCPtr.Handle;
  }

  public static unsafe CNWCSync FromPointer(void* pointer, bool memoryOwn = false) {
    return pointer != null ? new CNWCSync((global::System.IntPtr)pointer, memoryOwn) : null;
  }

  public static CNWCSync FromPointer(global::System.IntPtr pointer, bool memoryOwn = false) {
    return pointer != global::System.IntPtr.Zero ? new CNWCSync(pointer, memoryOwn) : null;
  }

  public bool Equals(CNWCSync other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }

    if (ReferenceEquals(this, other)) {
      return true;
    }

    return Pointer.Equals(other.Pointer);
  }

  public override bool Equals(object obj) {
    return ReferenceEquals(this, obj) || obj is CNWCSync other && Equals(other);
  }

  public override int GetHashCode() {
    return swigCPtr.Handle.GetHashCode();
  }

  public static bool operator ==(CNWCSync left, CNWCSync right) {
    return Equals(left, right);
  }

  public static bool operator !=(CNWCSync left, CNWCSync right) {
    return !Equals(left, right);
  }

  public unsafe class Progress : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal Progress(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Progress obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~Progress() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            NWNXLibPINVOKE.delete_CNWCSync_Progress(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public global::System.IntPtr Pointer {
      get {
        return swigCPtr.Handle;
      }
    }
  
    public static unsafe implicit operator void*(Progress self) {
      return (void*)self.swigCPtr.Handle;
    }
  
    public static unsafe Progress FromPointer(void* pointer, bool memoryOwn = false) {
      return pointer != null ? new Progress((global::System.IntPtr)pointer, memoryOwn) : null;
    }
  
    public static Progress FromPointer(global::System.IntPtr pointer, bool memoryOwn = false) {
      return pointer != global::System.IntPtr.Zero ? new Progress(pointer, memoryOwn) : null;
    }
  
    public bool Equals(Progress other) {
      if (ReferenceEquals(null, other)) {
        return false;
      }
  
      if (ReferenceEquals(this, other)) {
        return true;
      }
  
      return Pointer.Equals(other.Pointer);
    }
  
    public override bool Equals(object obj) {
      return ReferenceEquals(this, obj) || obj is Progress other && Equals(other);
    }
  
    public override int GetHashCode() {
      return swigCPtr.Handle.GetHashCode();
    }
  
    public static bool operator ==(Progress left, Progress right) {
      return Equals(left, right);
    }
  
    public static bool operator !=(Progress left, Progress right) {
      return !Equals(left, right);
    }
  
    public int m_currentState {
      set {
        NWNXLibPINVOKE.CNWCSync_Progress_m_currentState_set(swigCPtr, value);
      } 
      get {
        int retVal = NWNXLibPINVOKE.CNWCSync_Progress_m_currentState_get(swigCPtr);
        return retVal;
      }
  
    }
  
    public CExoString m_currentStateMessage {
      set {
        NWNXLibPINVOKE.CNWCSync_Progress_m_currentStateMessage_set(swigCPtr, CExoString.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWCSync_Progress_m_currentStateMessage_get(swigCPtr);
        CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
        return ret;
      } 
    }
  
    public int m_currentStatePercentage {
      set {
        NWNXLibPINVOKE.CNWCSync_Progress_m_currentStatePercentage_set(swigCPtr, value);
      } 
      get {
        int retVal = NWNXLibPINVOKE.CNWCSync_Progress_m_currentStatePercentage_get(swigCPtr);
        return retVal;
      }
  
    }
  
    public uint m_currentFile {
      set {
        NWNXLibPINVOKE.CNWCSync_Progress_m_currentFile_set(swigCPtr, value);
      } 
      get {
        uint ret = NWNXLibPINVOKE.CNWCSync_Progress_m_currentFile_get(swigCPtr);
        return ret;
      } 
    }
  
    public uint m_totalFiles {
      set {
        NWNXLibPINVOKE.CNWCSync_Progress_m_totalFiles_set(swigCPtr, value);
      } 
      get {
        uint ret = NWNXLibPINVOKE.CNWCSync_Progress_m_totalFiles_get(swigCPtr);
        return ret;
      } 
    }
  
    public CExoString m_currentTransferMessage {
      set {
        NWNXLibPINVOKE.CNWCSync_Progress_m_currentTransferMessage_set(swigCPtr, CExoString.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWCSync_Progress_m_currentTransferMessage_get(swigCPtr);
        CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
        return ret;
      } 
    }
  
    public uint m_averageNetworkBps {
      set {
        NWNXLibPINVOKE.CNWCSync_Progress_m_averageNetworkBps_set(swigCPtr, value);
      } 
      get {
        uint ret = NWNXLibPINVOKE.CNWCSync_Progress_m_averageNetworkBps_get(swigCPtr);
        return ret;
      } 
    }
  
    public uint m_averageDiskBps {
      set {
        NWNXLibPINVOKE.CNWCSync_Progress_m_averageDiskBps_set(swigCPtr, value);
      } 
      get {
        uint ret = NWNXLibPINVOKE.CNWCSync_Progress_m_averageDiskBps_get(swigCPtr);
        return ret;
      } 
    }
  
    public ulong m_allFilesBytesTransferred {
      set {
        NWNXLibPINVOKE.CNWCSync_Progress_m_allFilesBytesTransferred_set(swigCPtr, value);
      } 
      get {
        ulong retVal = NWNXLibPINVOKE.CNWCSync_Progress_m_allFilesBytesTransferred_get(swigCPtr);
        return retVal;
      }
  
    }
  
    public ulong m_allFilesBytesTotal {
      set {
        NWNXLibPINVOKE.CNWCSync_Progress_m_allFilesBytesTotal_set(swigCPtr, value);
      } 
      get {
        ulong retVal = NWNXLibPINVOKE.CNWCSync_Progress_m_allFilesBytesTotal_get(swigCPtr);
        return retVal;
      }
  
    }
  
    public ulong m_manifestFilesBytesTotal {
      set {
        NWNXLibPINVOKE.CNWCSync_Progress_m_manifestFilesBytesTotal_set(swigCPtr, value);
      } 
      get {
        ulong retVal = NWNXLibPINVOKE.CNWCSync_Progress_m_manifestFilesBytesTotal_get(swigCPtr);
        return retVal;
      }
  
    }
  
    public uint m_manifestFiles {
      set {
        NWNXLibPINVOKE.CNWCSync_Progress_m_manifestFiles_set(swigCPtr, value);
      } 
      get {
        uint ret = NWNXLibPINVOKE.CNWCSync_Progress_m_manifestFiles_get(swigCPtr);
        return ret;
      } 
    }
  
    public ulong m_manifestFilesBytesSkip {
      set {
        NWNXLibPINVOKE.CNWCSync_Progress_m_manifestFilesBytesSkip_set(swigCPtr, value);
      } 
      get {
        ulong retVal = NWNXLibPINVOKE.CNWCSync_Progress_m_manifestFilesBytesSkip_get(swigCPtr);
        return retVal;
      }
  
    }
  
    public uint m_manifestFilesSkip {
      set {
        NWNXLibPINVOKE.CNWCSync_Progress_m_manifestFilesSkip_set(swigCPtr, value);
      } 
      get {
        uint ret = NWNXLibPINVOKE.CNWCSync_Progress_m_manifestFilesSkip_get(swigCPtr);
        return ret;
      } 
    }
  
    public uint m_manifestParseProgress {
      set {
        NWNXLibPINVOKE.CNWCSync_Progress_m_manifestParseProgress_set(swigCPtr, value);
      } 
      get {
        uint ret = NWNXLibPINVOKE.CNWCSync_Progress_m_manifestParseProgress_get(swigCPtr);
        return ret;
      } 
    }
  
    public bool m_manifestMetadataReceived {
      set {
        NWNXLibPINVOKE.CNWCSync_Progress_m_manifestMetadataReceived_set(swigCPtr, value);
      } 
      get {
        bool ret = NWNXLibPINVOKE.CNWCSync_Progress_m_manifestMetadataReceived_get(swigCPtr);
        return ret;
      } 
    }
  
    public SWIGTYPE_p_CNWSync__ManifestMetaData m_manifestMetaData {
      set {
        NWNXLibPINVOKE.CNWCSync_Progress_m_manifestMetaData_set(swigCPtr, SWIGTYPE_p_CNWSync__ManifestMetaData.getCPtr(value));
        if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        SWIGTYPE_p_CNWSync__ManifestMetaData ret = new SWIGTYPE_p_CNWSync__ManifestMetaData(NWNXLibPINVOKE.CNWCSync_Progress_m_manifestMetaData_get(swigCPtr), true);
        if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public Progress() : this(NWNXLibPINVOKE.new_CNWCSync_Progress(), true) {
    }
  
  }

  public SWIGTYPE_p_NWSync__CNWCSyncInternal m_internal {
    set {
      NWNXLibPINVOKE.CNWCSync_m_internal_set(swigCPtr, SWIGTYPE_p_NWSync__CNWCSyncInternal.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWCSync_m_internal_get(swigCPtr);
      SWIGTYPE_p_NWSync__CNWCSyncInternal ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_NWSync__CNWCSyncInternal(cPtr, false);
      return ret;
    } 
  }

  public CNWCSync(CExoString manifestUrl, SHA1 manifestHash, CExoString serverAddress, CExoString serverKxpk) : this(NWNXLibPINVOKE.new_CNWCSync(CExoString.getCPtr(manifestUrl), SHA1.getCPtr(manifestHash), CExoString.getCPtr(serverAddress), CExoString.getCPtr(serverKxpk)), true) {
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Update() {
    bool ret = NWNXLibPINVOKE.CNWCSync_Update(swigCPtr);
    return ret;
  }

  public CNWCSync.Progress GetStatus() {
    CNWCSync.Progress ret = new CNWCSync.Progress(NWNXLibPINVOKE.CNWCSync_GetStatus(swigCPtr), false);
    return ret;
  }

  public void SetSyncPermission(bool allow) {
    NWNXLibPINVOKE.CNWCSync_SetSyncPermission(swigCPtr, allow);
  }

  public void Cancel(CExoString errMsg) {
    NWNXLibPINVOKE.CNWCSync_Cancel(swigCPtr, CExoString.getCPtr(errMsg));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

}

}

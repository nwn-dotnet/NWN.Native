//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public unsafe class Database : SqliteDatabase {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal Database(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NWNXLibPINVOKE.Database_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Database obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          NWNXLibPINVOKE.delete_Database(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public global::System.IntPtr Pointer {
    get {
      return swigCPtr.Handle;
    }
  }

  public static unsafe implicit operator void*(Database self) {
    return (void*)self.swigCPtr.Handle;
  }

  public static unsafe Database FromPointer(void* pointer, bool memoryOwn = false) {
    return pointer != null ? new Database((global::System.IntPtr)pointer, memoryOwn) : null;
  }

  public static Database FromPointer(global::System.IntPtr pointer, bool memoryOwn = false) {
    return pointer != global::System.IntPtr.Zero ? new Database(pointer, memoryOwn) : null;
  }

  public bool Equals(Database other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }

    if (ReferenceEquals(this, other)) {
      return true;
    }

    return Pointer.Equals(other.Pointer);
  }

  public override bool Equals(object obj) {
    return ReferenceEquals(this, obj) || obj is Database other && Equals(other);
  }

  public override int GetHashCode() {
    return swigCPtr.Handle.GetHashCode();
  }

  public static bool operator ==(Database left, Database right) {
    return Equals(left, right);
  }

  public static bool operator !=(Database left, Database right) {
    return !Equals(left, right);
  }

  public string m_label {
    get {
      string ret = NWNXLibPINVOKE.Database_m_label_get(swigCPtr);
      if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string m_path {
    get {
      string ret = NWNXLibPINVOKE.Database_m_path_get(swigCPtr);
      if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool m_writeable {
    get {
      bool ret = NWNXLibPINVOKE.Database_m_writeable_get(swigCPtr);
      if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool m_delete_after_close {
    set {
      NWNXLibPINVOKE.Database_m_delete_after_close_set(swigCPtr, value);
      if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = NWNXLibPINVOKE.Database_m_delete_after_close_get(swigCPtr);
      if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool m_authorizer_enabled {
    set {
      NWNXLibPINVOKE.Database_m_authorizer_enabled_set(swigCPtr, value);
      if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = NWNXLibPINVOKE.Database_m_authorizer_enabled_get(swigCPtr);
      if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_std__functionT_bool_fstd__string_const_R_boolF_t m_table_access_authorizer {
    set {
      NWNXLibPINVOKE.Database_m_table_access_authorizer_set(swigCPtr, SWIGTYPE_p_std__functionT_bool_fstd__string_const_R_boolF_t.getCPtr(value));
      if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_std__functionT_bool_fstd__string_const_R_boolF_t ret = new SWIGTYPE_p_std__functionT_bool_fstd__string_const_R_boolF_t(NWNXLibPINVOKE.Database_m_table_access_authorizer_get(swigCPtr), true);
      if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool m_transaction {
    set {
      NWNXLibPINVOKE.Database_m_transaction_set(swigCPtr, value);
      if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = NWNXLibPINVOKE.Database_m_transaction_get(swigCPtr);
      if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Database(string identifier, string path, DataView copyAtomically, Definition source) : this(NWNXLibPINVOKE.new_Database__SWIG_0(identifier, path, DataView.getCPtr(copyAtomically), Definition.getCPtr(source)), true) {
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public Database(string identifier, string path, DataView copyAtomically) : this(NWNXLibPINVOKE.new_Database__SWIG_1(identifier, path, DataView.getCPtr(copyAtomically)), true) {
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public Database(string identifier, string path) : this(NWNXLibPINVOKE.new_Database__SWIG_2(identifier, path), true) {
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Setup() {
    NWNXLibPINVOKE.Database_Setup(swigCPtr);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

}

}

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public unsafe class CNWDomainArray : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CNWDomainArray(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CNWDomainArray obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CNWDomainArray() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NWNXLibPINVOKE.delete_CNWDomainArray(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public global::System.IntPtr Pointer {
    get {
      return swigCPtr.Handle;
    }
  }

  public static unsafe implicit operator void*(CNWDomainArray self) {
    return (void*)self.swigCPtr.Handle;
  }

  public static unsafe CNWDomainArray FromPointer(void* pointer, bool memoryOwn = false) {
    return pointer != null ? new CNWDomainArray((global::System.IntPtr)pointer, memoryOwn) : null;
  }

  public static CNWDomainArray FromPointer(global::System.IntPtr pointer, bool memoryOwn = false) {
    return pointer != global::System.IntPtr.Zero ? new CNWDomainArray(pointer, memoryOwn) : null;
  }

  public bool Equals(CNWDomainArray other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }

    if (ReferenceEquals(this, other)) {
      return true;
    }

    return Pointer.Equals(other.Pointer);
  }

  public override bool Equals(object obj) {
    return ReferenceEquals(this, obj) || obj is CNWDomainArray other && Equals(other);
  }

  public override int GetHashCode() {
    return swigCPtr.Handle.GetHashCode();
  }

  public static bool operator ==(CNWDomainArray left, CNWDomainArray right) {
    return Equals(left, right);
  }

  public static bool operator !=(CNWDomainArray left, CNWDomainArray right) {
    return !Equals(left, right);
  }


  public CNWDomain this[int index] {
    get {
      return GetItem(index);
    }
    set {
      SetItem(index, value);
    }
  }
  public CNWDomainArray(int nElements) : this(NWNXLibPINVOKE.new_CNWDomainArray(nElements), true) {
  }

  public CNWDomain GetItem(int index) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWDomainArray_GetItem(swigCPtr, index);
    CNWDomain ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWDomain(cPtr, false);
    return ret;
  }

  public void SetItem(int index, CNWDomain value) {
    NWNXLibPINVOKE.CNWDomainArray_SetItem(swigCPtr, index, CNWDomain.getCPtr(value));
  }

  public static CNWDomainArray FromPointer(CNWDomain ptr) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWDomainArray_FromPointer(CNWDomain.getCPtr(ptr));
    CNWDomainArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWDomainArray(cPtr, false);
    return ret;
  }

}

}

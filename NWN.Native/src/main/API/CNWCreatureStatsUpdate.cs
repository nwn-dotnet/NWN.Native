//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public unsafe class CNWCreatureStatsUpdate : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CNWCreatureStatsUpdate(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CNWCreatureStatsUpdate obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CNWCreatureStatsUpdate() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NWNXLibPINVOKE.delete_CNWCreatureStatsUpdate(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public global::System.IntPtr Pointer {
    get {
      return swigCPtr.Handle;
    }
  }

  public static unsafe implicit operator void*(CNWCreatureStatsUpdate self) {
    return (void*)self.swigCPtr.Handle;
  }

  public static unsafe CNWCreatureStatsUpdate FromPointer(void* pointer, bool memoryOwn = false) {
    return pointer != null ? new CNWCreatureStatsUpdate((global::System.IntPtr)pointer, memoryOwn) : null;
  }

  public static CNWCreatureStatsUpdate FromPointer(global::System.IntPtr pointer, bool memoryOwn = false) {
    return pointer != global::System.IntPtr.Zero ? new CNWCreatureStatsUpdate(pointer, memoryOwn) : null;
  }

  public bool Equals(CNWCreatureStatsUpdate other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }

    if (ReferenceEquals(this, other)) {
      return true;
    }

    return Pointer.Equals(other.Pointer);
  }

  public override bool Equals(object obj) {
    return ReferenceEquals(this, obj) || obj is CNWCreatureStatsUpdate other && Equals(other);
  }

  public override int GetHashCode() {
    return swigCPtr.Handle.GetHashCode();
  }

  public static bool operator ==(CNWCreatureStatsUpdate left, CNWCreatureStatsUpdate right) {
    return Equals(left, right);
  }

  public static bool operator !=(CNWCreatureStatsUpdate left, CNWCreatureStatsUpdate right) {
    return !Equals(left, right);
  }

  public CExoArrayListUInt16 m_lstFeats {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_lstFeats_set(swigCPtr, CExoArrayListUInt16.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_lstFeats_get(swigCPtr);
      CExoArrayListUInt16 ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoArrayListUInt16(cPtr, false);
      return ret;
    } 
  }

  public CExoArrayListUInt16 m_lstBonusFeats {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_lstBonusFeats_set(swigCPtr, CExoArrayListUInt16.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_lstBonusFeats_get(swigCPtr);
      CExoArrayListUInt16 ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoArrayListUInt16(cPtr, false);
      return ret;
    } 
  }

  public uint m_oidFeatUpdated {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_oidFeatUpdated_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_oidFeatUpdated_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nSkillUpdateFlag {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nSkillUpdateFlag_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nSkillUpdateFlag_get(swigCPtr);
      return retVal;
    }

  }

  public CExoArrayListCEffectIconObjectPtr m_aLastUpdateEffectArray {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_aLastUpdateEffectArray_set(swigCPtr, CExoArrayListCEffectIconObjectPtr.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_aLastUpdateEffectArray_get(swigCPtr);
      CExoArrayListCEffectIconObjectPtr ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoArrayListCEffectIconObjectPtr(cPtr, false);
      return ret;
    } 
  }

  public byte m_nSTRStat {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nSTRStat_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nSTRStat_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nDEXStat {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nDEXStat_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nDEXStat_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nCONStat {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nCONStat_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nCONStat_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nINTStat {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nINTStat_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nINTStat_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nWISStat {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nWISStat_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nWISStat_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nCHAStat {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nCHAStat_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nCHAStat_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nSTRBase {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nSTRBase_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nSTRBase_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nDEXBase {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nDEXBase_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nDEXBase_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nCONBase {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nCONBase_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nCONBase_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nINTBase {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nINTBase_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nINTBase_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nWISBase {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nWISBase_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nWISBase_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nCHABase {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nCHABase_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nCHABase_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nSTRBonus {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nSTRBonus_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nSTRBonus_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nDEXBonus {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nDEXBonus_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nDEXBonus_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nCONBonus {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nCONBonus_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nCONBonus_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nINTBonus {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nINTBonus_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nINTBonus_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nWISBonus {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nWISBonus_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nWISBonus_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nCHABonus {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nCHABonus_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nCHABonus_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nDEXACModifier {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nDEXACModifier_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nDEXACModifier_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nFortSave {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nFortSave_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nFortSave_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nWillSave {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nWillSave_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nWillSave_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nReflexSave {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nReflexSave_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nReflexSave_get(swigCPtr);
      return retVal;
    }

  }

  public NativeArray<byte> m_nNegativeLevels {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nNegativeLevels_set(swigCPtr, value);
    } 
    get {
      global::System.IntPtr arrayPtr = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nNegativeLevels_get(swigCPtr);
      NativeArray<byte> retVal = new NativeArray<byte>(arrayPtr, 3);

      return retVal; // byte[3]
    }

  }

  public short m_nCurrentHP {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nCurrentHP_set(swigCPtr, value);
    } 
    get {
      short retVal = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nCurrentHP_get(swigCPtr);
      return retVal;
    }

  }

  public short m_nMaxHP {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nMaxHP_set(swigCPtr, value);
    } 
    get {
      short retVal = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nMaxHP_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nCurrentXP {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nCurrentXP_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nCurrentXP_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bUseMonkAttackTable {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_bUseMonkAttackTable_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_bUseMonkAttackTable_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nBaseAttackBonus {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nBaseAttackBonus_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nBaseAttackBonus_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nBaseFortSavingThrow {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nBaseFortSavingThrow_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nBaseFortSavingThrow_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nBaseWillSavingThrow {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nBaseWillSavingThrow_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nBaseWillSavingThrow_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nBaseReflexSavingThrow {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nBaseReflexSavingThrow_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nBaseReflexSavingThrow_get(swigCPtr);
      return retVal;
    }

  }

  public short m_nArmorClass {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nArmorClass_set(swigCPtr, value);
    } 
    get {
      short retVal = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_nArmorClass_get(swigCPtr);
      return retVal;
    }

  }

  public CCombatInformation m_pCombatInformation {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_pCombatInformation_set(swigCPtr, CCombatInformation.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_pCombatInformation_get(swigCPtr);
      CCombatInformation ret = (cPtr == global::System.IntPtr.Zero) ? null : new CCombatInformation(cPtr, false);
      return ret;
    } 
  }

  public byte* m_lstSkillRanks {
    set {
      NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_lstSkillRanks_set(swigCPtr, value);
    } 
    get {
      byte* retVal = NWNXLibPINVOKE.CNWCreatureStatsUpdate_m_lstSkillRanks_get(swigCPtr);
      return retVal;
    }

  }

  public CNWCreatureStatsUpdate() : this(NWNXLibPINVOKE.new_CNWCreatureStatsUpdate(), true) {
  }

  public void SetCombatInformation(CCombatInformation pData) {
    NWNXLibPINVOKE.CNWCreatureStatsUpdate_SetCombatInformation(swigCPtr, CCombatInformation.getCPtr(pData));
  }

  public void ClearEffectIcons() {
    NWNXLibPINVOKE.CNWCreatureStatsUpdate_ClearEffectIcons(swigCPtr);
  }

  public void _Destructor() {
    NWNXLibPINVOKE.CNWCreatureStatsUpdate__Destructor(swigCPtr);
  }

}

}

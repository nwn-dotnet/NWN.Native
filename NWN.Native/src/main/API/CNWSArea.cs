//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public unsafe class CNWSArea : CNWArea, ICGameObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CNWSArea(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NWNXLibPINVOKE.CNWSArea_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CNWSArea obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NWNXLibPINVOKE.delete_CNWSArea(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  global::System.Runtime.InteropServices.HandleRef ICGameObject.GetInterfaceCPtr() {
    return new global::System.Runtime.InteropServices.HandleRef(this, NWNXLibPINVOKE.CNWSArea_ICGameObject_GetInterfaceCPtr(swigCPtr.Handle));
  }

  public global::System.IntPtr Pointer {
    get {
      return swigCPtr.Handle;
    }
  }

  public static unsafe implicit operator void*(CNWSArea self) {
    return (void*)self.swigCPtr.Handle;
  }

  public static unsafe CNWSArea FromPointer(void* pointer, bool memoryOwn = false) {
    return pointer != null ? new CNWSArea((global::System.IntPtr)pointer, memoryOwn) : null;
  }

  public static CNWSArea FromPointer(global::System.IntPtr pointer, bool memoryOwn = false) {
    return pointer != global::System.IntPtr.Zero ? new CNWSArea(pointer, memoryOwn) : null;
  }

  public bool Equals(CNWSArea other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }

    if (ReferenceEquals(this, other)) {
      return true;
    }

    return Pointer.Equals(other.Pointer);
  }

  public override bool Equals(object obj) {
    return ReferenceEquals(this, obj) || obj is CNWSArea other && Equals(other);
  }

  public override int GetHashCode() {
    return swigCPtr.Handle.GetHashCode();
  }

  public static bool operator ==(CNWSArea left, CNWSArea right) {
    return Equals(left, right);
  }

  public static bool operator !=(CNWSArea left, CNWSArea right) {
    return !Equals(left, right);
  }

  public int m_nPlayersInArea {
    set {
      NWNXLibPINVOKE.CNWSArea_m_nPlayersInArea_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSArea_m_nPlayersInArea_get(swigCPtr);
      return retVal;
    }

  }

  public CExoArrayListUInt32 m_pTrapList {
    set {
      NWNXLibPINVOKE.CNWSArea_m_pTrapList_set(swigCPtr, CExoArrayListUInt32.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_m_pTrapList_get(swigCPtr);
      CExoArrayListUInt32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoArrayListUInt32(cPtr, false);
      return ret;
    } 
  }

  public int m_nObjectByNameIndex {
    set {
      NWNXLibPINVOKE.CNWSArea_m_nObjectByNameIndex_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSArea_m_nObjectByNameIndex_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nLastHeartbeatScriptCalendarDay {
    set {
      NWNXLibPINVOKE.CNWSArea_m_nLastHeartbeatScriptCalendarDay_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSArea_m_nLastHeartbeatScriptCalendarDay_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nLastHeartbeatScriptTimeOfDay {
    set {
      NWNXLibPINVOKE.CNWSArea_m_nLastHeartbeatScriptTimeOfDay_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSArea_m_nLastHeartbeatScriptTimeOfDay_get(swigCPtr);
      return retVal;
    }

  }

  public CExoString m_sComments {
    set {
      NWNXLibPINVOKE.CNWSArea_m_sComments_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_m_sComments_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public CExoLocString m_lsName {
    set {
      NWNXLibPINVOKE.CNWSArea_m_lsName_set(swigCPtr, CExoLocString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_m_lsName_get(swigCPtr);
      CExoLocString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoLocString(cPtr, false);
      return ret;
    } 
  }

  public CExoString m_sTag {
    set {
      NWNXLibPINVOKE.CNWSArea_m_sTag_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_m_sTag_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public CResRef m_refTileSet {
    set {
      NWNXLibPINVOKE.CNWSArea_m_refTileSet_set(swigCPtr, CResRef.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_m_refTileSet_get(swigCPtr);
      CResRef ret = (cPtr == global::System.IntPtr.Zero) ? null : new CResRef(cPtr, false);
      return ret;
    } 
  }

  public CNWTileSet m_pTileSet {
    set {
      NWNXLibPINVOKE.CNWSArea_m_pTileSet_set(swigCPtr, CNWTileSet.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_m_pTileSet_get(swigCPtr);
      CNWTileSet ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWTileSet(cPtr, false);
      return ret;
    } 
  }

  public CNWSTile m_pTile {
    set {
      NWNXLibPINVOKE.CNWSArea_m_pTile_set(swigCPtr, CNWSTile.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_m_pTile_get(swigCPtr);
      CNWSTile ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSTile(cPtr, false);
      return ret;
    } 
  }

  public NWAREAHEADER m_pHeader {
    set {
      NWNXLibPINVOKE.CNWSArea_m_pHeader_set(swigCPtr, NWAREAHEADER.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_m_pHeader_get(swigCPtr);
      NWAREAHEADER ret = (cPtr == global::System.IntPtr.Zero) ? null : new NWAREAHEADER(cPtr, false);
      return ret;
    } 
  }

  public CExoStringArray m_sScripts {
    set {
      NWNXLibPINVOKE.CNWSArea_m_sScripts_set(swigCPtr, CExoStringArray.getCPtr(value));
    } 
    get {
        global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_m_sScripts_get(swigCPtr);;
        CExoStringArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoStringArray(cPtr, false);
        return ret;
    }

  }

  public int m_nChanceOfFog {
    set {
      NWNXLibPINVOKE.CNWSArea_m_nChanceOfFog_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSArea_m_nChanceOfFog_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nAreaSpotModifier {
    set {
      NWNXLibPINVOKE.CNWSArea_m_nAreaSpotModifier_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSArea_m_nAreaSpotModifier_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nAreaListenModifier {
    set {
      NWNXLibPINVOKE.CNWSArea_m_nAreaListenModifier_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSArea_m_nAreaListenModifier_get(swigCPtr);
      return retVal;
    }

  }

  public CExoArrayListUInt32 m_aGameObjects {
    set {
      NWNXLibPINVOKE.CNWSArea_m_aGameObjects_set(swigCPtr, CExoArrayListUInt32.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_m_aGameObjects_get(swigCPtr);
      CExoArrayListUInt32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoArrayListUInt32(cPtr, false);
      return ret;
    } 
  }

  public int m_nPosGameObjects {
    set {
      NWNXLibPINVOKE.CNWSArea_m_nPosGameObjects_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSArea_m_nPosGameObjects_get(swigCPtr);
      return retVal;
    }

  }

  public CExoArrayListUInt32 m_aSubAreas {
    set {
      NWNXLibPINVOKE.CNWSArea_m_aSubAreas_set(swigCPtr, CExoArrayListUInt32.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_m_aSubAreas_get(swigCPtr);
      CExoArrayListUInt32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoArrayListUInt32(cPtr, false);
      return ret;
    } 
  }

  public int* m_pnInterTileTravel {
    set {
      NWNXLibPINVOKE.CNWSArea_m_pnInterTileTravel_set(swigCPtr, value);
    } 
    get {
      int* retVal = NWNXLibPINVOKE.CNWSArea_m_pnInterTileTravel_get(swigCPtr);
      return retVal;
    }

  }

  public float* m_pfInterTileExit {
    set {
      NWNXLibPINVOKE.CNWSArea_m_pfInterTileExit_set(swigCPtr, value);
    } 
    get {
      float* retVal = NWNXLibPINVOKE.CNWSArea_m_pfInterTileExit_get(swigCPtr);
      return retVal;
    }

  }

  public byte* m_pnInterTileRegionDepths {
    set {
      NWNXLibPINVOKE.CNWSArea_m_pnInterTileRegionDepths_set(swigCPtr, value);
    } 
    get {
      byte* retVal = NWNXLibPINVOKE.CNWSArea_m_pnInterTileRegionDepths_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nInterTileTravelLength {
    set {
      NWNXLibPINVOKE.CNWSArea_m_nInterTileTravelLength_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSArea_m_nInterTileTravelLength_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nInterTileGoalX {
    set {
      NWNXLibPINVOKE.CNWSArea_m_nInterTileGoalX_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSArea_m_nInterTileGoalX_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nInterTileGoalY {
    set {
      NWNXLibPINVOKE.CNWSArea_m_nInterTileGoalY_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSArea_m_nInterTileGoalY_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nInterTileGoalRegion {
    set {
      NWNXLibPINVOKE.CNWSArea_m_nInterTileGoalRegion_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSArea_m_nInterTileGoalRegion_get(swigCPtr);
      return retVal;
    }

  }

  public float m_fGoalTargetX {
    set {
      NWNXLibPINVOKE.CNWSArea_m_fGoalTargetX_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CNWSArea_m_fGoalTargetX_get(swigCPtr);
      return retVal;
    }

  }

  public float m_fGoalTargetY {
    set {
      NWNXLibPINVOKE.CNWSArea_m_fGoalTargetY_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CNWSArea_m_fGoalTargetY_get(swigCPtr);
      return retVal;
    }

  }

  public CPathfindInformation m_pSearchInfo {
    set {
      NWNXLibPINVOKE.CNWSArea_m_pSearchInfo_set(swigCPtr, CPathfindInformation.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_m_pSearchInfo_get(swigCPtr);
      CPathfindInformation ret = (cPtr == global::System.IntPtr.Zero) ? null : new CPathfindInformation(cPtr, false);
      return ret;
    } 
  }

  public CPathfindInformation m_pSoundPathInfo {
    set {
      NWNXLibPINVOKE.CNWSArea_m_pSoundPathInfo_set(swigCPtr, CPathfindInformation.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_m_pSoundPathInfo_get(swigCPtr);
      CPathfindInformation ret = (cPtr == global::System.IntPtr.Zero) ? null : new CPathfindInformation(cPtr, false);
      return ret;
    } 
  }

  public int g_nUnsmoothedWPList {
    set {
      NWNXLibPINVOKE.CNWSArea_g_nUnsmoothedWPList_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSArea_g_nUnsmoothedWPList_get(swigCPtr);
      return retVal;
    }

  }

  public float* g_pfUnsmoothedWPList {
    set {
      NWNXLibPINVOKE.CNWSArea_g_pfUnsmoothedWPList_set(swigCPtr, value);
    } 
    get {
      float* retVal = NWNXLibPINVOKE.CNWSArea_g_pfUnsmoothedWPList_get(swigCPtr);
      return retVal;
    }

  }

  public int g_nSmoothedWPList {
    set {
      NWNXLibPINVOKE.CNWSArea_g_nSmoothedWPList_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSArea_g_nSmoothedWPList_get(swigCPtr);
      return retVal;
    }

  }

  public float* g_pfSmoothedWPList {
    set {
      NWNXLibPINVOKE.CNWSArea_g_pfSmoothedWPList_set(swigCPtr, value);
    } 
    get {
      float* retVal = NWNXLibPINVOKE.CNWSArea_g_pfSmoothedWPList_get(swigCPtr);
      return retVal;
    }

  }

  public float g_fPersonalSpace {
    set {
      NWNXLibPINVOKE.CNWSArea_g_fPersonalSpace_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CNWSArea_g_fPersonalSpace_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bGridPathfindingTerminated {
    set {
      NWNXLibPINVOKE.CNWSArea_m_bGridPathfindingTerminated_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSArea_m_bGridPathfindingTerminated_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nGridNodesSearched {
    set {
      NWNXLibPINVOKE.CNWSArea_m_nGridNodesSearched_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSArea_m_nGridNodesSearched_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_oidLastEntered {
    set {
      NWNXLibPINVOKE.CNWSArea_m_oidLastEntered_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSArea_m_oidLastEntered_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_oidLastLeft {
    set {
      NWNXLibPINVOKE.CNWSArea_m_oidLastLeft_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSArea_m_oidLastLeft_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nCustomScriptEventId {
    set {
      NWNXLibPINVOKE.CNWSArea_m_nCustomScriptEventId_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSArea_m_nCustomScriptEventId_get(swigCPtr);
      return retVal;
    }

  }

  public CNWSAreaInterTileSuccessors m_pcInterTileSuccessors {
    set {
      NWNXLibPINVOKE.CNWSArea_m_pcInterTileSuccessors_set(swigCPtr, CNWSAreaInterTileSuccessors.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_m_pcInterTileSuccessors_get(swigCPtr);
      CNWSAreaInterTileSuccessors ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSAreaInterTileSuccessors(cPtr, false);
      return ret;
    } 
  }

  public int* m_pbInterTileDeniedExitCheck {
    set {
      NWNXLibPINVOKE.CNWSArea_m_pbInterTileDeniedExitCheck_set(swigCPtr, value);
    } 
    get {
      int* retVal = NWNXLibPINVOKE.CNWSArea_m_pbInterTileDeniedExitCheck_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bInterAreaDFSVisited {
    set {
      NWNXLibPINVOKE.CNWSArea_m_bInterAreaDFSVisited_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSArea_m_bInterAreaDFSVisited_get(swigCPtr);
      return retVal;
    }

  }

  public CNWSScriptVarTable m_ScriptVars {
    set {
      NWNXLibPINVOKE.CNWSArea_m_ScriptVars_set(swigCPtr, CNWSScriptVarTable.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_m_ScriptVars_get(swigCPtr);
      CNWSScriptVarTable ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSScriptVarTable(cPtr, false);
      return ret;
    } 
  }

  public CNWSAmbientSound m_pAmbientSound {
    set {
      NWNXLibPINVOKE.CNWSArea_m_pAmbientSound_set(swigCPtr, CNWSAmbientSound.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_m_pAmbientSound_get(swigCPtr);
      CNWSAmbientSound ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSAmbientSound(cPtr, false);
      return ret;
    } 
  }

  public byte m_nWeatherType {
    set {
      NWNXLibPINVOKE.CNWSArea_m_nWeatherType_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSArea_m_nWeatherType_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bWeatherStarted {
    set {
      NWNXLibPINVOKE.CNWSArea_m_bWeatherStarted_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSArea_m_bWeatherStarted_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nWeatherMinDurationTimer {
    set {
      NWNXLibPINVOKE.CNWSArea_m_nWeatherMinDurationTimer_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSArea_m_nWeatherMinDurationTimer_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nLastUpdateCalendarDay {
    set {
      NWNXLibPINVOKE.CNWSArea_m_nLastUpdateCalendarDay_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSArea_m_nLastUpdateCalendarDay_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nLastUpdateTimeOfDay {
    set {
      NWNXLibPINVOKE.CNWSArea_m_nLastUpdateTimeOfDay_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSArea_m_nLastUpdateTimeOfDay_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nOverrideWeatherType {
    set {
      NWNXLibPINVOKE.CNWSArea_m_nOverrideWeatherType_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSArea_m_nOverrideWeatherType_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nCurrentWeatherType {
    set {
      NWNXLibPINVOKE.CNWSArea_m_nCurrentWeatherType_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSArea_m_nCurrentWeatherType_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nLightingScheme {
    set {
      NWNXLibPINVOKE.CNWSArea_m_nLightingScheme_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSArea_m_nLightingScheme_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nPVPSetting {
    set {
      NWNXLibPINVOKE.CNWSArea_m_nPVPSetting_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSArea_m_nPVPSetting_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nMapSize {
    set {
      NWNXLibPINVOKE.CNWSArea_m_nMapSize_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSArea_m_nMapSize_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nEnvironmentalAudio {
    set {
      NWNXLibPINVOKE.CNWSArea_m_nEnvironmentalAudio_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSArea_m_nEnvironmentalAudio_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nLoadScreenID {
    set {
      NWNXLibPINVOKE.CNWSArea_m_nLoadScreenID_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSArea_m_nLoadScreenID_get(swigCPtr);
      return retVal;
    }

  }

  public CExoString m_sDisplayName {
    set {
      NWNXLibPINVOKE.CNWSArea_m_sDisplayName_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_m_sDisplayName_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public int m_bDefaultGrassDisabled {
    set {
      NWNXLibPINVOKE.CNWSArea_m_bDefaultGrassDisabled_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSArea_m_bDefaultGrassDisabled_get(swigCPtr);
      return retVal;
    }

  }

  public UnorderedMapInt32CNWSAreaGrassOverride m_areaGrassOverrides {
    set {
      NWNXLibPINVOKE.CNWSArea_m_areaGrassOverrides_set(swigCPtr, UnorderedMapInt32CNWSAreaGrassOverride.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_m_areaGrassOverrides_get(swigCPtr);
      UnorderedMapInt32CNWSAreaGrassOverride ret = (cPtr == global::System.IntPtr.Zero) ? null : new UnorderedMapInt32CNWSAreaGrassOverride(cPtr, false);
      return ret;
    } 
  }

  public CNWSUUID m_pUUID {
    set {
      NWNXLibPINVOKE.CNWSArea_m_pUUID_set(swigCPtr, CNWSUUID.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_m_pUUID_get(swigCPtr);
      CNWSUUID ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSUUID(cPtr, false);
      return ret;
    } 
  }

  public CNWSArea(CResRef cResRef, int bSetAutoRequest, uint oidId) : this(NWNXLibPINVOKE.new_CNWSArea__SWIG_0(CResRef.getCPtr(cResRef), bSetAutoRequest, oidId), true) {
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public CNWSArea(CResRef cResRef, int bSetAutoRequest) : this(NWNXLibPINVOKE.new_CNWSArea__SWIG_1(CResRef.getCPtr(cResRef), bSetAutoRequest), true) {
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual CNWSArea AsNWSArea() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_AsNWSArea(swigCPtr);
    CNWSArea ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSArea(cPtr, false);
    return ret;
  }

  public virtual CNWSArea NWAreaAsNWSArea() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_NWAreaAsNWSArea(swigCPtr);
    CNWSArea ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSArea(cPtr, false);
    return ret;
  }

  public int AddObjectToArea(uint id, int bRunScripts) {
    int retVal = NWNXLibPINVOKE.CNWSArea_AddObjectToArea__SWIG_0(swigCPtr, id, bRunScripts);
    return retVal;
  }

  public int AddObjectToArea(uint id) {
    int retVal = NWNXLibPINVOKE.CNWSArea_AddObjectToArea__SWIG_1(swigCPtr, id);
    return retVal;
  }

  public int AIUpdate() {
    int retVal = NWNXLibPINVOKE.CNWSArea_AIUpdate(swigCPtr);
    return retVal;
  }

  public Vector ComputeAwayVector(Vector vCurrentPosition, Vector vPositionToMoveAwayFrom, float fMoveAwayRange, CPathfindInformation pPathInfo) {
    Vector ret = new Vector(NWNXLibPINVOKE.CNWSArea_ComputeAwayVector(swigCPtr, Vector.getCPtr(vCurrentPosition), Vector.getCPtr(vPositionToMoveAwayFrom), fMoveAwayRange, CPathfindInformation.getCPtr(pPathInfo)), true);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int ComputeBestCorner(float fX1, float fY1, float fX2, float fY2, float fX3, float fY3, float fPersonalSpace, float fCreatureHeight, float* fNewX1, float* fNewY1, float* fNewX2, float* fNewY2) {
    int retVal = NWNXLibPINVOKE.CNWSArea_ComputeBestCorner(swigCPtr, fX1, fY1, fX2, fY2, fX3, fY3, fPersonalSpace, fCreatureHeight, fNewX1, fNewY1, fNewX2, fNewY2);
    return retVal;
  }

  public int TestSafeLocationPoint(Vector vTestPosition, CPathfindInformation pPathfindInfo, bool bDisregardCurrentTarget) {
    int retVal = NWNXLibPINVOKE.CNWSArea_TestSafeLocationPoint__SWIG_0(swigCPtr, Vector.getCPtr(vTestPosition), CPathfindInformation.getCPtr(pPathfindInfo), bDisregardCurrentTarget);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int TestSafeLocationPoint(Vector vTestPosition, CPathfindInformation pPathfindInfo) {
    int retVal = NWNXLibPINVOKE.CNWSArea_TestSafeLocationPoint__SWIG_1(swigCPtr, Vector.getCPtr(vTestPosition), CPathfindInformation.getCPtr(pPathfindInfo));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int ComputeSafeLocation(Vector vPosition, float fSearchRadius, CPathfindInformation pPathfindInfo, int bWalkStraightLineRequired, Vector vNewvector) {
    int retVal = NWNXLibPINVOKE.CNWSArea_ComputeSafeLocation(swigCPtr, Vector.getCPtr(vPosition), fSearchRadius, CPathfindInformation.getCPtr(pPathfindInfo), bWalkStraightLineRequired, Vector.getCPtr(vNewvector));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int ComputeSafeLocationInDirection(Vector vPosition, Vector vDirection, float fSearchRadisusMin, float fSearchRadiusMax, CPathfindInformation pPathfindInfo, int bWalkStraightLineRequired, Vector vNewVector) {
    int retVal = NWNXLibPINVOKE.CNWSArea_ComputeSafeLocationInDirection(swigCPtr, Vector.getCPtr(vPosition), Vector.getCPtr(vDirection), fSearchRadisusMin, fSearchRadiusMax, CPathfindInformation.getCPtr(pPathfindInfo), bWalkStraightLineRequired, Vector.getCPtr(vNewVector));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int ComputeNonVisibleLocation(Vector vTargetPosition, CPathfindInformation pPathfindInfo, int bWalkStraightLineRequired, Vector vNewPosition, float fTargetRadius) {
    int retVal = NWNXLibPINVOKE.CNWSArea_ComputeNonVisibleLocation(swigCPtr, Vector.getCPtr(vTargetPosition), CPathfindInformation.getCPtr(pPathfindInfo), bWalkStraightLineRequired, Vector.getCPtr(vNewPosition), fTargetRadius);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int CountVisibleToPlayers(Vector vPosition, int nMaxPlayers) {
    int retVal = NWNXLibPINVOKE.CNWSArea_CountVisibleToPlayers(swigCPtr, Vector.getCPtr(vPosition), nMaxPlayers);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public float ComputeHeight(Vector vPosition) {
    float retVal = NWNXLibPINVOKE.CNWSArea_ComputeHeight(swigCPtr, Vector.getCPtr(vPosition));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public float ComputePathDistance(int nPoints, float* pfPoints) {
    float retVal = NWNXLibPINVOKE.CNWSArea_ComputePathDistance(swigCPtr, nPoints, pfPoints);
    return retVal;
  }

  public void BudgeCreatures(Vector vPosition, Vector vBBMin, Vector vBBMax, uint oidNewObject, int bBumpToActionPoint) {
    NWNXLibPINVOKE.CNWSArea_BudgeCreatures(swigCPtr, Vector.getCPtr(vPosition), Vector.getCPtr(vBBMin), Vector.getCPtr(vBBMax), oidNewObject, bBumpToActionPoint);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int CountAreaTransitionTriggers(uint* pTriggers, int nDeniedTriggers, uint* oidDeniedTriggers) {
    int retVal = NWNXLibPINVOKE.CNWSArea_CountAreaTransitionTriggers(swigCPtr, pTriggers, nDeniedTriggers, oidDeniedTriggers);
    return retVal;
  }

  public void EventHandler(uint nEventId, uint nCallerObjectId, void* pScript, uint nCalendarDay, uint nTimeOfDay) {
    NWNXLibPINVOKE.CNWSArea_EventHandler(swigCPtr, nEventId, nCallerObjectId, (global::System.IntPtr)pScript, nCalendarDay, nTimeOfDay);
  }

  public int GenerateInterTilePath(int* nInterTileStartDepth, int nInterTileStartTileX, int nInterTileStartTileY, int nInterTileStartRegion) {
    int retVal = NWNXLibPINVOKE.CNWSArea_GenerateInterTilePath(swigCPtr, nInterTileStartDepth, nInterTileStartTileX, nInterTileStartTileY, nInterTileStartRegion);
    return retVal;
  }

  public int GetFirstObjectInArea(uint* id) {
    int retVal = NWNXLibPINVOKE.CNWSArea_GetFirstObjectInArea(swigCPtr, (global::System.IntPtr)id);
    return retVal;
  }

  public int GetNextObjectInArea(uint* id) {
    int retVal = NWNXLibPINVOKE.CNWSArea_GetNextObjectInArea(swigCPtr, (global::System.IntPtr)id);
    return retVal;
  }

  public CNWSTile GetTile(Vector vPosition) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_GetTile(swigCPtr, Vector.getCPtr(vPosition));
    CNWSTile ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSTile(cPtr, false);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GoalMoveDenied(int level, int x, int y) {
    int retVal = NWNXLibPINVOKE.CNWSArea_GoalMoveDenied(swigCPtr, level, x, y);
    return retVal;
  }

  public void UpdatePlayerAutomaps() {
    NWNXLibPINVOKE.CNWSArea_UpdatePlayerAutomaps(swigCPtr);
  }

  public int ExploreArea(CNWSCreature pCreature, int x, int y, int nDepth) {
    int retVal = NWNXLibPINVOKE.CNWSArea_ExploreArea(swigCPtr, CNWSCreature.getCPtr(pCreature), x, y, nDepth);
    return retVal;
  }

  public void InterTileDFSExploreArea(byte* pTransTable, int nDepth, int x, int y, float fEntranceX, float fEntranceY) {
    NWNXLibPINVOKE.CNWSArea_InterTileDFSExploreArea(swigCPtr, pTransTable, nDepth, x, y, fEntranceX, fEntranceY);
  }

  public int InterTileDFS(int level, int depth, int x, int y, int region) {
    int retVal = NWNXLibPINVOKE.CNWSArea_InterTileDFS(swigCPtr, level, depth, x, y, region);
    return retVal;
  }

  public int InterTileDFSGenerateSuccessors(int level, int x, int y, int region) {
    int retVal = NWNXLibPINVOKE.CNWSArea_InterTileDFSGenerateSuccessors(swigCPtr, level, x, y, region);
    return retVal;
  }

  public int InterTileDFSSoundPath(byte* pTransTable, int nDepth, int x, int y, int nRegion) {
    int retVal = NWNXLibPINVOKE.CNWSArea_InterTileDFSSoundPath(swigCPtr, pTransTable, nDepth, x, y, nRegion);
    return retVal;
  }

  public int LoadArea(int bLoadStateInfo, int bLoadOID, CResGFF cOverrideGitGFF, CResStruct cOverrideGitTopLevelStruct) {
    int retVal = NWNXLibPINVOKE.CNWSArea_LoadArea__SWIG_0(swigCPtr, bLoadStateInfo, bLoadOID, CResGFF.getCPtr(cOverrideGitGFF), CResStruct.getCPtr(cOverrideGitTopLevelStruct));
    return retVal;
  }

  public int LoadArea(int bLoadStateInfo, int bLoadOID, CResGFF cOverrideGitGFF) {
    int retVal = NWNXLibPINVOKE.CNWSArea_LoadArea__SWIG_1(swigCPtr, bLoadStateInfo, bLoadOID, CResGFF.getCPtr(cOverrideGitGFF));
    return retVal;
  }

  public int LoadArea(int bLoadStateInfo, int bLoadOID) {
    int retVal = NWNXLibPINVOKE.CNWSArea_LoadArea__SWIG_2(swigCPtr, bLoadStateInfo, bLoadOID);
    return retVal;
  }

  public int LoadArea(int bLoadStateInfo) {
    int retVal = NWNXLibPINVOKE.CNWSArea_LoadArea__SWIG_3(swigCPtr, bLoadStateInfo);
    return retVal;
  }

  public int LoadArea() {
    int retVal = NWNXLibPINVOKE.CNWSArea_LoadArea__SWIG_4(swigCPtr);
    return retVal;
  }

  public override int NoCreaturesOnLine(float fSourceX, float fSourceY, float fTargetX, float fTargetY, CPathfindInformation pPathfindInfo, int bCheckSourceOccluded, int bIgnoreAssociates, uint* poidBlockingCreature, int bEvaluateOverlappingTarget) {
    int retVal = NWNXLibPINVOKE.CNWSArea_NoCreaturesOnLine__SWIG_0(swigCPtr, fSourceX, fSourceY, fTargetX, fTargetY, CPathfindInformation.getCPtr(pPathfindInfo), bCheckSourceOccluded, bIgnoreAssociates, poidBlockingCreature, bEvaluateOverlappingTarget);
    return retVal;
  }

  public override int NoCreaturesOnLine(float fSourceX, float fSourceY, float fTargetX, float fTargetY, CPathfindInformation pPathfindInfo, int bCheckSourceOccluded, int bIgnoreAssociates, uint* poidBlockingCreature) {
    int retVal = NWNXLibPINVOKE.CNWSArea_NoCreaturesOnLine__SWIG_1(swigCPtr, fSourceX, fSourceY, fTargetX, fTargetY, CPathfindInformation.getCPtr(pPathfindInfo), bCheckSourceOccluded, bIgnoreAssociates, poidBlockingCreature);
    return retVal;
  }

  public override int NoCreaturesOnLine(float fSourceX, float fSourceY, float fTargetX, float fTargetY, CPathfindInformation pPathfindInfo, int bCheckSourceOccluded, int bIgnoreAssociates) {
    int retVal = NWNXLibPINVOKE.CNWSArea_NoCreaturesOnLine__SWIG_2(swigCPtr, fSourceX, fSourceY, fTargetX, fTargetY, CPathfindInformation.getCPtr(pPathfindInfo), bCheckSourceOccluded, bIgnoreAssociates);
    return retVal;
  }

  public override int NoCreaturesOnLine(float fSourceX, float fSourceY, float fTargetX, float fTargetY, CPathfindInformation pPathfindInfo, int bCheckSourceOccluded) {
    int retVal = NWNXLibPINVOKE.CNWSArea_NoCreaturesOnLine__SWIG_3(swigCPtr, fSourceX, fSourceY, fTargetX, fTargetY, CPathfindInformation.getCPtr(pPathfindInfo), bCheckSourceOccluded);
    return retVal;
  }

  public override int NoCreaturesOnLine(float fSourceX, float fSourceY, float fTargetX, float fTargetY, CPathfindInformation pPathfindInfo) {
    int retVal = NWNXLibPINVOKE.CNWSArea_NoCreaturesOnLine__SWIG_4(swigCPtr, fSourceX, fSourceY, fTargetX, fTargetY, CPathfindInformation.getCPtr(pPathfindInfo));
    return retVal;
  }

  public int EvaluateOverlappingTargets(CPathfindInformation pPathfindInfo, Vector vPosition, uint oidAreaCreature, float fSourceX, float fSourceY, float fBothCreaturesPersonalSpace, int bEvaluateOverlappingTarget) {
    int retVal = NWNXLibPINVOKE.CNWSArea_EvaluateOverlappingTargets(swigCPtr, CPathfindInformation.getCPtr(pPathfindInfo), Vector.getCPtr(vPosition), oidAreaCreature, fSourceX, fSourceY, fBothCreaturesPersonalSpace, bEvaluateOverlappingTarget);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int PackAreaIntoMessage(int nX, int nY, int nZ, CNWSPlayer pPlayer) {
    int retVal = NWNXLibPINVOKE.CNWSArea_PackAreaIntoMessage(swigCPtr, nX, nY, nZ, CNWSPlayer.getCPtr(pPlayer));
    return retVal;
  }

  public uint PlotGridPath(CPathfindInformation pcPathfindInformation, ulong nTimeSlice, bool bMoveToNearest) {
    uint retVal = NWNXLibPINVOKE.CNWSArea_PlotGridPath(swigCPtr, CPathfindInformation.getCPtr(pcPathfindInformation), nTimeSlice, bMoveToNearest);
    return retVal;
  }

  public void GridSearchPath(int nPathID) {
    NWNXLibPINVOKE.CNWSArea_GridSearchPath(swigCPtr, nPathID);
  }

  public bool GridSearchPathInDirection(int nStepNumber, int nX, int nY, int nDirectionX, int nDirectionY, bool bTestDirectLine, CNWSAreaGridPoint pcSearch) {
    bool ret = NWNXLibPINVOKE.CNWSArea_GridSearchPathInDirection(swigCPtr, nStepNumber, nX, nY, nDirectionX, nDirectionY, bTestDirectLine, CNWSAreaGridPoint.getCPtr(pcSearch));
    return ret;
  }

  public uint PlotPath(CPathfindInformation pcPathfindInformation, ulong nTimeSlice) {
    uint retVal = NWNXLibPINVOKE.CNWSArea_PlotPath(swigCPtr, CPathfindInformation.getCPtr(pcPathfindInformation), nTimeSlice);
    return retVal;
  }

  public int RemoveInterTileExit(int nTileX, int nTileY, int nEntrance, int nExit) {
    int retVal = NWNXLibPINVOKE.CNWSArea_RemoveInterTileExit(swigCPtr, nTileX, nTileY, nEntrance, nExit);
    return retVal;
  }

  public int RemoveObjectFromArea(uint id) {
    int retVal = NWNXLibPINVOKE.CNWSArea_RemoveObjectFromArea(swigCPtr, id);
    return retVal;
  }

  public void SaveArea(CResGFF pRes, CResStruct pStruct) {
    NWNXLibPINVOKE.CNWSArea_SaveArea__SWIG_0(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pStruct));
  }

  public void SaveArea(CERFFile cSaveFile, CExoString sName) {
    NWNXLibPINVOKE.CNWSArea_SaveArea__SWIG_1(swigCPtr, CERFFile.getCPtr(cSaveFile), CExoString.getCPtr(sName));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SaveGIT(CResGFF pRes, CResStruct pStruct, CExoArrayListUInt32 aPlayers, int bSaveOIDs) {
    NWNXLibPINVOKE.CNWSArea_SaveGIT__SWIG_0(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pStruct), CExoArrayListUInt32.getCPtr(aPlayers), bSaveOIDs);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SaveGIT(CERFFile cSaveFile, CExoString sName, CExoArrayListUInt32 aPlayers) {
    NWNXLibPINVOKE.CNWSArea_SaveGIT__SWIG_1(swigCPtr, CERFFile.getCPtr(cSaveFile), CExoString.getCPtr(sName), CExoArrayListUInt32.getCPtr(aPlayers));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int LoadGIT(int bLoadStateInfo, int bLoadOID) {
    int retVal = NWNXLibPINVOKE.CNWSArea_LoadGIT__SWIG_0(swigCPtr, bLoadStateInfo, bLoadOID);
    return retVal;
  }

  public void LoadGIT(CResGFF pRes, CResStruct pStruct, int bLoadStateInfo, int bLoadOID) {
    NWNXLibPINVOKE.CNWSArea_LoadGIT__SWIG_1(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pStruct), bLoadStateInfo, bLoadOID);
  }

  public void SmoothCornerOptimize(int nOldWayPoints, float* pfOldWayPoints, int* nNewWayPoints, float** pfNewWayPoints) {
    NWNXLibPINVOKE.CNWSArea_SmoothCornerOptimize(swigCPtr, nOldWayPoints, pfOldWayPoints, nNewWayPoints, pfNewWayPoints);
  }

  public int SmoothPointsOnPath() {
    int retVal = NWNXLibPINVOKE.CNWSArea_SmoothPointsOnPath(swigCPtr);
    return retVal;
  }

  public void SmoothSelection(int nOldWayPoints, float* pfOldWayPoitns, int* nNewWayPoints, float** pfNewWayPoints) {
    NWNXLibPINVOKE.CNWSArea_SmoothSelection(swigCPtr, nOldWayPoints, pfOldWayPoitns, nNewWayPoints, pfNewWayPoints);
  }

  public void SmoothSelectNodes(int nOldWayPoints, float* pfOldWayPoints, int* nNewWayPoints, float** pfNewWayPoints, int bChopIntoMeterSegments, int bSelectBestLines) {
    NWNXLibPINVOKE.CNWSArea_SmoothSelectNodes(swigCPtr, nOldWayPoints, pfOldWayPoints, nNewWayPoints, pfNewWayPoints, bChopIntoMeterSegments, bSelectBestLines);
  }

  public int TestDirectLine(float fStartX, float fStartY, float fEndX, float fEndY, float fPersonalSpace, float fCreatureHeight, int bIgnoreClosedDoors) {
    int retVal = NWNXLibPINVOKE.CNWSArea_TestDirectLine__SWIG_0(swigCPtr, fStartX, fStartY, fEndX, fEndY, fPersonalSpace, fCreatureHeight, bIgnoreClosedDoors);
    return retVal;
  }

  public int TestDirectLine(float fStartX, float fStartY, float fEndX, float fEndY, float fPersonalSpace, float fCreatureHeight) {
    int retVal = NWNXLibPINVOKE.CNWSArea_TestDirectLine__SWIG_1(swigCPtr, fStartX, fStartY, fEndX, fEndY, fPersonalSpace, fCreatureHeight);
    return retVal;
  }

  public int TestLineWalkable(float fStartX, float fStartY, float fEndX, float fEndY) {
    int retVal = NWNXLibPINVOKE.CNWSArea_TestLineWalkable(swigCPtr, fStartX, fStartY, fEndX, fEndY);
    return retVal;
  }

  public void UnloadArea() {
    NWNXLibPINVOKE.CNWSArea_UnloadArea(swigCPtr);
  }

  public void PlayVisualEffect(CGameEffect pEffect, Vector vPosition) {
    NWNXLibPINVOKE.CNWSArea_PlayVisualEffect(swigCPtr, CGameEffect.getCPtr(pEffect), Vector.getCPtr(vPosition));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int PlotSoundPath(CPathfindInformation pcPathfindInformation) {
    int retVal = NWNXLibPINVOKE.CNWSArea_PlotSoundPath(swigCPtr, CPathfindInformation.getCPtr(pcPathfindInformation));
    return retVal;
  }

  public int GetFirstObjectIndiceByX(int* nIndice, float fMinX) {
    int retVal = NWNXLibPINVOKE.CNWSArea_GetFirstObjectIndiceByX(swigCPtr, nIndice, fMinX);
    return retVal;
  }

  public int UpdatePositionInObjectsArray(ICGameObject pUpdateObject) {
    int retVal = NWNXLibPINVOKE.CNWSArea_UpdatePositionInObjectsArray(swigCPtr, pUpdateObject == null ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : pUpdateObject.GetInterfaceCPtr());
    return retVal;
  }

  public int InSubAreas(Vector vPosition, CExoArrayListUInt32 aSubAreasWithin) {
    int retVal = NWNXLibPINVOKE.CNWSArea_InSubAreas(swigCPtr, Vector.getCPtr(vPosition), CExoArrayListUInt32.getCPtr(aSubAreasWithin));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int IntersectingLineSegment(Vector vStart, Vector vEnd, CExoArrayListUInt32 aIntersectingSubAreas) {
    int retVal = NWNXLibPINVOKE.CNWSArea_IntersectingLineSegment(swigCPtr, Vector.getCPtr(vStart), Vector.getCPtr(vEnd), CExoArrayListUInt32.getCPtr(aIntersectingSubAreas));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public uint GetDoorCrossed(Vector vStart, Vector vEnd) {
    uint retVal = NWNXLibPINVOKE.CNWSArea_GetDoorCrossed(swigCPtr, Vector.getCPtr(vStart), Vector.getCPtr(vEnd));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public void ApplyEffect(CGameEffect pEffect, Vector vPosition, Vector vOrientation) {
    NWNXLibPINVOKE.CNWSArea_ApplyEffect(swigCPtr, CGameEffect.getCPtr(pEffect), Vector.getCPtr(vPosition), Vector.getCPtr(vOrientation));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int ClearLineOfSight(Vector vSource, Vector vTarget, Vector vImpact, uint* oidImpact, uint oidStart, uint oidTarget, int bIgnoreTransDoors) {
    int retVal = NWNXLibPINVOKE.CNWSArea_ClearLineOfSight__SWIG_0(swigCPtr, Vector.getCPtr(vSource), Vector.getCPtr(vTarget), Vector.getCPtr(vImpact), oidImpact, oidStart, oidTarget, bIgnoreTransDoors);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int ClearLineOfSight(Vector vSource, Vector vTarget, Vector vImpact, uint* oidImpact, uint oidStart, uint oidTarget) {
    int retVal = NWNXLibPINVOKE.CNWSArea_ClearLineOfSight__SWIG_1(swigCPtr, Vector.getCPtr(vSource), Vector.getCPtr(vTarget), Vector.getCPtr(vImpact), oidImpact, oidStart, oidTarget);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int ClearLineOfSight(Vector vSource, Vector vTarget, Vector vImpact, uint* oidImpact, uint oidStart) {
    int retVal = NWNXLibPINVOKE.CNWSArea_ClearLineOfSight__SWIG_2(swigCPtr, Vector.getCPtr(vSource), Vector.getCPtr(vTarget), Vector.getCPtr(vImpact), oidImpact, oidStart);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int ClearLineOfSight(Vector vSource, Vector vTarget, Vector vImpact, uint* oidImpact) {
    int retVal = NWNXLibPINVOKE.CNWSArea_ClearLineOfSight__SWIG_3(swigCPtr, Vector.getCPtr(vSource), Vector.getCPtr(vTarget), Vector.getCPtr(vImpact), oidImpact);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public override int HandleTransparentDoors(float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, uint oidDeniedDoor, uint* oidBlockingDoor, int bWalking, CExoArrayListCGameObjectPtr pExcludeList, int bIgnoreTransDoors) {
    int retVal = NWNXLibPINVOKE.CNWSArea_HandleTransparentDoors__SWIG_0(swigCPtr, fSourceX, fSourceY, fTargetX, fTargetY, fMinZ, fMaxZ, fPersonalSpace, oidDeniedDoor, (global::System.IntPtr)oidBlockingDoor, bWalking, CExoArrayListCGameObjectPtr.getCPtr(pExcludeList), bIgnoreTransDoors);
    return retVal;
  }

  public override int HandleTransparentDoors(float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, uint oidDeniedDoor, uint* oidBlockingDoor, int bWalking, CExoArrayListCGameObjectPtr pExcludeList) {
    int retVal = NWNXLibPINVOKE.CNWSArea_HandleTransparentDoors__SWIG_1(swigCPtr, fSourceX, fSourceY, fTargetX, fTargetY, fMinZ, fMaxZ, fPersonalSpace, oidDeniedDoor, (global::System.IntPtr)oidBlockingDoor, bWalking, CExoArrayListCGameObjectPtr.getCPtr(pExcludeList));
    return retVal;
  }

  public override int HandleTransparentDoors(float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, uint oidDeniedDoor, uint* oidBlockingDoor, int bWalking) {
    int retVal = NWNXLibPINVOKE.CNWSArea_HandleTransparentDoors__SWIG_2(swigCPtr, fSourceX, fSourceY, fTargetX, fTargetY, fMinZ, fMaxZ, fPersonalSpace, oidDeniedDoor, (global::System.IntPtr)oidBlockingDoor, bWalking);
    return retVal;
  }

  public override int GetIsIDInExcludeList(uint oidID, CExoArrayListCGameObjectPtr pExcludeList) {
    int retVal = NWNXLibPINVOKE.CNWSArea_GetIsIDInExcludeList__SWIG_0(swigCPtr, oidID, CExoArrayListCGameObjectPtr.getCPtr(pExcludeList));
    return retVal;
  }

  public override int GetIsIDInExcludeList(uint oidID) {
    int retVal = NWNXLibPINVOKE.CNWSArea_GetIsIDInExcludeList__SWIG_1(swigCPtr, oidID);
    return retVal;
  }

  public override int NoNoneWalkPolysInStaticObject(uint oidObject, float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, uint oidDeniedDoor, int bWalking) {
    int retVal = NWNXLibPINVOKE.CNWSArea_NoNoneWalkPolysInStaticObject__SWIG_0(swigCPtr, oidObject, fSourceX, fSourceY, fTargetX, fTargetY, fMinZ, fMaxZ, fPersonalSpace, oidDeniedDoor, bWalking);
    return retVal;
  }

  public override int NoNoneWalkPolysInStaticObject(uint oidObject, float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, uint oidDeniedDoor) {
    int retVal = NWNXLibPINVOKE.CNWSArea_NoNoneWalkPolysInStaticObject__SWIG_1(swigCPtr, oidObject, fSourceX, fSourceY, fTargetX, fTargetY, fMinZ, fMaxZ, fPersonalSpace, oidDeniedDoor);
    return retVal;
  }

  public void IncrementPlayersInArea() {
    NWNXLibPINVOKE.CNWSArea_IncrementPlayersInArea(swigCPtr);
  }

  public void DecrementPlayersInArea() {
    NWNXLibPINVOKE.CNWSArea_DecrementPlayersInArea(swigCPtr);
  }

  public byte GetPVPSetting() {
    byte retVal = NWNXLibPINVOKE.CNWSArea_GetPVPSetting(swigCPtr);
    return retVal;
  }

  public int GetSurfaceMaterial(Vector vPosition) {
    int retVal = NWNXLibPINVOKE.CNWSArea_GetSurfaceMaterial(swigCPtr, Vector.getCPtr(vPosition));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int PositionWalkable(Vector vPosition) {
    int retVal = NWNXLibPINVOKE.CNWSArea_PositionWalkable(swigCPtr, Vector.getCPtr(vPosition));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public void SetCurrentWeather(byte nWeatherType, int bWeatherStarted) {
    NWNXLibPINVOKE.CNWSArea_SetCurrentWeather(swigCPtr, nWeatherType, bWeatherStarted);
  }

  public int RunEventScript(int nScript, CExoString psOverrideScriptName) {
    int retVal = NWNXLibPINVOKE.CNWSArea_RunEventScript__SWIG_0(swigCPtr, nScript, CExoString.getCPtr(psOverrideScriptName));
    return retVal;
  }

  public int RunEventScript(int nScript) {
    int retVal = NWNXLibPINVOKE.CNWSArea_RunEventScript__SWIG_1(swigCPtr, nScript);
    return retVal;
  }

  public int LoadAreaHeader(CResStruct pStruct) {
    int retVal = NWNXLibPINVOKE.CNWSArea_LoadAreaHeader(swigCPtr, CResStruct.getCPtr(pStruct));
    return retVal;
  }

  public int LoadTileSetInfo(CResStruct pStruct) {
    int retVal = NWNXLibPINVOKE.CNWSArea_LoadTileSetInfo(swigCPtr, CResStruct.getCPtr(pStruct));
    return retVal;
  }

  public int LoadCreatures(CResGFF pRes, CResStruct pStruct, int bLoadStateInfo, int bLoadOID) {
    int retVal = NWNXLibPINVOKE.CNWSArea_LoadCreatures(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pStruct), bLoadStateInfo, bLoadOID);
    return retVal;
  }

  public int LoadPlayers(CResGFF pRes, CResStruct pStruct) {
    int retVal = NWNXLibPINVOKE.CNWSArea_LoadPlayers(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pStruct));
    return retVal;
  }

  public int LoadItems(CResGFF pRes, CResStruct pStruct, int bLoadStateInfo, int bLoadOID) {
    int retVal = NWNXLibPINVOKE.CNWSArea_LoadItems(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pStruct), bLoadStateInfo, bLoadOID);
    return retVal;
  }

  public int LoadDoors(CResGFF pRes, CResStruct pStruct, int bLoadStateInfo, int bLoadOID) {
    int retVal = NWNXLibPINVOKE.CNWSArea_LoadDoors(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pStruct), bLoadStateInfo, bLoadOID);
    return retVal;
  }

  public int LoadTriggers(CResGFF pRes, CResStruct pStruct, int bLoadStateInfo, int bLoadOID) {
    int retVal = NWNXLibPINVOKE.CNWSArea_LoadTriggers(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pStruct), bLoadStateInfo, bLoadOID);
    return retVal;
  }

  public int LoadEncounters(CResGFF pRes, CResStruct pStruct, int bLoadStateInfo, int bLoadOID) {
    int retVal = NWNXLibPINVOKE.CNWSArea_LoadEncounters(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pStruct), bLoadStateInfo, bLoadOID);
    return retVal;
  }

  public int LoadWaypoints(CResGFF pRes, CResStruct pStruct, int bLoadStateInfo, int bLoadOID) {
    int retVal = NWNXLibPINVOKE.CNWSArea_LoadWaypoints(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pStruct), bLoadStateInfo, bLoadOID);
    return retVal;
  }

  public int LoadSounds(CResGFF pRes, CResStruct pStruct, int bLoadStateInfo, int bLoadOID) {
    int retVal = NWNXLibPINVOKE.CNWSArea_LoadSounds(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pStruct), bLoadStateInfo, bLoadOID);
    return retVal;
  }

  public int LoadPlaceables(CResGFF pRes, CResStruct pStruct, int bLoadStateInfo, int bLoadOID) {
    int retVal = NWNXLibPINVOKE.CNWSArea_LoadPlaceables(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pStruct), bLoadStateInfo, bLoadOID);
    return retVal;
  }

  public int LoadStores(CResGFF pRes, CResStruct pStruct, int bLoadStateInfo, int bLoadOID) {
    int retVal = NWNXLibPINVOKE.CNWSArea_LoadStores(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pStruct), bLoadStateInfo, bLoadOID);
    return retVal;
  }

  public int LoadAreaEffects(CResGFF pRes, CResStruct pStruct, int bLoadStateInfo, int bLoadOID) {
    int retVal = NWNXLibPINVOKE.CNWSArea_LoadAreaEffects(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pStruct), bLoadStateInfo, bLoadOID);
    return retVal;
  }

  public int LoadProperties(CResGFF pRes, CResStruct pStruct) {
    int retVal = NWNXLibPINVOKE.CNWSArea_LoadProperties(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pStruct));
    return retVal;
  }

  public void IncreaseAILevelPriority() {
    NWNXLibPINVOKE.CNWSArea_IncreaseAILevelPriority(swigCPtr);
  }

  public void DecreaseAILevelPriority() {
    NWNXLibPINVOKE.CNWSArea_DecreaseAILevelPriority(swigCPtr);
  }

  public void SaveCreatures(CResGFF pRes, CResStruct pTopLevelStruct, CExoArrayListUInt32 aCreatures, int bSaveOIDs) {
    NWNXLibPINVOKE.CNWSArea_SaveCreatures(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pTopLevelStruct), CExoArrayListUInt32.getCPtr(aCreatures), bSaveOIDs);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SaveItems(CResGFF pRes, CResStruct pTopLevelStruct, CExoArrayListUInt32 aItems, int bSaveOIDs) {
    NWNXLibPINVOKE.CNWSArea_SaveItems(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pTopLevelStruct), CExoArrayListUInt32.getCPtr(aItems), bSaveOIDs);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SaveDoors(CResGFF pRes, CResStruct pTopLevelStruct, CExoArrayListUInt32 aDoors, int bSaveOIDs) {
    NWNXLibPINVOKE.CNWSArea_SaveDoors(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pTopLevelStruct), CExoArrayListUInt32.getCPtr(aDoors), bSaveOIDs);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SaveTriggers(CResGFF pRes, CResStruct pTopLevelStruct, CExoArrayListUInt32 aTriggers, int bSaveOIDs) {
    NWNXLibPINVOKE.CNWSArea_SaveTriggers(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pTopLevelStruct), CExoArrayListUInt32.getCPtr(aTriggers), bSaveOIDs);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SaveEncounters(CResGFF pRes, CResStruct pTopLevelStruct, CExoArrayListUInt32 aEncounters, int bSaveOIDs) {
    NWNXLibPINVOKE.CNWSArea_SaveEncounters(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pTopLevelStruct), CExoArrayListUInt32.getCPtr(aEncounters), bSaveOIDs);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SaveWaypoints(CResGFF pRes, CResStruct pTopLevelStruct, CExoArrayListUInt32 aWaypoints, int bSaveOIDs) {
    NWNXLibPINVOKE.CNWSArea_SaveWaypoints(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pTopLevelStruct), CExoArrayListUInt32.getCPtr(aWaypoints), bSaveOIDs);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SaveSounds(CResGFF pRes, CResStruct pTopLevelStruct, CExoArrayListUInt32 aSounds, int bSaveOIDs) {
    NWNXLibPINVOKE.CNWSArea_SaveSounds(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pTopLevelStruct), CExoArrayListUInt32.getCPtr(aSounds), bSaveOIDs);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SavePlaceables(CResGFF pRes, CResStruct pTopLevelStruct, CExoArrayListUInt32 aPlaceables, int bSaveOIDs) {
    NWNXLibPINVOKE.CNWSArea_SavePlaceables(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pTopLevelStruct), CExoArrayListUInt32.getCPtr(aPlaceables), bSaveOIDs);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SaveStores(CResGFF pRes, CResStruct pTopLevelStruct, CExoArrayListUInt32 aStores, int bSaveOIDs) {
    NWNXLibPINVOKE.CNWSArea_SaveStores(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pTopLevelStruct), CExoArrayListUInt32.getCPtr(aStores), bSaveOIDs);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SaveAreaEffects(CResGFF pRes, CResStruct pTopLevelStruct, CExoArrayListUInt32 aStores, int bSaveOIDs) {
    NWNXLibPINVOKE.CNWSArea_SaveAreaEffects(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pTopLevelStruct), CExoArrayListUInt32.getCPtr(aStores), bSaveOIDs);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SaveProperties(CResGFF pRes, CResStruct pTopLevelStruct) {
    NWNXLibPINVOKE.CNWSArea_SaveProperties(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pTopLevelStruct));
  }

  public new void _Destructor() {
    NWNXLibPINVOKE.CNWSArea__Destructor(swigCPtr);
  }

  public uint m_idSelf {
    set {
      NWNXLibPINVOKE.CNWSArea_m_idSelf_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSArea_m_idSelf_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nObjectType {
    set {
      NWNXLibPINVOKE.CNWSArea_m_nObjectType_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSArea_m_nObjectType_get(swigCPtr);
      return retVal;
    }

  }

  public void* m_pNwnxData {
    set {
      NWNXLibPINVOKE.CNWSArea_m_pNwnxData_set(swigCPtr, (global::System.IntPtr)value);
    } 
    get {
        global::System.IntPtr retVal = NWNXLibPINVOKE.CNWSArea_m_pNwnxData_get(swigCPtr);
        return (void*)retVal;
    }

  }

  public virtual void SetId(uint oidNew) {
    NWNXLibPINVOKE.CNWSArea_SetId(swigCPtr, oidNew);
  }

  public virtual void ResetUpdateTimes(uint nCalendarDay, uint nTimeOfDay) {
    NWNXLibPINVOKE.CNWSArea_ResetUpdateTimes(swigCPtr, nCalendarDay, nTimeOfDay);
  }

  public virtual SWIGTYPE_p_CNWCObject AsNWCObject() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_AsNWCObject(swigCPtr);
    SWIGTYPE_p_CNWCObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_CNWCObject(cPtr, false);
    return ret;
  }

  public virtual CNWSObject AsNWSObject() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_AsNWSObject(swigCPtr);
    CNWSObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSObject(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_CNWCDoor AsNWCDoor() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_AsNWCDoor(swigCPtr);
    SWIGTYPE_p_CNWCDoor ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_CNWCDoor(cPtr, false);
    return ret;
  }

  public virtual CNWSDoor AsNWSDoor() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_AsNWSDoor(swigCPtr);
    CNWSDoor ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSDoor(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_CNWCModule AsNWCModule() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_AsNWCModule(swigCPtr);
    SWIGTYPE_p_CNWCModule ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_CNWCModule(cPtr, false);
    return ret;
  }

  public virtual CNWSModule AsNWSModule() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_AsNWSModule(swigCPtr);
    CNWSModule ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSModule(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_CNWCArea AsNWCArea() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_AsNWCArea(swigCPtr);
    SWIGTYPE_p_CNWCArea ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_CNWCArea(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_CNWCCreature AsNWCCreature() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_AsNWCCreature(swigCPtr);
    SWIGTYPE_p_CNWCCreature ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_CNWCCreature(cPtr, false);
    return ret;
  }

  public virtual CNWSCreature AsNWSCreature() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_AsNWSCreature(swigCPtr);
    CNWSCreature ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSCreature(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_CNWCItem AsNWCItem() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_AsNWCItem(swigCPtr);
    SWIGTYPE_p_CNWCItem ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_CNWCItem(cPtr, false);
    return ret;
  }

  public virtual CNWSItem AsNWSItem() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_AsNWSItem(swigCPtr);
    CNWSItem ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSItem(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_CNWCTrigger AsNWCTrigger() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_AsNWCTrigger(swigCPtr);
    SWIGTYPE_p_CNWCTrigger ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_CNWCTrigger(cPtr, false);
    return ret;
  }

  public virtual CNWSTrigger AsNWSTrigger() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_AsNWSTrigger(swigCPtr);
    CNWSTrigger ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSTrigger(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_CNWCProjectile AsNWCProjectile() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_AsNWCProjectile(swigCPtr);
    SWIGTYPE_p_CNWCProjectile ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_CNWCProjectile(cPtr, false);
    return ret;
  }

  public virtual CNWSPlayerTURD AsNWSPlayerTURD() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_AsNWSPlayerTURD(swigCPtr);
    CNWSPlayerTURD ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSPlayerTURD(cPtr, false);
    return ret;
  }

  public virtual CNWSPlaceable AsNWSPlaceable() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_AsNWSPlaceable(swigCPtr);
    CNWSPlaceable ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSPlaceable(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_CNWCPlaceable AsNWCPlaceable() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_AsNWCPlaceable(swigCPtr);
    SWIGTYPE_p_CNWCPlaceable ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_CNWCPlaceable(cPtr, false);
    return ret;
  }

  public virtual CNWSAreaOfEffectObject AsNWSAreaOfEffectObject() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_AsNWSAreaOfEffectObject(swigCPtr);
    CNWSAreaOfEffectObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSAreaOfEffectObject(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_CNWCAreaOfEffectObject AsNWCAreaOfEffectObject() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_AsNWCAreaOfEffectObject(swigCPtr);
    SWIGTYPE_p_CNWCAreaOfEffectObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_CNWCAreaOfEffectObject(cPtr, false);
    return ret;
  }

  public virtual CNWSWaypoint AsNWSWaypoint() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_AsNWSWaypoint(swigCPtr);
    CNWSWaypoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSWaypoint(cPtr, false);
    return ret;
  }

  public virtual CNWSEncounter AsNWSEncounter() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_AsNWSEncounter(swigCPtr);
    CNWSEncounter ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSEncounter(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_CNWCStore AsNWCStore() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_AsNWCStore(swigCPtr);
    SWIGTYPE_p_CNWCStore ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_CNWCStore(cPtr, false);
    return ret;
  }

  public virtual CNWSStore AsNWSStore() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_AsNWSStore(swigCPtr);
    CNWSStore ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSStore(cPtr, false);
    return ret;
  }

  public virtual CNWSSoundObject AsNWSSoundObject() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_AsNWSSoundObject(swigCPtr);
    CNWSSoundObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSSoundObject(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_CNWCSoundObject AsNWCSoundObject() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSArea_AsNWCSoundObject(swigCPtr);
    SWIGTYPE_p_CNWCSoundObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_CNWCSoundObject(cPtr, false);
    return ret;
  }

}

}

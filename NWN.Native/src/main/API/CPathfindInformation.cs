//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public unsafe class CPathfindInformation : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CPathfindInformation(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CPathfindInformation obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CPathfindInformation() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NWNXLibPINVOKE.delete_CPathfindInformation(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public global::System.IntPtr Pointer {
    get {
      return swigCPtr.Handle;
    }
  }

  public static unsafe implicit operator void*(CPathfindInformation self) {
    return (void*)self.swigCPtr.Handle;
  }

  public static unsafe CPathfindInformation FromPointer(void* pointer, bool memoryOwn = false) {
    return pointer != null ? new CPathfindInformation((global::System.IntPtr)pointer, memoryOwn) : null;
  }

  public static CPathfindInformation FromPointer(global::System.IntPtr pointer, bool memoryOwn = false) {
    return pointer != global::System.IntPtr.Zero ? new CPathfindInformation(pointer, memoryOwn) : null;
  }

  public bool Equals(CPathfindInformation other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }

    if (ReferenceEquals(this, other)) {
      return true;
    }

    return Pointer.Equals(other.Pointer);
  }

  public override bool Equals(object obj) {
    return ReferenceEquals(this, obj) || obj is CPathfindInformation other && Equals(other);
  }

  public override int GetHashCode() {
    return swigCPtr.Handle.GetHashCode();
  }

  public static bool operator ==(CPathfindInformation left, CPathfindInformation right) {
    return Equals(left, right);
  }

  public static bool operator !=(CPathfindInformation left, CPathfindInformation right) {
    return !Equals(left, right);
  }

  public int m_bClientMoving {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_bClientMoving_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CPathfindInformation_m_bClientMoving_get(swigCPtr);
      return retVal;
    }

  }

  public float m_fPersonalSpace {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_fPersonalSpace_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CPathfindInformation_m_fPersonalSpace_get(swigCPtr);
      return retVal;
    }

  }

  public float m_fCreaturePersonalSpace {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_fCreaturePersonalSpace_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CPathfindInformation_m_fCreaturePersonalSpace_get(swigCPtr);
      return retVal;
    }

  }

  public float m_fHeight {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_fHeight_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CPathfindInformation_m_fHeight_get(swigCPtr);
      return retVal;
    }

  }

  public float m_fHitDistance {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_fHitDistance_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CPathfindInformation_m_fHitDistance_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bUnsmoothedPath {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_bUnsmoothedPath_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CPathfindInformation_m_bUnsmoothedPath_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bInterTileOnly {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_bInterTileOnly_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CPathfindInformation_m_bInterTileOnly_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bGenerateClosestPointPath {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_bGenerateClosestPointPath_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CPathfindInformation_m_bGenerateClosestPointPath_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nClientPathNumber {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_nClientPathNumber_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CPathfindInformation_m_nClientPathNumber_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_oidSelf {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_oidSelf_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CPathfindInformation_m_oidSelf_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_oidMovingTo {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_oidMovingTo_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CPathfindInformation_m_oidMovingTo_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nCallsToPlotPath {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_nCallsToPlotPath_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CPathfindInformation_m_nCallsToPlotPath_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bTempPoints {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_bTempPoints_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CPathfindInformation_m_bTempPoints_get(swigCPtr);
      return retVal;
    }

  }

  public float m_fTempPointEndX {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_fTempPointEndX_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CPathfindInformation_m_fTempPointEndX_get(swigCPtr);
      return retVal;
    }

  }

  public float m_fTempPointEndY {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_fTempPointEndY_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CPathfindInformation_m_fTempPointEndY_get(swigCPtr);
      return retVal;
    }

  }

  public float m_fTempPointEndZ {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_fTempPointEndZ_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CPathfindInformation_m_fTempPointEndZ_get(swigCPtr);
      return retVal;
    }

  }

  public float m_fTempPointTolerance {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_fTempPointTolerance_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CPathfindInformation_m_fTempPointTolerance_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_oidTempPointEndArea {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_oidTempPointEndArea_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CPathfindInformation_m_oidTempPointEndArea_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bNewPoints {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_bNewPoints_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CPathfindInformation_m_bNewPoints_get(swigCPtr);
      return retVal;
    }

  }

  public float m_fNewPointEndX {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_fNewPointEndX_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CPathfindInformation_m_fNewPointEndX_get(swigCPtr);
      return retVal;
    }

  }

  public float m_fNewPointEndY {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_fNewPointEndY_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CPathfindInformation_m_fNewPointEndY_get(swigCPtr);
      return retVal;
    }

  }

  public float m_fNewPointEndZ {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_fNewPointEndZ_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CPathfindInformation_m_fNewPointEndZ_get(swigCPtr);
      return retVal;
    }

  }

  public float m_fPointTolerance {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_fPointTolerance_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CPathfindInformation_m_fPointTolerance_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nGridStepTolerance {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_nGridStepTolerance_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CPathfindInformation_m_nGridStepTolerance_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_oidNewPointEndArea {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_oidNewPointEndArea_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CPathfindInformation_m_oidNewPointEndArea_get(swigCPtr);
      return retVal;
    }

  }

  public float m_fNewPointStartX {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_fNewPointStartX_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CPathfindInformation_m_fNewPointStartX_get(swigCPtr);
      return retVal;
    }

  }

  public float m_fNewPointStartY {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_fNewPointStartY_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CPathfindInformation_m_fNewPointStartY_get(swigCPtr);
      return retVal;
    }

  }

  public float m_fNewPointStartZ {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_fNewPointStartZ_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CPathfindInformation_m_fNewPointStartZ_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_oidNewPointStartArea {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_oidNewPointStartArea_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CPathfindInformation_m_oidNewPointStartArea_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bReversePoints {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_bReversePoints_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CPathfindInformation_m_bReversePoints_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bFullComplete {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_bFullComplete_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CPathfindInformation_m_bFullComplete_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nWayPoints {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_nWayPoints_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CPathfindInformation_m_nWayPoints_get(swigCPtr);
      return retVal;
    }

  }

  public float* m_pfWayPoints {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_pfWayPoints_set(swigCPtr, value);
    } 
    get {
      float* retVal = NWNXLibPINVOKE.CPathfindInformation_m_pfWayPoints_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nUnsmoothedWayPoints {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_nUnsmoothedWayPoints_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CPathfindInformation_m_nUnsmoothedWayPoints_get(swigCPtr);
      return retVal;
    }

  }

  public float* m_pfUnsmoothedWayPoints {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_pfUnsmoothedWayPoints_set(swigCPtr, value);
    } 
    get {
      float* retVal = NWNXLibPINVOKE.CPathfindInformation_m_pfUnsmoothedWayPoints_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nLocationOnList {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_nLocationOnList_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CPathfindInformation_m_nLocationOnList_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bInterAreaPathResolved {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_bInterAreaPathResolved_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CPathfindInformation_m_bInterAreaPathResolved_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bInterAreaPathInProgress {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_bInterAreaPathInProgress_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CPathfindInformation_m_bInterAreaPathInProgress_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nInterAreas {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_nInterAreas_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CPathfindInformation_m_nInterAreas_get(swigCPtr);
      return retVal;
    }

  }

  public uint* m_poidInterAreas {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_poidInterAreas_set(swigCPtr, value);
    } 
    get {
      uint* retVal = NWNXLibPINVOKE.CPathfindInformation_m_poidInterAreas_get(swigCPtr);
      return retVal;
    }

  }

  public uint* m_poidInterAreaExits {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_poidInterAreaExits_set(swigCPtr, value);
    } 
    get {
      uint* retVal = NWNXLibPINVOKE.CPathfindInformation_m_poidInterAreaExits_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nInterAreaDeniedTriggers {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_nInterAreaDeniedTriggers_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CPathfindInformation_m_nInterAreaDeniedTriggers_get(swigCPtr);
      return retVal;
    }

  }

  public uint* m_poidInterAreaDeniedTriggerIds {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_poidInterAreaDeniedTriggerIds_set(swigCPtr, value);
    } 
    get {
      uint* retVal = NWNXLibPINVOKE.CPathfindInformation_m_poidInterAreaDeniedTriggerIds_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_oidDeniedDoor {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_oidDeniedDoor_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CPathfindInformation_m_oidDeniedDoor_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nInterTileDeniedExits {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_nInterTileDeniedExits_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CPathfindInformation_m_nInterTileDeniedExits_get(swigCPtr);
      return retVal;
    }

  }

  public int* m_pnInterTileDeniedExitTiles {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_pnInterTileDeniedExitTiles_set(swigCPtr, value);
    } 
    get {
      int* retVal = NWNXLibPINVOKE.CPathfindInformation_m_pnInterTileDeniedExitTiles_get(swigCPtr);
      return retVal;
    }

  }

  public int* m_pnInterTileDeniedExitLocations {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_pnInterTileDeniedExitLocations_set(swigCPtr, value);
    } 
    get {
      int* retVal = NWNXLibPINVOKE.CPathfindInformation_m_pnInterTileDeniedExitLocations_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nTilesToBeExplored {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_nTilesToBeExplored_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CPathfindInformation_m_nTilesToBeExplored_get(swigCPtr);
      return retVal;
    }

  }

  public int* m_pnTilesToBeExplored {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_pnTilesToBeExplored_set(swigCPtr, value);
    } 
    get {
      int* retVal = NWNXLibPINVOKE.CPathfindInformation_m_pnTilesToBeExplored_get(swigCPtr);
      return retVal;
    }

  }

  public float* m_pfTileExitsToBeExplored {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_pfTileExitsToBeExplored_set(swigCPtr, value);
    } 
    get {
      float* retVal = NWNXLibPINVOKE.CPathfindInformation_m_pfTileExitsToBeExplored_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bFirstTileSearching {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_bFirstTileSearching_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CPathfindInformation_m_bFirstTileSearching_get(swigCPtr);
      return retVal;
    }

  }

  public float m_fFirstTileFValue {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_fFirstTileFValue_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CPathfindInformation_m_fFirstTileFValue_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bFirstTileFValueInProgress {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_bFirstTileFValueInProgress_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CPathfindInformation_m_bFirstTileFValueInProgress_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nFirstTileFValueAlternativeSize {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_nFirstTileFValueAlternativeSize_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CPathfindInformation_m_nFirstTileFValueAlternativeSize_get(swigCPtr);
      return retVal;
    }

  }

  public int* m_pnFirstTileFValueCurrentAlternatives {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_pnFirstTileFValueCurrentAlternatives_set(swigCPtr, value);
    } 
    get {
      int* retVal = NWNXLibPINVOKE.CPathfindInformation_m_pnFirstTileFValueCurrentAlternatives_get(swigCPtr);
      return retVal;
    }

  }

  public int* m_pnFirstTileFValueTotalAlternatives {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_pnFirstTileFValueTotalAlternatives_set(swigCPtr, value);
    } 
    get {
      int* retVal = NWNXLibPINVOKE.CPathfindInformation_m_pnFirstTileFValueTotalAlternatives_get(swigCPtr);
      return retVal;
    }

  }

  public void** m_pcFirstTileFValueComputedAlternatives {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_pcFirstTileFValueComputedAlternatives_set(swigCPtr, (global::System.IntPtr)value);
    } 
    get {
        global::System.IntPtr retVal = NWNXLibPINVOKE.CPathfindInformation_m_pcFirstTileFValueComputedAlternatives_get(swigCPtr);
        return (void**)retVal;
    }

  }

  public CNWTileSurfaceMeshHashTableEntry m_pcFirstTileHashTable {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_pcFirstTileHashTable_set(swigCPtr, CNWTileSurfaceMeshHashTableEntry.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CPathfindInformation_m_pcFirstTileHashTable_get(swigCPtr);
      CNWTileSurfaceMeshHashTableEntry ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWTileSurfaceMeshHashTableEntry(cPtr, false);
      return ret;
    } 
  }

  public int m_bWalkedPathCut {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_bWalkedPathCut_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CPathfindInformation_m_bWalkedPathCut_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bWalkedPathCutArea {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_bWalkedPathCutArea_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CPathfindInformation_m_bWalkedPathCutArea_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nWalkedPathCutVerify {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_nWalkedPathCutVerify_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CPathfindInformation_m_nWalkedPathCutVerify_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nWalkedPathCutPoints {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_nWalkedPathCutPoints_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CPathfindInformation_m_nWalkedPathCutPoints_get(swigCPtr);
      return retVal;
    }

  }

  public Vector m_vWalkedPathCutNewLastPoint {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_vWalkedPathCutNewLastPoint_set(swigCPtr, Vector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CPathfindInformation_m_vWalkedPathCutNewLastPoint_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, false);
      return ret;
    } 
  }

  public Vector m_vWalkedPathCutNewLastOrientation {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_vWalkedPathCutNewLastOrientation_set(swigCPtr, Vector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CPathfindInformation_m_vWalkedPathCutNewLastOrientation_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, false);
      return ret;
    } 
  }

  public int m_nGridSearchTargetStepDistance {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_nGridSearchTargetStepDistance_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CPathfindInformation_m_nGridSearchTargetStepDistance_get(swigCPtr);
      return retVal;
    }

  }

  public Vector2 m_vGridSearchZeroLocation {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_vGridSearchZeroLocation_set(swigCPtr, Vector2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CPathfindInformation_m_vGridSearchZeroLocation_get(swigCPtr);
      Vector2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector2(cPtr, false);
      return ret;
    } 
  }

  public Vector2 m_vGridSearchStepX {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_vGridSearchStepX_set(swigCPtr, Vector2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CPathfindInformation_m_vGridSearchStepX_get(swigCPtr);
      Vector2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector2(cPtr, false);
      return ret;
    } 
  }

  public Vector2 m_vGridSearchStepY {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_vGridSearchStepY_set(swigCPtr, Vector2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CPathfindInformation_m_vGridSearchStepY_get(swigCPtr);
      Vector2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector2(cPtr, false);
      return ret;
    } 
  }

  public int* m_pnGridStepsArray {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_pnGridStepsArray_set(swigCPtr, value);
    } 
    get {
      int* retVal = NWNXLibPINVOKE.CPathfindInformation_m_pnGridStepsArray_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nGridStepsTaken {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_nGridStepsTaken_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CPathfindInformation_m_nGridStepsTaken_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nGridSearchLimit {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_nGridSearchLimit_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CPathfindInformation_m_nGridSearchLimit_get(swigCPtr);
      return retVal;
    }

  }

  public Vector2 m_vGridSearchStartPoint {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_vGridSearchStartPoint_set(swigCPtr, Vector2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CPathfindInformation_m_vGridSearchStartPoint_get(swigCPtr);
      Vector2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector2(cPtr, false);
      return ret;
    } 
  }

  public int m_nPathToClosestPointSize {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_nPathToClosestPointSize_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CPathfindInformation_m_nPathToClosestPointSize_get(swigCPtr);
      return retVal;
    }

  }

  public int* m_pnPathToClosestPointArray {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_pnPathToClosestPointArray_set(swigCPtr, value);
    } 
    get {
      int* retVal = NWNXLibPINVOKE.CPathfindInformation_m_pnPathToClosestPointArray_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nPathToClosestPointDistance {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_nPathToClosestPointDistance_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CPathfindInformation_m_nPathToClosestPointDistance_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bUsePlotGridPath {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_bUsePlotGridPath_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CPathfindInformation_m_bUsePlotGridPath_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bWalkStraightLineOnly {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_bWalkStraightLineOnly_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CPathfindInformation_m_bWalkStraightLineOnly_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nPlotPathInAreaResult {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_nPlotPathInAreaResult_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CPathfindInformation_m_nPlotPathInAreaResult_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nTileSearchedCount {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_nTileSearchedCount_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CPathfindInformation_m_nTileSearchedCount_get(swigCPtr);
      return retVal;
    }

  }

  public byte* m_bGridPointsSearchedArray {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_bGridPointsSearchedArray_set(swigCPtr, value);
    } 
    get {
      byte* retVal = NWNXLibPINVOKE.CPathfindInformation_m_bGridPointsSearchedArray_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nGridPointsSearchedOffsetX {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_nGridPointsSearchedOffsetX_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CPathfindInformation_m_nGridPointsSearchedOffsetX_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nGridPointsSearchedOffsetY {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_nGridPointsSearchedOffsetY_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CPathfindInformation_m_nGridPointsSearchedOffsetY_get(swigCPtr);
      return retVal;
    }

  }

  public ulong m_nGridSearchTimerStart {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_nGridSearchTimerStart_set(swigCPtr, value);
    } 
    get {
      ulong retVal = NWNXLibPINVOKE.CPathfindInformation_m_nGridSearchTimerStart_get(swigCPtr);
      return retVal;
    }

  }

  public ulong m_nGridSearchTimeSlice {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_nGridSearchTimeSlice_set(swigCPtr, value);
    } 
    get {
      ulong retVal = NWNXLibPINVOKE.CPathfindInformation_m_nGridSearchTimeSlice_get(swigCPtr);
      return retVal;
    }

  }

  public int** m_pnGridSearchPathStepsArray {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_pnGridSearchPathStepsArray_set(swigCPtr, (global::System.IntPtr)value);
    } 
    get {
        global::System.IntPtr retVal = NWNXLibPINVOKE.CPathfindInformation_m_pnGridSearchPathStepsArray_get(swigCPtr);
        return (int**)retVal;
    }

  }

  public int m_nGridSearchActivePaths {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_nGridSearchActivePaths_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CPathfindInformation_m_nGridSearchActivePaths_get(swigCPtr);
      return retVal;
    }

  }

  public CNWGridSearchPath m_nGridSearchPath {
    set {
      NWNXLibPINVOKE.CPathfindInformation_m_nGridSearchPath_set(swigCPtr, CNWGridSearchPath.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CPathfindInformation_m_nGridSearchPath_get(swigCPtr);
      CNWGridSearchPath ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWGridSearchPath(cPtr, false);
      return ret;
    } 
  }

  public CPathfindInformation() : this(NWNXLibPINVOKE.new_CPathfindInformation(), true) {
  }

  public void Initialize() {
    NWNXLibPINVOKE.CPathfindInformation_Initialize(swigCPtr);
  }

  public void Shutdown() {
    NWNXLibPINVOKE.CPathfindInformation_Shutdown(swigCPtr);
  }

  public void ResetAtEndOfPath() {
    NWNXLibPINVOKE.CPathfindInformation_ResetAtEndOfPath(swigCPtr);
  }

  public void ResetInterAreaSearchData() {
    NWNXLibPINVOKE.CPathfindInformation_ResetInterAreaSearchData(swigCPtr);
  }

  public void ResetInterAreaPathSearchData() {
    NWNXLibPINVOKE.CPathfindInformation_ResetInterAreaPathSearchData(swigCPtr);
  }

  public void ResetGridSearchData() {
    NWNXLibPINVOKE.CPathfindInformation_ResetGridSearchData(swigCPtr);
  }

  public void ResetWayPointData() {
    NWNXLibPINVOKE.CPathfindInformation_ResetWayPointData(swigCPtr);
  }

  public void ResetInterTileSearchData() {
    NWNXLibPINVOKE.CPathfindInformation_ResetInterTileSearchData(swigCPtr);
  }

  public void ResetIntraTileSearchData() {
    NWNXLibPINVOKE.CPathfindInformation_ResetIntraTileSearchData(swigCPtr);
  }

  public void FlipStartEndPoints() {
    NWNXLibPINVOKE.CPathfindInformation_FlipStartEndPoints(swigCPtr);
  }

  public void FlipTempEndPoints() {
    NWNXLibPINVOKE.CPathfindInformation_FlipTempEndPoints(swigCPtr);
  }

  public void GetFirstTileFValueAlternatives(int level, int* nCurrentAlternative, int* nAlternatives, void** pSuccessors) {
    NWNXLibPINVOKE.CPathfindInformation_GetFirstTileFValueAlternatives(swigCPtr, level, nCurrentAlternative, nAlternatives, (global::System.IntPtr)pSuccessors);
  }

  public void SetFirstTileFValueAlternatives(int level, int nCurrentAlternative, int nAlternatives, CPathfindInfoIntraTileSuccessors pSuccessors) {
    NWNXLibPINVOKE.CPathfindInformation_SetFirstTileFValueAlternatives(swigCPtr, level, nCurrentAlternative, nAlternatives, CPathfindInfoIntraTileSuccessors.getCPtr(pSuccessors));
  }

  public void CreateFirstTileFValueAlternatives(int nSize) {
    NWNXLibPINVOKE.CPathfindInformation_CreateFirstTileFValueAlternatives(swigCPtr, nSize);
  }

  public void DeleteFirstTileFValueAlternatives() {
    NWNXLibPINVOKE.CPathfindInformation_DeleteFirstTileFValueAlternatives(swigCPtr);
  }

  public float GetGridStepSize() {
    float retVal = NWNXLibPINVOKE.CPathfindInformation_GetGridStepSize(swigCPtr);
    return retVal;
  }

  public bool GetGridPointSearched(int nX, int nY) {
    bool ret = NWNXLibPINVOKE.CPathfindInformation_GetGridPointSearched(swigCPtr, nX, nY);
    return ret;
  }

  public void SetGridPointSearched(int nX, int nY, bool bSet) {
    NWNXLibPINVOKE.CPathfindInformation_SetGridPointSearched(swigCPtr, nX, nY, bSet);
  }

  public int CreateGridSearchPath() {
    int retVal = NWNXLibPINVOKE.CPathfindInformation_CreateGridSearchPath(swigCPtr);
    return retVal;
  }

  public void AddToGridSearchPath(int nID, int nX, int nY, int nStepSize) {
    NWNXLibPINVOKE.CPathfindInformation_AddToGridSearchPath(swigCPtr, nID, nX, nY, nStepSize);
  }

  public CNWGridSearchPath GetGridSearchPathInfo(int nID) {
    CNWGridSearchPath ret = new CNWGridSearchPath(NWNXLibPINVOKE.CPathfindInformation_GetGridSearchPathInfo(swigCPtr, nID), true);
    return ret;
  }

  public void SetGridSearchPathInfo(int nID, CNWGridSearchPath nGridSearch) {
    NWNXLibPINVOKE.CPathfindInformation_SetGridSearchPathInfo(swigCPtr, nID, CNWGridSearchPath.getCPtr(nGridSearch));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetGridSearchActivePaths() {
    int retVal = NWNXLibPINVOKE.CPathfindInformation_GetGridSearchActivePaths(swigCPtr);
    return retVal;
  }

  public void ComputeGridStepTolerance() {
    NWNXLibPINVOKE.CPathfindInformation_ComputeGridStepTolerance(swigCPtr);
  }

  public void _Destructor() {
    NWNXLibPINVOKE.CPathfindInformation__Destructor(swigCPtr);
  }

}

}

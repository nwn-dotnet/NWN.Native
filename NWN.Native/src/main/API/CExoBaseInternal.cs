//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public unsafe class CExoBaseInternal : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CExoBaseInternal(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CExoBaseInternal obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CExoBaseInternal() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NWNXLibPINVOKE.delete_CExoBaseInternal(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public global::System.IntPtr Pointer {
    get {
      return swigCPtr.Handle;
    }
  }

  public static unsafe implicit operator void*(CExoBaseInternal self) {
    return (void*)self.swigCPtr.Handle;
  }

  public static unsafe CExoBaseInternal FromPointer(void* pointer, bool memoryOwn = false) {
    return pointer != null ? new CExoBaseInternal((global::System.IntPtr)pointer, memoryOwn) : null;
  }

  public static CExoBaseInternal FromPointer(global::System.IntPtr pointer, bool memoryOwn = false) {
    return pointer != global::System.IntPtr.Zero ? new CExoBaseInternal(pointer, memoryOwn) : null;
  }

  public bool Equals(CExoBaseInternal other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }

    if (ReferenceEquals(this, other)) {
      return true;
    }

    return Pointer.Equals(other.Pointer);
  }

  public override bool Equals(object obj) {
    return ReferenceEquals(this, obj) || obj is CExoBaseInternal other && Equals(other);
  }

  public override int GetHashCode() {
    return swigCPtr.Handle.GetHashCode();
  }

  public static bool operator ==(CExoBaseInternal left, CExoBaseInternal right) {
    return Equals(left, right);
  }

  public static bool operator !=(CExoBaseInternal left, CExoBaseInternal right) {
    return !Equals(left, right);
  }

  public int m_nResTypes {
    set {
      NWNXLibPINVOKE.CExoBaseInternal_m_nResTypes_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CExoBaseInternal_m_nResTypes_get(swigCPtr);
      return retVal;
    }

  }

  public ushort* m_pnResTypes {
    set {
      NWNXLibPINVOKE.CExoBaseInternal_m_pnResTypes_set(swigCPtr, (global::System.IntPtr)value);
    } 
    get {
        global::System.IntPtr retVal = NWNXLibPINVOKE.CExoBaseInternal_m_pnResTypes_get(swigCPtr);
        return (ushort*)retVal;
    }

  }

  public CExoString m_psResTypeNames {
    set {
      NWNXLibPINVOKE.CExoBaseInternal_m_psResTypeNames_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CExoBaseInternal_m_psResTypeNames_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public CExoString m_sInstallDirectory {
    set {
      NWNXLibPINVOKE.CExoBaseInternal_m_sInstallDirectory_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CExoBaseInternal_m_sInstallDirectory_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public CExoBaseInternal() : this(NWNXLibPINVOKE.new_CExoBaseInternal(), true) {
  }

  public void AddAlias(int idxIniFile, CExoString sAlias, CExoString sDefault) {
    NWNXLibPINVOKE.CExoBaseInternal_AddAlias(swigCPtr, idxIniFile, CExoString.getCPtr(sAlias), CExoString.getCPtr(sDefault));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetDirectoryList(CExoArrayListCExoString lstFilename, CExoString sPath, ushort nResType, int bGetDirectories, int bSort) {
    int retVal = NWNXLibPINVOKE.CExoBaseInternal_GetDirectoryList__SWIG_0(swigCPtr, CExoArrayListCExoString.getCPtr(lstFilename), CExoString.getCPtr(sPath), nResType, bGetDirectories, bSort);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int GetDirectoryList(CExoArrayListCExoString lstFilename, CExoString sPath, ushort nResType, int bGetDirectories) {
    int retVal = NWNXLibPINVOKE.CExoBaseInternal_GetDirectoryList__SWIG_1(swigCPtr, CExoArrayListCExoString.getCPtr(lstFilename), CExoString.getCPtr(sPath), nResType, bGetDirectories);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int GetDirectoryList(CExoArrayListCExoString lstFilename, CExoString sPath, ushort nResType) {
    int retVal = NWNXLibPINVOKE.CExoBaseInternal_GetDirectoryList__SWIG_2(swigCPtr, CExoArrayListCExoString.getCPtr(lstFilename), CExoString.getCPtr(sPath), nResType);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int GetAugmentedDirectoryList(CExoArrayListCFileInfo lstFileInfo, CExoString sAlias, ushort nResType, int bSort) {
    int retVal = NWNXLibPINVOKE.CExoBaseInternal_GetAugmentedDirectoryList__SWIG_0(swigCPtr, CExoArrayListCFileInfo.getCPtr(lstFileInfo), CExoString.getCPtr(sAlias), nResType, bSort);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int GetAugmentedDirectoryList(CExoArrayListCFileInfo lstFileInfo, CExoString sAlias, ushort nResType) {
    int retVal = NWNXLibPINVOKE.CExoBaseInternal_GetAugmentedDirectoryList__SWIG_1(swigCPtr, CExoArrayListCFileInfo.getCPtr(lstFileInfo), CExoString.getCPtr(sAlias), nResType);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public void CreateResourceExtensionTable() {
    NWNXLibPINVOKE.CExoBaseInternal_CreateResourceExtensionTable(swigCPtr);
  }

  public CExoString GetResourceExtension(ushort nType) {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CExoBaseInternal_GetResourceExtension(swigCPtr, nType), false);
    return ret;
  }

  public ushort GetResTypeFromExtension(CExoString sExtension) {
    ushort retVal = NWNXLibPINVOKE.CExoBaseInternal_GetResTypeFromExtension(swigCPtr, CExoString.getCPtr(sExtension));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public void LoadAliases(int idxIniFile) {
    NWNXLibPINVOKE.CExoBaseInternal_LoadAliases(swigCPtr, idxIniFile);
  }

  public void ShutDown() {
    NWNXLibPINVOKE.CExoBaseInternal_ShutDown(swigCPtr);
  }

  public int CheckForCD(uint nLanguage) {
    int retVal = NWNXLibPINVOKE.CExoBaseInternal_CheckForCD(swigCPtr, nLanguage);
    return retVal;
  }

  public void _Destructor() {
    NWNXLibPINVOKE.CExoBaseInternal__Destructor(swigCPtr);
  }

}

}

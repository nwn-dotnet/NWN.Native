//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public unsafe class CServerExoAppInternal : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CServerExoAppInternal(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CServerExoAppInternal obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CServerExoAppInternal() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NWNXLibPINVOKE.delete_CServerExoAppInternal(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public global::System.IntPtr Pointer {
    get {
      return swigCPtr.Handle;
    }
  }

  public static unsafe implicit operator void*(CServerExoAppInternal self) {
    return (void*)self.swigCPtr.Handle;
  }

  public static unsafe CServerExoAppInternal FromPointer(void* pointer, bool memoryOwn = false) {
    return pointer != null ? new CServerExoAppInternal((global::System.IntPtr)pointer, memoryOwn) : null;
  }

  public static CServerExoAppInternal FromPointer(global::System.IntPtr pointer, bool memoryOwn = false) {
    return pointer != global::System.IntPtr.Zero ? new CServerExoAppInternal(pointer, memoryOwn) : null;
  }

  public bool Equals(CServerExoAppInternal other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }

    if (ReferenceEquals(this, other)) {
      return true;
    }

    return Pointer.Equals(other.Pointer);
  }

  public override bool Equals(object obj) {
    return ReferenceEquals(this, obj) || obj is CServerExoAppInternal other && Equals(other);
  }

  public override int GetHashCode() {
    return swigCPtr.Handle.GetHashCode();
  }

  public static bool operator ==(CServerExoAppInternal left, CServerExoAppInternal right) {
    return Equals(left, right);
  }

  public static bool operator !=(CServerExoAppInternal left, CServerExoAppInternal right) {
    return !Equals(left, right);
  }

  public NativeArray<byte> ScratchMessageBuffer {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_ScratchMessageBuffer_set(swigCPtr, value);
    } 
    get {
      global::System.IntPtr arrayPtr = NWNXLibPINVOKE.CServerExoAppInternal_ScratchMessageBuffer_get(swigCPtr);
      NativeArray<byte> retVal = new NativeArray<byte>(arrayPtr, 65536);

      return retVal; // byte[65536]
    }

  }

  public int m_bMultiplayerEnabled {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_bMultiplayerEnabled_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_bMultiplayerEnabled_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bGamePostedToInternet {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_bGamePostedToInternet_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_bGamePostedToInternet_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bCDResponseReceived {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_bCDResponseReceived_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_bCDResponseReceived_get(swigCPtr);
      return retVal;
    }

  }

  public CServerInfo m_pServerInfo {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_pServerInfo_set(swigCPtr, CServerInfo.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_m_pServerInfo_get(swigCPtr);
      CServerInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new CServerInfo(cPtr, false);
      return ret;
    } 
  }

  public short m_nServerMode {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_nServerMode_set(swigCPtr, value);
    } 
    get {
      short retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_nServerMode_get(swigCPtr);
      return retVal;
    }

  }

  public CNWSVirtualMachineCommands m_pVirtualMachineCommandImplementer {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_pVirtualMachineCommandImplementer_set(swigCPtr, CNWSVirtualMachineCommands.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_m_pVirtualMachineCommandImplementer_get(swigCPtr);
      CNWSVirtualMachineCommands ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSVirtualMachineCommands(cPtr, false);
      return ret;
    } 
  }

  public CNWSMessage m_pMessage {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_pMessage_set(swigCPtr, CNWSMessage.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_m_pMessage_get(swigCPtr);
      CNWSMessage ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSMessage(cPtr, false);
      return ret;
    } 
  }

  public int m_bForceUpdate {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_bForceUpdate_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_bForceUpdate_get(swigCPtr);
      return retVal;
    }

  }

  public uint* m_pPendingAuthorization {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_pPendingAuthorization_set(swigCPtr, value);
    } 
    get {
      uint* retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_pPendingAuthorization_get(swigCPtr);
      return retVal;
    }

  }

  public CExoArrayListUInt32 m_lstClientDisconnectPending {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_lstClientDisconnectPending_set(swigCPtr, CExoArrayListUInt32.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_m_lstClientDisconnectPending_get(swigCPtr);
      CExoArrayListUInt32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoArrayListUInt32(cPtr, false);
      return ret;
    } 
  }

  public ulong m_nShutdownTimer {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_nShutdownTimer_set(swigCPtr, value);
    } 
    get {
      ulong retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_nShutdownTimer_get(swigCPtr);
      return retVal;
    }

  }

  public ulong m_nShutdownTimeStamp {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_nShutdownTimeStamp_set(swigCPtr, value);
    } 
    get {
      ulong retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_nShutdownTimeStamp_get(swigCPtr);
      return retVal;
    }

  }

  public ulong m_nShutdownMaxTimeLocalLogins {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_nShutdownMaxTimeLocalLogins_set(swigCPtr, value);
    } 
    get {
      ulong retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_nShutdownMaxTimeLocalLogins_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bReloadModuleWhenEmpty {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_bReloadModuleWhenEmpty_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_bReloadModuleWhenEmpty_get(swigCPtr);
      return retVal;
    }

  }

  public CExoString m_sLastModuleLoadedFilename {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_sLastModuleLoadedFilename_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_m_sLastModuleLoadedFilename_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public int m_bLastModuleLoadedWasSaveGame {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_bLastModuleLoadedWasSaveGame_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_bLastModuleLoadedWasSaveGame_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bConnectionLoopFirstRun {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_bConnectionLoopFirstRun_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_bConnectionLoopFirstRun_get(swigCPtr);
      return retVal;
    }

  }

  public CNetLayer m_pNetLayer {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_pNetLayer_set(swigCPtr, CNetLayer.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_m_pNetLayer_get(swigCPtr);
      CNetLayer ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNetLayer(cPtr, false);
      return ret;
    } 
  }

  public CServerAIMaster m_pServerAIMaster {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_pServerAIMaster_set(swigCPtr, CServerAIMaster.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_m_pServerAIMaster_get(swigCPtr);
      CServerAIMaster ret = (cPtr == global::System.IntPtr.Zero) ? null : new CServerAIMaster(cPtr, false);
      return ret;
    } 
  }

  public CWorldTimer m_pWorldTimer {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_pWorldTimer_set(swigCPtr, CWorldTimer.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_m_pWorldTimer_get(swigCPtr);
      CWorldTimer ret = (cPtr == global::System.IntPtr.Zero) ? null : new CWorldTimer(cPtr, false);
      return ret;
    } 
  }

  public CWorldTimer m_pTimestopTimer {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_pTimestopTimer_set(swigCPtr, CWorldTimer.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_m_pTimestopTimer_get(swigCPtr);
      CWorldTimer ret = (cPtr == global::System.IntPtr.Zero) ? null : new CWorldTimer(cPtr, false);
      return ret;
    } 
  }

  public CWorldTimer m_pPauseTimer {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_pPauseTimer_set(swigCPtr, CWorldTimer.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_m_pPauseTimer_get(swigCPtr);
      CWorldTimer ret = (cPtr == global::System.IntPtr.Zero) ? null : new CWorldTimer(cPtr, false);
      return ret;
    } 
  }

  public CFactionManager m_pFactionManager {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_pFactionManager_set(swigCPtr, CFactionManager.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_m_pFactionManager_get(swigCPtr);
      CFactionManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new CFactionManager(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_CConnectionLib m_pConnectionLib {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_pConnectionLib_set(swigCPtr, SWIGTYPE_p_CConnectionLib.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_m_pConnectionLib_get(swigCPtr);
      SWIGTYPE_p_CConnectionLib ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_CConnectionLib(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_CCampaignDB m_pCampaignDB {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_pCampaignDB_set(swigCPtr, SWIGTYPE_p_CCampaignDB.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_m_pCampaignDB_get(swigCPtr);
      SWIGTYPE_p_CCampaignDB ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_CCampaignDB(cPtr, false);
      return ret;
    } 
  }

  public CGameObjectArray m_pGameObjArray {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_pGameObjArray_set(swigCPtr, CGameObjectArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_m_pGameObjArray_get(swigCPtr);
      CGameObjectArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new CGameObjectArray(cPtr, false);
      return ret;
    } 
  }

  public uint m_oidModule {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_oidModule_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_oidModule_get(swigCPtr);
      return retVal;
    }

  }

  public SWIGTYPE_p_CExoArrayListT_CNWSPlayer_p_t m_lstPlayerList {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_lstPlayerList_set(swigCPtr, SWIGTYPE_p_CExoArrayListT_CNWSPlayer_p_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_m_lstPlayerList_get(swigCPtr);
      SWIGTYPE_p_CExoArrayListT_CNWSPlayer_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_CExoArrayListT_CNWSPlayer_p_t(cPtr, false);
      return ret;
    } 
  }

  public CNWPlaceMeshManager m_pPlaceMeshManager {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_pPlaceMeshManager_set(swigCPtr, CNWPlaceMeshManager.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_m_pPlaceMeshManager_get(swigCPtr);
      CNWPlaceMeshManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWPlaceMeshManager(cPtr, false);
      return ret;
    } 
  }

  public int m_bDebugMode {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_bDebugMode_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_bDebugMode_get(swigCPtr);
      return retVal;
    }

  }

  public CExoArrayListUInt32 m_lstPauseExclusionList {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_lstPauseExclusionList_set(swigCPtr, CExoArrayListUInt32.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_m_lstPauseExclusionList_get(swigCPtr);
      CExoArrayListUInt32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoArrayListUInt32(cPtr, false);
      return ret;
    } 
  }

  public CExoArrayListUInt32 m_lstTimestopExclusionList {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_lstTimestopExclusionList_set(swigCPtr, CExoArrayListUInt32.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_m_lstTimestopExclusionList_get(swigCPtr);
      CExoArrayListUInt32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoArrayListUInt32(cPtr, false);
      return ret;
    } 
  }

  public byte m_nPauseState {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_nPauseState_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_nPauseState_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bDoingStartNewModule {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_bDoingStartNewModule_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_bDoingStartNewModule_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bMoveToModulePending {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_bMoveToModulePending_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_bMoveToModulePending_get(swigCPtr);
      return retVal;
    }

  }

  public CExoString m_sMoveToModuleString {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_sMoveToModuleString_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_m_sMoveToModuleString_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public int m_bEndGamePending {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_bEndGamePending_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_bEndGamePending_get(swigCPtr);
      return retVal;
    }

  }

  public CExoString m_sEndGameMovie {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_sEndGameMovie_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_m_sEndGameMovie_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public int m_bLoadingModule {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_bLoadingModule_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_bLoadingModule_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bImportingChar {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_bImportingChar_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_bImportingChar_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bAutoSavePending {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_bAutoSavePending_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_bAutoSavePending_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bDisableAutoSave {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_bDisableAutoSave_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_bDisableAutoSave_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bExportCharacterPending {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_bExportCharacterPending_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_bExportCharacterPending_get(swigCPtr);
      return retVal;
    }

  }

  public CExoArrayListUInt32 m_exportPlayerCharacterRequests {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_exportPlayerCharacterRequests_set(swigCPtr, CExoArrayListUInt32.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_m_exportPlayerCharacterRequests_get(swigCPtr);
      CExoArrayListUInt32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoArrayListUInt32(cPtr, false);
      return ret;
    } 
  }

  public int m_bNeedSinglePlayerCharacter {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_bNeedSinglePlayerCharacter_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_bNeedSinglePlayerCharacter_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nEstimatedSaveSize {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_nEstimatedSaveSize_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_nEstimatedSaveSize_get(swigCPtr);
      return retVal;
    }

  }

  public CExoArrayListUInt32 m_nCharListRequests {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_nCharListRequests_set(swigCPtr, CExoArrayListUInt32.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_m_nCharListRequests_get(swigCPtr);
      CExoArrayListUInt32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoArrayListUInt32(cPtr, false);
      return ret;
    } 
  }

  public CExoArrayListCExoString m_lstBannedListIP {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_lstBannedListIP_set(swigCPtr, CExoArrayListCExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_m_lstBannedListIP_get(swigCPtr);
      CExoArrayListCExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoArrayListCExoString(cPtr, false);
      return ret;
    } 
  }

  public CExoArrayListCExoString m_lstBannedListCDKey {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_lstBannedListCDKey_set(swigCPtr, CExoArrayListCExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_m_lstBannedListCDKey_get(swigCPtr);
      CExoArrayListCExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoArrayListCExoString(cPtr, false);
      return ret;
    } 
  }

  public CExoArrayListCExoString m_lstBannedListPlayerName {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_lstBannedListPlayerName_set(swigCPtr, CExoArrayListCExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_m_lstBannedListPlayerName_get(swigCPtr);
      CExoArrayListCExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoArrayListCExoString(cPtr, false);
      return ret;
    } 
  }

  public C2DA m_pOldServerVault2DA {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_pOldServerVault2DA_set(swigCPtr, C2DA.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_m_pOldServerVault2DA_get(swigCPtr);
      C2DA ret = (cPtr == global::System.IntPtr.Zero) ? null : new C2DA(cPtr, false);
      return ret;
    } 
  }

  public C2DA m_pKnownServerNames2DA {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_pKnownServerNames2DA_set(swigCPtr, C2DA.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_m_pKnownServerNames2DA_get(swigCPtr);
      C2DA ret = (cPtr == global::System.IntPtr.Zero) ? null : new C2DA(cPtr, false);
      return ret;
    } 
  }

  public uint m_nBannedListsTimeStamp {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_nBannedListsTimeStamp_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_nBannedListsTimeStamp_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nPosPCObject {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_nPosPCObject_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_nPosPCObject_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nGameObjectUpdateIntervalTarget {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_nGameObjectUpdateIntervalTarget_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_nGameObjectUpdateIntervalTarget_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nGameObjectUpdateIntervalTargetLoading {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_nGameObjectUpdateIntervalTargetLoading_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_nGameObjectUpdateIntervalTargetLoading_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nGameObjectUpdateMessageLimit {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_nGameObjectUpdateMessageLimit_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_nGameObjectUpdateMessageLimit_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nGameObjectUpdateMessageLimitLoading {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_nGameObjectUpdateMessageLimitLoading_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_nGameObjectUpdateMessageLimitLoading_get(swigCPtr);
      return retVal;
    }

  }

  public ulong m_nLastGameObjectUpdateDuration {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_nLastGameObjectUpdateDuration_set(swigCPtr, value);
    } 
    get {
      ulong retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_nLastGameObjectUpdateDuration_get(swigCPtr);
      return retVal;
    }

  }

  public ulong m_nAutoSaveTimer {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_nAutoSaveTimer_set(swigCPtr, value);
    } 
    get {
      ulong retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_nAutoSaveTimer_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bCreatureDeathLoggingEnabled {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_bCreatureDeathLoggingEnabled_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_bCreatureDeathLoggingEnabled_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nClientsRequiredToDisableCPUSleep {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_nClientsRequiredToDisableCPUSleep_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_nClientsRequiredToDisableCPUSleep_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bStickyCombatModesEnabled {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_bStickyCombatModesEnabled_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_bStickyCombatModesEnabled_get(swigCPtr);
      return retVal;
    }

  }

  public int m_AttackBonusLimit {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_AttackBonusLimit_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_AttackBonusLimit_get(swigCPtr);
      return retVal;
    }

  }

  public int m_DamageBonusLimit {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_DamageBonusLimit_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_DamageBonusLimit_get(swigCPtr);
      return retVal;
    }

  }

  public int m_SavingThrowBonusLimit {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_SavingThrowBonusLimit_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_SavingThrowBonusLimit_get(swigCPtr);
      return retVal;
    }

  }

  public int m_AbilityBonusLimit {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_AbilityBonusLimit_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_AbilityBonusLimit_get(swigCPtr);
      return retVal;
    }

  }

  public int m_AbilityPenaltyLimit {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_AbilityPenaltyLimit_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_AbilityPenaltyLimit_get(swigCPtr);
      return retVal;
    }

  }

  public int m_SkillBonusLimit {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_SkillBonusLimit_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_SkillBonusLimit_get(swigCPtr);
      return retVal;
    }

  }

  public int m_AttackBonusLimitModule {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_AttackBonusLimitModule_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_AttackBonusLimitModule_get(swigCPtr);
      return retVal;
    }

  }

  public int m_DamageBonusLimitModule {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_DamageBonusLimitModule_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_DamageBonusLimitModule_get(swigCPtr);
      return retVal;
    }

  }

  public int m_SavingThrowBonusLimitModule {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_SavingThrowBonusLimitModule_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_SavingThrowBonusLimitModule_get(swigCPtr);
      return retVal;
    }

  }

  public int m_AbilityBonusLimitModule {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_AbilityBonusLimitModule_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_AbilityBonusLimitModule_get(swigCPtr);
      return retVal;
    }

  }

  public int m_AbilityPenaltyLimitModule {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_AbilityPenaltyLimitModule_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_AbilityPenaltyLimitModule_get(swigCPtr);
      return retVal;
    }

  }

  public int m_SkillBonusLimitModule {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_SkillBonusLimitModule_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CServerExoAppInternal_m_SkillBonusLimitModule_get(swigCPtr);
      return retVal;
    }

  }

  public Advertisement m_nwsyncModuleSourceAdvert {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_nwsyncModuleSourceAdvert_set(swigCPtr, Advertisement.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_m_nwsyncModuleSourceAdvert_get(swigCPtr);
      Advertisement ret = (cPtr == global::System.IntPtr.Zero) ? null : new Advertisement(cPtr, false);
      return ret;
    } 
  }

  public AdvertLUT m_nwsyncAdvertLUT {
    set {
      NWNXLibPINVOKE.CServerExoAppInternal_m_nwsyncAdvertLUT_set(swigCPtr, AdvertLUT.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_m_nwsyncAdvertLUT_get(swigCPtr);
      AdvertLUT ret = (cPtr == global::System.IntPtr.Zero) ? null : new AdvertLUT(cPtr, false);
      return ret;
    } 
  }

  public CServerExoAppInternal() : this(NWNXLibPINVOKE.new_CServerExoAppInternal(), true) {
  }

  public int Initialize() {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_Initialize(swigCPtr);
    return retVal;
  }

  public int MainLoop() {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_MainLoop(swigCPtr);
    return retVal;
  }

  public void StartServices() {
    NWNXLibPINVOKE.CServerExoAppInternal_StartServices(swigCPtr);
  }

  public void StopServices() {
    NWNXLibPINVOKE.CServerExoAppInternal_StopServices(swigCPtr);
  }

  public void ShutdownNetLayer() {
    NWNXLibPINVOKE.CServerExoAppInternal_ShutdownNetLayer(swigCPtr);
  }

  public void RestartNetLayer() {
    NWNXLibPINVOKE.CServerExoAppInternal_RestartNetLayer(swigCPtr);
  }

  public void Uninitialize() {
    NWNXLibPINVOKE.CServerExoAppInternal_Uninitialize(swigCPtr);
  }

  public int AdmitNetworkAddress(CExoString sAddress) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_AdmitNetworkAddress(swigCPtr, CExoString.getCPtr(sAddress));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AdmitPlayerName(CExoString sPlayerName) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_AdmitPlayerName(swigCPtr, CExoString.getCPtr(sPlayerName));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public void HandleMessage(uint nPlayerId, byte* pData, uint dwSize) {
    NWNXLibPINVOKE.CServerExoAppInternal_HandleMessage(swigCPtr, nPlayerId, pData, dwSize);
  }

  public int SetNetworkAddressBan(CExoString sAddress, int bBanAddress) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_SetNetworkAddressBan(swigCPtr, CExoString.getCPtr(sAddress), bBanAddress);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public void PlayerListChange(uint nPlayerId, int bEnter, int bPrimaryPlayer) {
    NWNXLibPINVOKE.CServerExoAppInternal_PlayerListChange(swigCPtr, nPlayerId, bEnter, bPrimaryPlayer);
  }

  public int ContinueMessageProcessing() {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_ContinueMessageProcessing(swigCPtr);
    return retVal;
  }

  public void RemovePCFromWorld(CNWSPlayer pPlayer) {
    NWNXLibPINVOKE.CServerExoAppInternal_RemovePCFromWorld(swigCPtr, CNWSPlayer.getCPtr(pPlayer));
  }

  public void Shutdown(int bWarnLocals, int bFromMessage) {
    NWNXLibPINVOKE.CServerExoAppInternal_Shutdown__SWIG_0(swigCPtr, bWarnLocals, bFromMessage);
  }

  public void Shutdown(int bWarnLocals) {
    NWNXLibPINVOKE.CServerExoAppInternal_Shutdown__SWIG_1(swigCPtr, bWarnLocals);
  }

  public int ValidatePlayerLogin(void* pPlayer) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_ValidatePlayerLogin(swigCPtr, (global::System.IntPtr)pPlayer);
    return retVal;
  }

  public void OnCDChange() {
    NWNXLibPINVOKE.CServerExoAppInternal_OnCDChange(swigCPtr);
  }

  public void OnExit() {
    NWNXLibPINVOKE.CServerExoAppInternal_OnExit(swigCPtr);
  }

  public void OnGainFocus() {
    NWNXLibPINVOKE.CServerExoAppInternal_OnGainFocus(swigCPtr);
  }

  public void OnLostFocus() {
    NWNXLibPINVOKE.CServerExoAppInternal_OnLostFocus(swigCPtr);
  }

  public void OnVideoChange() {
    NWNXLibPINVOKE.CServerExoAppInternal_OnVideoChange(swigCPtr);
  }

  public CWorldTimer GetActiveTimer(uint oid) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_GetActiveTimer__SWIG_0(swigCPtr, oid);
    CWorldTimer ret = (cPtr == global::System.IntPtr.Zero) ? null : new CWorldTimer(cPtr, false);
    return ret;
  }

  public CWorldTimer GetActiveTimer() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_GetActiveTimer__SWIG_1(swigCPtr);
    CWorldTimer ret = (cPtr == global::System.IntPtr.Zero) ? null : new CWorldTimer(cPtr, false);
    return ret;
  }

  public CNWSPlayer GetClientObjectByObjectId(uint nObjectId) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_GetClientObjectByObjectId(swigCPtr, nObjectId);
    CNWSPlayer ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSPlayer(cPtr, false);
    return ret;
  }

  public CNWSPlayer GetClientObjectByPlayerId(uint nPlayerId) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_GetClientObjectByPlayerId(swigCPtr, nPlayerId);
    CNWSPlayer ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSPlayer(cPtr, false);
    return ret;
  }

  public int CopyModuleToCurrentGame(CExoString sOldFilename, CExoString sNewFilename, ushort nResType) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_CopyModuleToCurrentGame(swigCPtr, CExoString.getCPtr(sOldFilename), CExoString.getCPtr(sNewFilename), nResType);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int LoadGame(uint nSlot, CExoString sSaveName, CExoString sModuleName, CNWSPlayer pPlayer) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_LoadGame__SWIG_0(swigCPtr, nSlot, CExoString.getCPtr(sSaveName), CExoString.getCPtr(sModuleName), CNWSPlayer.getCPtr(pPlayer));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int LoadGame(uint nSlot, CExoString sSaveName, CExoString sModuleName) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_LoadGame__SWIG_1(swigCPtr, nSlot, CExoString.getCPtr(sSaveName), CExoString.getCPtr(sModuleName));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public void SetEstimatedSaveSize(CExoString sFile, ushort nResType) {
    NWNXLibPINVOKE.CServerExoAppInternal_SetEstimatedSaveSize(swigCPtr, CExoString.getCPtr(sFile), nResType);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int StartNewModule(CExoString sModuleName) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_StartNewModule(swigCPtr, CExoString.getCPtr(sModuleName));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int EndGame(CExoString sMovieName) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_EndGame(swigCPtr, CExoString.getCPtr(sMovieName));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public uint ValidateCreateServerCharacter(CNWSPlayer pPlayer, void* pCharData, uint nSize) {
    uint retVal = NWNXLibPINVOKE.CServerExoAppInternal_ValidateCreateServerCharacter(swigCPtr, CNWSPlayer.getCPtr(pPlayer), (global::System.IntPtr)pCharData, nSize);
    return retVal;
  }

  public int LoadCharacterStart(byte nType, CNWSPlayer pPlayer, CResRef cResRef, void* pCharData, uint nSize) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_LoadCharacterStart__SWIG_0(swigCPtr, nType, CNWSPlayer.getCPtr(pPlayer), CResRef.getCPtr(cResRef), (global::System.IntPtr)pCharData, nSize);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int LoadCharacterStart(byte nType, CNWSPlayer pPlayer, CResRef cResRef, void* pCharData) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_LoadCharacterStart__SWIG_1(swigCPtr, nType, CNWSPlayer.getCPtr(pPlayer), CResRef.getCPtr(cResRef), (global::System.IntPtr)pCharData);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int LoadCharacterStart(byte nType, CNWSPlayer pPlayer, CResRef cResRef) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_LoadCharacterStart__SWIG_2(swigCPtr, nType, CNWSPlayer.getCPtr(pPlayer), CResRef.getCPtr(cResRef));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int LoadCharacterFinish(CNWSPlayer pPlayer, int bUseSaveGameCharacter, int bUseStateDataInSaveGame) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_LoadCharacterFinish__SWIG_0(swigCPtr, CNWSPlayer.getCPtr(pPlayer), bUseSaveGameCharacter, bUseStateDataInSaveGame);
    return retVal;
  }

  public int LoadCharacterFinish(CNWSPlayer pPlayer, int bUseSaveGameCharacter) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_LoadCharacterFinish__SWIG_1(swigCPtr, CNWSPlayer.getCPtr(pPlayer), bUseSaveGameCharacter);
    return retVal;
  }

  public int LoadCharacterFinish(CNWSPlayer pPlayer) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_LoadCharacterFinish__SWIG_2(swigCPtr, CNWSPlayer.getCPtr(pPlayer));
    return retVal;
  }

  public int LoadPrimaryPlayer(CNWSPlayer pPlayer) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_LoadPrimaryPlayer(swigCPtr, CNWSPlayer.getCPtr(pPlayer));
    return retVal;
  }

  public int ExportAllPlayers() {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_ExportAllPlayers(swigCPtr);
    return retVal;
  }

  public int ExportPlayer(CNWSPlayer pPlayer) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_ExportPlayer(swigCPtr, CNWSPlayer.getCPtr(pPlayer));
    return retVal;
  }

  public void DealWithLoadGameError(uint nLoadErr) {
    NWNXLibPINVOKE.CServerExoAppInternal_DealWithLoadGameError(swigCPtr, nLoadErr);
  }

  public CNWSModule GetModule() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_GetModule(swigCPtr);
    CNWSModule ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSModule(cPtr, false);
    return ret;
  }

  public CExoString GetModuleName() {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CServerExoAppInternal_GetModuleName(swigCPtr), true);
    return ret;
  }

  public ICGameObject GetGameObject(uint nObjectID) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_GetGameObject(swigCPtr, nObjectID);
    CGameObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new CGameObject(cPtr, false);
    return (ICGameObject)ret;
  }

  public CNWSStore GetStoreByGameObjectID(uint nObjectID) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_GetStoreByGameObjectID(swigCPtr, nObjectID);
    CNWSStore ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSStore(cPtr, false);
    return ret;
  }

  public CNWSItem GetItemByGameObjectID(uint nObjectID) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_GetItemByGameObjectID(swigCPtr, nObjectID);
    CNWSItem ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSItem(cPtr, false);
    return ret;
  }

  public CNWSCreature GetCreatureByGameObjectID(uint nObjectID) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_GetCreatureByGameObjectID(swigCPtr, nObjectID);
    CNWSCreature ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSCreature(cPtr, false);
    return ret;
  }

  public CNWSModule GetModuleByGameObjectID(uint nObjectID) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_GetModuleByGameObjectID(swigCPtr, nObjectID);
    CNWSModule ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSModule(cPtr, false);
    return ret;
  }

  public CNWSArea GetAreaByGameObjectID(uint nObjectID) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_GetAreaByGameObjectID(swigCPtr, nObjectID);
    CNWSArea ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSArea(cPtr, false);
    return ret;
  }

  public CNWSTrigger GetTriggerByGameObjectID(uint nObjectID) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_GetTriggerByGameObjectID(swigCPtr, nObjectID);
    CNWSTrigger ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSTrigger(cPtr, false);
    return ret;
  }

  public CNWSPlaceable GetPlaceableByGameObjectID(uint nObjectID) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_GetPlaceableByGameObjectID(swigCPtr, nObjectID);
    CNWSPlaceable ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSPlaceable(cPtr, false);
    return ret;
  }

  public CNWSDoor GetDoorByGameObjectID(uint nObjectID) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_GetDoorByGameObjectID(swigCPtr, nObjectID);
    CNWSDoor ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSDoor(cPtr, false);
    return ret;
  }

  public CNWSAreaOfEffectObject GetAreaOfEffectByGameObjectID(uint nObjectID) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_GetAreaOfEffectByGameObjectID(swigCPtr, nObjectID);
    CNWSAreaOfEffectObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSAreaOfEffectObject(cPtr, false);
    return ret;
  }

  public CNWSWaypoint GetWaypointByGameObjectID(uint nObjectID) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_GetWaypointByGameObjectID(swigCPtr, nObjectID);
    CNWSWaypoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSWaypoint(cPtr, false);
    return ret;
  }

  public CNWSEncounter GetEncounterByGameObjectID(uint nObjectID) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_GetEncounterByGameObjectID(swigCPtr, nObjectID);
    CNWSEncounter ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSEncounter(cPtr, false);
    return ret;
  }

  public CNWSSoundObject GetSoundObjectByGameObjectID(uint nObjectID) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_GetSoundObjectByGameObjectID(swigCPtr, nObjectID);
    CNWSSoundObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSSoundObject(cPtr, false);
    return ret;
  }

  public uint GetPlayerIDByGameObjectID(uint nObjectID) {
    uint retVal = NWNXLibPINVOKE.CServerExoAppInternal_GetPlayerIDByGameObjectID(swigCPtr, nObjectID);
    return retVal;
  }

  public int GetPlayerLanguage(uint nPlayerID) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_GetPlayerLanguage(swigCPtr, nPlayerID);
    return retVal;
  }

  public int GetModuleLanguage() {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_GetModuleLanguage(swigCPtr);
    return retVal;
  }

  public void GetExtendedServerInfo(CExtendedServerInfo pInfo) {
    NWNXLibPINVOKE.CServerExoAppInternal_GetExtendedServerInfo(swigCPtr, CExtendedServerInfo.getCPtr(pInfo));
  }

  public void UpdateClientsForObject(uint oidObjectToUpdate) {
    NWNXLibPINVOKE.CServerExoAppInternal_UpdateClientsForObject(swigCPtr, oidObjectToUpdate);
  }

  public void MarkUpdateClientsForObject(uint oidObjectToUpdate) {
    NWNXLibPINVOKE.CServerExoAppInternal_MarkUpdateClientsForObject(swigCPtr, oidObjectToUpdate);
  }

  public void UpdateClientGameObjectsForPlayer(CNWSPlayer pPlayer, int bForce, ulong nCurrentSystemTime) {
    NWNXLibPINVOKE.CServerExoAppInternal_UpdateClientGameObjectsForPlayer__SWIG_0(swigCPtr, CNWSPlayer.getCPtr(pPlayer), bForce, nCurrentSystemTime);
  }

  public void UpdateClientGameObjectsForPlayer(CNWSPlayer pPlayer, int bForce) {
    NWNXLibPINVOKE.CServerExoAppInternal_UpdateClientGameObjectsForPlayer__SWIG_1(swigCPtr, CNWSPlayer.getCPtr(pPlayer), bForce);
  }

  public int UnloadModule() {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_UnloadModule(swigCPtr);
    return retVal;
  }

  public int LoadModule(CExoString moduleResRef, CUUID uuidOverride, int bIsSaveGame, CNWSPlayer pPlayer, int sourceType, Advertisement nwsyncModuleSourceAdvert) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_LoadModule(swigCPtr, CExoString.getCPtr(moduleResRef), CUUID.getCPtr(uuidOverride), bIsSaveGame, CNWSPlayer.getCPtr(pPlayer), sourceType, Advertisement.getCPtr(nwsyncModuleSourceAdvert));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int GetModuleExists(CExoString sModuleResRef) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_GetModuleExists(swigCPtr, CExoString.getCPtr(sModuleResRef));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int RunModule() {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_RunModule(swigCPtr);
    return retVal;
  }

  public void VomitServerOptionsToLog() {
    NWNXLibPINVOKE.CServerExoAppInternal_VomitServerOptionsToLog(swigCPtr);
  }

  public CExoString GetPlayerListString() {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CServerExoAppInternal_GetPlayerListString(swigCPtr), true);
    return ret;
  }

  public CExoString GetBannedListString() {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CServerExoAppInternal_GetBannedListString(swigCPtr), true);
    return ret;
  }

  public CExoString GetPortalListString() {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CServerExoAppInternal_GetPortalListString(swigCPtr), true);
    return ret;
  }

  public void MovePlayerToArea(void* pPlayer) {
    NWNXLibPINVOKE.CServerExoAppInternal_MovePlayerToArea(swigCPtr, (global::System.IntPtr)pPlayer);
  }

  public void InitiateModuleForPlayer(void* pPlayer) {
    NWNXLibPINVOKE.CServerExoAppInternal_InitiateModuleForPlayer(swigCPtr, (global::System.IntPtr)pPlayer);
  }

  public void UpdateWindowTitle() {
    NWNXLibPINVOKE.CServerExoAppInternal_UpdateWindowTitle(swigCPtr);
  }

  public int GetFactionOfObject(uint oObject, int* nFaction) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_GetFactionOfObject(swigCPtr, oObject, nFaction);
    return retVal;
  }

  public int SendCharacterQuery(CNWSPlayer pPlayer) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_SendCharacterQuery(swigCPtr, CNWSPlayer.getCPtr(pPlayer));
    return retVal;
  }

  public int SendStartStallEvent(uint nStallEvent) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_SendStartStallEvent(swigCPtr, nStallEvent);
    return retVal;
  }

  public void TogglePauseState(byte nState) {
    NWNXLibPINVOKE.CServerExoAppInternal_TogglePauseState(swigCPtr, nState);
  }

  public int GetPauseState(byte nState) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_GetPauseState(swigCPtr, nState);
    return retVal;
  }

  public byte GetActivePauseState() {
    byte retVal = NWNXLibPINVOKE.CServerExoAppInternal_GetActivePauseState(swigCPtr);
    return retVal;
  }

  public void SetPauseState(byte nState, int bPause) {
    NWNXLibPINVOKE.CServerExoAppInternal_SetPauseState(swigCPtr, nState, bPause);
  }

  public CExoArrayListUInt32 GetActiveExclusionList() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CServerExoAppInternal_GetActiveExclusionList(swigCPtr);
    CExoArrayListUInt32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoArrayListUInt32(cPtr, false);
    return ret;
  }

  public void AddToExclusionList(uint oidExclude, byte nList) {
    NWNXLibPINVOKE.CServerExoAppInternal_AddToExclusionList(swigCPtr, oidExclude, nList);
  }

  public void RemoveFromExclusionList(uint oidExclude, byte nList) {
    NWNXLibPINVOKE.CServerExoAppInternal_RemoveFromExclusionList(swigCPtr, oidExclude, nList);
  }

  public int IsOnActiveExclusionList(uint oidExclude) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_IsOnActiveExclusionList(swigCPtr, oidExclude);
    return retVal;
  }

  public void ReprocessExclusionListActions(byte nOldState) {
    NWNXLibPINVOKE.CServerExoAppInternal_ReprocessExclusionListActions(swigCPtr, nOldState);
  }

  public uint ResolvePlayerByFirstName(CExoString sName) {
    uint retVal = NWNXLibPINVOKE.CServerExoAppInternal_ResolvePlayerByFirstName(swigCPtr, CExoString.getCPtr(sName));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int SendEnhancedHeartbeatToMasterServer() {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_SendEnhancedHeartbeatToMasterServer(swigCPtr);
    return retVal;
  }

  public int SendHeartbeatToRelay() {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_SendHeartbeatToRelay(swigCPtr);
    return retVal;
  }

  public int GetDifficultyOption(int nOption) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_GetDifficultyOption(swigCPtr, nOption);
    return retVal;
  }

  public void AddCharListRequest(uint nPlayerId) {
    NWNXLibPINVOKE.CServerExoAppInternal_AddCharListRequest(swigCPtr, nPlayerId);
  }

  public int IsOnExclusionList(uint oidToExamine) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_IsOnExclusionList(swigCPtr, oidToExamine);
    return retVal;
  }

  public void AddIPToBannedList(CExoString sIP) {
    NWNXLibPINVOKE.CServerExoAppInternal_AddIPToBannedList(swigCPtr, CExoString.getCPtr(sIP));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddPlayerNameToBannedList(CExoString sPlayerName) {
    NWNXLibPINVOKE.CServerExoAppInternal_AddPlayerNameToBannedList(swigCPtr, CExoString.getCPtr(sPlayerName));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddCDKeyToBannedList(CExoString sKey) {
    NWNXLibPINVOKE.CServerExoAppInternal_AddCDKeyToBannedList(swigCPtr, CExoString.getCPtr(sKey));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveIPFromBannedList(CExoString sIP) {
    NWNXLibPINVOKE.CServerExoAppInternal_RemoveIPFromBannedList(swigCPtr, CExoString.getCPtr(sIP));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemovePlayerNameFromBannedList(CExoString sPlayerName) {
    NWNXLibPINVOKE.CServerExoAppInternal_RemovePlayerNameFromBannedList(swigCPtr, CExoString.getCPtr(sPlayerName));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveCDKeyFromBannedList(CExoString sKey) {
    NWNXLibPINVOKE.CServerExoAppInternal_RemoveCDKeyFromBannedList(swigCPtr, CExoString.getCPtr(sKey));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetIsIPOnBannedList(CExoString sIP) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_GetIsIPOnBannedList(swigCPtr, CExoString.getCPtr(sIP));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int GetIsPlayerNameOnBannedList(CExoString sPlayerName) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_GetIsPlayerNameOnBannedList(swigCPtr, CExoString.getCPtr(sPlayerName));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int GetIsCDKeyOnBannedList(CExoString sKey) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_GetIsCDKeyOnBannedList(swigCPtr, CExoString.getCPtr(sKey));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public void HandleOldServerVaultMigration(CExoString sClientCDKey, CExoString sLegacyCDKey, CExoString sPlayerName) {
    NWNXLibPINVOKE.CServerExoAppInternal_HandleOldServerVaultMigration(swigCPtr, CExoString.getCPtr(sClientCDKey), CExoString.getCPtr(sLegacyCDKey), CExoString.getCPtr(sPlayerName));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int IsPlayerNameSticky() {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_IsPlayerNameSticky(swigCPtr);
    return retVal;
  }

  public int CheckStickyPlayerNameReserved(CExoString sClientCDKey, CExoString sLegacyCDKey, CExoString sPlayerName, int nConnectionType) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_CheckStickyPlayerNameReserved(swigCPtr, CExoString.getCPtr(sClientCDKey), CExoString.getCPtr(sLegacyCDKey), CExoString.getCPtr(sPlayerName), nConnectionType);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public uint GetFirstPCObject() {
    uint retVal = NWNXLibPINVOKE.CServerExoAppInternal_GetFirstPCObject(swigCPtr);
    return retVal;
  }

  public uint GetNextPCObject() {
    uint retVal = NWNXLibPINVOKE.CServerExoAppInternal_GetNextPCObject(swigCPtr);
    return retVal;
  }

  public void StallEventSaveGame() {
    NWNXLibPINVOKE.CServerExoAppInternal_StallEventSaveGame(swigCPtr);
  }

  public void PushMessageOverWall(byte* pData, uint nMsgLength) {
    NWNXLibPINVOKE.CServerExoAppInternal_PushMessageOverWall(swigCPtr, pData, nMsgLength);
  }

  public void UnlockBiowareModule(CNWSModule pModule) {
    NWNXLibPINVOKE.CServerExoAppInternal_UnlockBiowareModule(swigCPtr, CNWSModule.getCPtr(pModule));
  }

  public int CreateServerVaultLostAndFound() {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_CreateServerVaultLostAndFound(swigCPtr);
    return retVal;
  }

  public int StripColorTokens(CExoString sInput) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_StripColorTokens(swigCPtr, CExoString.getCPtr(sInput));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public CExoString GetHostedPublicInternetAddressAndPort() {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CServerExoAppInternal_GetHostedPublicInternetAddressAndPort(swigCPtr), true);
    return ret;
  }

  public int GetGameObjectUpdateInterval(CNWSObject creature) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_GetGameObjectUpdateInterval(swigCPtr, CNWSObject.getCPtr(creature));
    return retVal;
  }

  public int GetGameObjectUpdateMessageLimit(CNWSObject creature) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_GetGameObjectUpdateMessageLimit(swigCPtr, CNWSObject.getCPtr(creature));
    return retVal;
  }

  public void SetGameObjectUpdateIntervalTarget(int target) {
    NWNXLibPINVOKE.CServerExoAppInternal_SetGameObjectUpdateIntervalTarget(swigCPtr, target);
  }

  public void SetGameObjectUpdateIntervalTargetLoading(int target) {
    NWNXLibPINVOKE.CServerExoAppInternal_SetGameObjectUpdateIntervalTargetLoading(swigCPtr, target);
  }

  public void SetGameObjectUpdateMessageLimit(int target) {
    NWNXLibPINVOKE.CServerExoAppInternal_SetGameObjectUpdateMessageLimit(swigCPtr, target);
  }

  public void SetGameObjectUpdateMessageLimitLoading(int target) {
    NWNXLibPINVOKE.CServerExoAppInternal_SetGameObjectUpdateMessageLimitLoading(swigCPtr, target);
  }

  public int StorePlayerCharacters() {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_StorePlayerCharacters(swigCPtr);
    return retVal;
  }

  public int SendEnteringStartNewModuleMessage() {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_SendEnteringStartNewModuleMessage(swigCPtr);
    return retVal;
  }

  public int SendExitingStartNewModuleMessage(int bSuccess) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_SendExitingStartNewModuleMessage(swigCPtr, bSuccess);
    return retVal;
  }

  public void QuarantineInvalidCharacter(void* pData, uint nSize) {
    NWNXLibPINVOKE.CServerExoAppInternal_QuarantineInvalidCharacter(swigCPtr, (global::System.IntPtr)pData, nSize);
  }

  public void UpdateClientGameObjects(int bForce) {
    NWNXLibPINVOKE.CServerExoAppInternal_UpdateClientGameObjects(swigCPtr, bForce);
  }

  public void InitializeNetLayer() {
    NWNXLibPINVOKE.CServerExoAppInternal_InitializeNetLayer(swigCPtr);
  }

  public void GetServerInfoFromIniFile() {
    NWNXLibPINVOKE.CServerExoAppInternal_GetServerInfoFromIniFile(swigCPtr);
  }

  public void ReadBannedLists() {
    NWNXLibPINVOKE.CServerExoAppInternal_ReadBannedLists(swigCPtr);
  }

  public void WriteServerInfoToIniFile() {
    NWNXLibPINVOKE.CServerExoAppInternal_WriteServerInfoToIniFile(swigCPtr);
  }

  public int AddPendingAuthorization(uint nPlayerID) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_AddPendingAuthorization(swigCPtr, nPlayerID);
    return retVal;
  }

  public int RemovePendingAuthorization(uint nPlayerID) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_RemovePendingAuthorization(swigCPtr, nPlayerID);
    return retVal;
  }

  public void ConnectionLibMainLoop() {
    NWNXLibPINVOKE.CServerExoAppInternal_ConnectionLibMainLoop(swigCPtr);
  }

  public void StartShutdownTimer(ulong nTime, ulong nDelay) {
    NWNXLibPINVOKE.CServerExoAppInternal_StartShutdownTimer(swigCPtr, nTime, nDelay);
  }

  public int UpdateShutdownTimer(ulong nTime) {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_UpdateShutdownTimer(swigCPtr, nTime);
    return retVal;
  }

  public int UpdateAutoSaveTimer() {
    int retVal = NWNXLibPINVOKE.CServerExoAppInternal_UpdateAutoSaveTimer(swigCPtr);
    return retVal;
  }

  public void _Destructor() {
    NWNXLibPINVOKE.CServerExoAppInternal__Destructor(swigCPtr);
  }

}

}

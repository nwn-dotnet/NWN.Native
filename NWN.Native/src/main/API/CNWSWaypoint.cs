//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public unsafe class CNWSWaypoint : CNWSObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CNWSWaypoint(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NWNXLibPINVOKE.CNWSWaypoint_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CNWSWaypoint obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NWNXLibPINVOKE.delete_CNWSWaypoint(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public global::System.IntPtr Pointer {
    get {
      return swigCPtr.Handle;
    }
  }

  public static unsafe implicit operator void*(CNWSWaypoint self) {
    return (void*)self.swigCPtr.Handle;
  }

  public static unsafe CNWSWaypoint FromPointer(void* pointer, bool memoryOwn = false) {
    return pointer != null ? new CNWSWaypoint((global::System.IntPtr)pointer, memoryOwn) : null;
  }

  public static CNWSWaypoint FromPointer(global::System.IntPtr pointer, bool memoryOwn = false) {
    return pointer != global::System.IntPtr.Zero ? new CNWSWaypoint(pointer, memoryOwn) : null;
  }

  public bool Equals(CNWSWaypoint other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }

    if (ReferenceEquals(this, other)) {
      return true;
    }

    return Pointer.Equals(other.Pointer);
  }

  public override bool Equals(object obj) {
    return ReferenceEquals(this, obj) || obj is CNWSWaypoint other && Equals(other);
  }

  public override int GetHashCode() {
    return swigCPtr.Handle.GetHashCode();
  }

  public static bool operator ==(CNWSWaypoint left, CNWSWaypoint right) {
    return Equals(left, right);
  }

  public static bool operator !=(CNWSWaypoint left, CNWSWaypoint right) {
    return !Equals(left, right);
  }

  public int m_bMapNote {
    set {
      NWNXLibPINVOKE.CNWSWaypoint_m_bMapNote_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSWaypoint_m_bMapNote_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bMapNoteEnabled {
    set {
      NWNXLibPINVOKE.CNWSWaypoint_m_bMapNoteEnabled_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSWaypoint_m_bMapNoteEnabled_get(swigCPtr);
      return retVal;
    }

  }

  public CExoLocString m_szMapNote {
    set {
      NWNXLibPINVOKE.CNWSWaypoint_m_szMapNote_set(swigCPtr, CExoLocString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSWaypoint_m_szMapNote_get(swigCPtr);
      CExoLocString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoLocString(cPtr, false);
      return ret;
    } 
  }

  public CExoLocString m_sLocalizedName {
    set {
      NWNXLibPINVOKE.CNWSWaypoint_m_sLocalizedName_set(swigCPtr, CExoLocString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSWaypoint_m_sLocalizedName_get(swigCPtr);
      CExoLocString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoLocString(cPtr, false);
      return ret;
    } 
  }

  public CNWSWaypoint(uint oidId) : this(NWNXLibPINVOKE.new_CNWSWaypoint__SWIG_0(oidId), true) {
  }

  public CNWSWaypoint() : this(NWNXLibPINVOKE.new_CNWSWaypoint__SWIG_1(), true) {
  }

  public void AddToArea(CNWSArea pArea, float fX, float fY, float fZ, int bRunScripts) {
    NWNXLibPINVOKE.CNWSWaypoint_AddToArea__SWIG_0(swigCPtr, CNWSArea.getCPtr(pArea), fX, fY, fZ, bRunScripts);
  }

  public void AddToArea(CNWSArea pArea, float fX, float fY, float fZ) {
    NWNXLibPINVOKE.CNWSWaypoint_AddToArea__SWIG_1(swigCPtr, CNWSArea.getCPtr(pArea), fX, fY, fZ);
  }

  public override void AIUpdate() {
    NWNXLibPINVOKE.CNWSWaypoint_AIUpdate(swigCPtr);
  }

  public override CNWSWaypoint AsNWSWaypoint() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSWaypoint_AsNWSWaypoint(swigCPtr);
    CNWSWaypoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSWaypoint(cPtr, false);
    return ret;
  }

  public override void EventHandler(uint nEventId, uint nCallerObjectId, void* pScript, uint nCalendarDay, uint nTimeOfDay) {
    NWNXLibPINVOKE.CNWSWaypoint_EventHandler(swigCPtr, nEventId, nCallerObjectId, (global::System.IntPtr)pScript, nCalendarDay, nTimeOfDay);
  }

  public void RemoveFromArea() {
    NWNXLibPINVOKE.CNWSWaypoint_RemoveFromArea(swigCPtr);
  }

  public int LoadFromTemplate(CResRef cResRef, CExoString pTag) {
    int retVal = NWNXLibPINVOKE.CNWSWaypoint_LoadFromTemplate__SWIG_0(swigCPtr, CResRef.getCPtr(cResRef), CExoString.getCPtr(pTag));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int LoadFromTemplate(CResRef cResRef) {
    int retVal = NWNXLibPINVOKE.CNWSWaypoint_LoadFromTemplate__SWIG_1(swigCPtr, CResRef.getCPtr(cResRef));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int LoadWaypoint(CResGFF pRes, CResStruct cWaypointStruct, CExoString pTag) {
    int retVal = NWNXLibPINVOKE.CNWSWaypoint_LoadWaypoint__SWIG_0(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(cWaypointStruct), CExoString.getCPtr(pTag));
    return retVal;
  }

  public int LoadWaypoint(CResGFF pRes, CResStruct cWaypointStruct) {
    int retVal = NWNXLibPINVOKE.CNWSWaypoint_LoadWaypoint__SWIG_1(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(cWaypointStruct));
    return retVal;
  }

  public int SaveWaypoint(CResGFF pRes, CResStruct cWaypointStruct) {
    int retVal = NWNXLibPINVOKE.CNWSWaypoint_SaveWaypoint(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(cWaypointStruct));
    return retVal;
  }

  public override CExoLocString GetFirstName() {
    CExoLocString ret = new CExoLocString(NWNXLibPINVOKE.CNWSWaypoint_GetFirstName(swigCPtr), false);
    return ret;
  }

  public new void _Destructor() {
    NWNXLibPINVOKE.CNWSWaypoint__Destructor(swigCPtr);
  }

}

}

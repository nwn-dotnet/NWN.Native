//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public unsafe class CCombatInformationNode : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CCombatInformationNode(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CCombatInformationNode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CCombatInformationNode() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NWNXLibPINVOKE.delete_CCombatInformationNode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public global::System.IntPtr Pointer {
    get {
      return swigCPtr.Handle;
    }
  }

  public static unsafe implicit operator void*(CCombatInformationNode self) {
    return (void*)self.swigCPtr.Handle;
  }

  public static unsafe CCombatInformationNode FromPointer(void* pointer, bool memoryOwn = false) {
    return pointer != null ? new CCombatInformationNode((global::System.IntPtr)pointer, memoryOwn) : null;
  }

  public static CCombatInformationNode FromPointer(global::System.IntPtr pointer, bool memoryOwn = false) {
    return pointer != global::System.IntPtr.Zero ? new CCombatInformationNode(pointer, memoryOwn) : null;
  }

  public bool Equals(CCombatInformationNode other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }

    if (ReferenceEquals(this, other)) {
      return true;
    }

    return Pointer.Equals(other.Pointer);
  }

  public override bool Equals(object obj) {
    return ReferenceEquals(this, obj) || obj is CCombatInformationNode other && Equals(other);
  }

  public override int GetHashCode() {
    return swigCPtr.Handle.GetHashCode();
  }

  public static bool operator ==(CCombatInformationNode left, CCombatInformationNode right) {
    return Equals(left, right);
  }

  public static bool operator !=(CCombatInformationNode left, CCombatInformationNode right) {
    return !Equals(left, right);
  }

  public byte m_nModifier {
    set {
      NWNXLibPINVOKE.CCombatInformationNode_m_nModifier_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CCombatInformationNode_m_nModifier_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nModifierType {
    set {
      NWNXLibPINVOKE.CCombatInformationNode_m_nModifierType_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CCombatInformationNode_m_nModifierType_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nWeaponWield {
    set {
      NWNXLibPINVOKE.CCombatInformationNode_m_nWeaponWield_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CCombatInformationNode_m_nWeaponWield_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nVersusAlignLawChaos {
    set {
      NWNXLibPINVOKE.CCombatInformationNode_m_nVersusAlignLawChaos_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CCombatInformationNode_m_nVersusAlignLawChaos_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nVersusAlignGoodEvil {
    set {
      NWNXLibPINVOKE.CCombatInformationNode_m_nVersusAlignGoodEvil_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CCombatInformationNode_m_nVersusAlignGoodEvil_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nVersusRace {
    set {
      NWNXLibPINVOKE.CCombatInformationNode_m_nVersusRace_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CCombatInformationNode_m_nVersusRace_get(swigCPtr);
      return retVal;
    }

  }

  public CCombatInformationNode() : this(NWNXLibPINVOKE.new_CCombatInformationNode(), true) {
  }

  public int _OpEquals(CCombatInformationNode pNode) {
    int retVal = NWNXLibPINVOKE.CCombatInformationNode__OpEquals(swigCPtr, CCombatInformationNode.getCPtr(pNode));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int _OpNotEquals(CCombatInformationNode pNode) {
    int retVal = NWNXLibPINVOKE.CCombatInformationNode__OpNotEquals(swigCPtr, CCombatInformationNode.getCPtr(pNode));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public CCombatInformationNode _OpAssign(CCombatInformationNode pNode) {
    CCombatInformationNode ret = new CCombatInformationNode(NWNXLibPINVOKE.CCombatInformationNode__OpAssign(swigCPtr, CCombatInformationNode.getCPtr(pNode)), false);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}

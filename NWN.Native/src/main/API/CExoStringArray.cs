//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public unsafe class CExoStringArray : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CExoStringArray(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CExoStringArray obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CExoStringArray() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NWNXLibPINVOKE.delete_CExoStringArray(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public global::System.IntPtr Pointer {
    get {
      return swigCPtr.Handle;
    }
  }

  public static unsafe implicit operator void*(CExoStringArray self) {
    return (void*)self.swigCPtr.Handle;
  }

  public static unsafe CExoStringArray FromPointer(void* pointer, bool memoryOwn = false) {
    return pointer != null ? new CExoStringArray((global::System.IntPtr)pointer, memoryOwn) : null;
  }

  public static CExoStringArray FromPointer(global::System.IntPtr pointer, bool memoryOwn = false) {
    return pointer != global::System.IntPtr.Zero ? new CExoStringArray(pointer, memoryOwn) : null;
  }

  public bool Equals(CExoStringArray other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }

    if (ReferenceEquals(this, other)) {
      return true;
    }

    return Pointer.Equals(other.Pointer);
  }

  public override bool Equals(object obj) {
    return ReferenceEquals(this, obj) || obj is CExoStringArray other && Equals(other);
  }

  public override int GetHashCode() {
    return swigCPtr.Handle.GetHashCode();
  }

  public static bool operator ==(CExoStringArray left, CExoStringArray right) {
    return Equals(left, right);
  }

  public static bool operator !=(CExoStringArray left, CExoStringArray right) {
    return !Equals(left, right);
  }


  public CExoString this[int index] {
    get {
      return GetItem(index);
    }
    set {
      SetItem(index, value);
    }
  }
  public CExoStringArray(int nElements) : this(NWNXLibPINVOKE.new_CExoStringArray(nElements), true) {
  }

  public CExoString GetItem(int index) {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CExoStringArray_GetItem(swigCPtr, index), true);
    return ret;
  }

  public void SetItem(int index, CExoString value) {
    NWNXLibPINVOKE.CExoStringArray_SetItem(swigCPtr, index, CExoString.getCPtr(value));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static CExoStringArray FromPointer(CExoString ptr) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CExoStringArray_FromPointer(CExoString.getCPtr(ptr));
    CExoStringArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoStringArray(cPtr, false);
    return ret;
  }

}

}

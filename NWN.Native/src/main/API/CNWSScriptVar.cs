//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public unsafe class CNWSScriptVar : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CNWSScriptVar(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CNWSScriptVar obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CNWSScriptVar() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NWNXLibPINVOKE.delete_CNWSScriptVar(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public global::System.IntPtr Pointer {
    get {
      return swigCPtr.Handle;
    }
  }

  public static unsafe implicit operator void*(CNWSScriptVar self) {
    return (void*)self.swigCPtr.Handle;
  }

  public static unsafe CNWSScriptVar FromPointer(void* pointer, bool memoryOwn = false) {
    return pointer != null ? new CNWSScriptVar((global::System.IntPtr)pointer, memoryOwn) : null;
  }

  public static CNWSScriptVar FromPointer(global::System.IntPtr pointer, bool memoryOwn = false) {
    return pointer != global::System.IntPtr.Zero ? new CNWSScriptVar(pointer, memoryOwn) : null;
  }

  public bool Equals(CNWSScriptVar other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }

    if (ReferenceEquals(this, other)) {
      return true;
    }

    return Pointer.Equals(other.Pointer);
  }

  public override bool Equals(object obj) {
    return ReferenceEquals(this, obj) || obj is CNWSScriptVar other && Equals(other);
  }

  public override int GetHashCode() {
    return swigCPtr.Handle.GetHashCode();
  }

  public static bool operator ==(CNWSScriptVar left, CNWSScriptVar right) {
    return Equals(left, right);
  }

  public static bool operator !=(CNWSScriptVar left, CNWSScriptVar right) {
    return !Equals(left, right);
  }

  public int m_int {
    set {
      NWNXLibPINVOKE.CNWSScriptVar_m_int_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSScriptVar_m_int_get(swigCPtr);
      return retVal;
    }

  }

  public float m_float {
    set {
      NWNXLibPINVOKE.CNWSScriptVar_m_float_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CNWSScriptVar_m_float_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_objectId {
    set {
      NWNXLibPINVOKE.CNWSScriptVar_m_objectId_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSScriptVar_m_objectId_get(swigCPtr);
      return retVal;
    }

  }

  public CExoString m_string {
    set {
      NWNXLibPINVOKE.CNWSScriptVar_m_string_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSScriptVar_m_string_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public CScriptLocation m_location {
    set {
      NWNXLibPINVOKE.CNWSScriptVar_m_location_set(swigCPtr, CScriptLocation.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSScriptVar_m_location_get(swigCPtr);
      CScriptLocation ret = (cPtr == global::System.IntPtr.Zero) ? null : new CScriptLocation(cPtr, false);
      return ret;
    } 
  }

  public CassowarySolverEngineStructure m_cswy {
    set {
      NWNXLibPINVOKE.CNWSScriptVar_m_cswy_set(swigCPtr, CassowarySolverEngineStructure.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSScriptVar_m_cswy_get(swigCPtr);
      CassowarySolverEngineStructure ret = (cPtr == global::System.IntPtr.Zero) ? null : new CassowarySolverEngineStructure(cPtr, false);
      return ret;
    } 
  }

  public JsonEngineStructure m_json {
    set {
      NWNXLibPINVOKE.CNWSScriptVar_m_json_set(swigCPtr, JsonEngineStructure.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSScriptVar_m_json_get(swigCPtr);
      JsonEngineStructure ret = (cPtr == global::System.IntPtr.Zero) ? null : new JsonEngineStructure(cPtr, false);
      return ret;
    } 
  }

  public CNWSScriptVar() : this(NWNXLibPINVOKE.new_CNWSScriptVar__SWIG_0(), true) {
  }

  public CNWSScriptVar(CNWSScriptVar arg0) : this(NWNXLibPINVOKE.new_CNWSScriptVar__SWIG_1(CNWSScriptVar.getCPtr(arg0)), true) {
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public CNWSScriptVar _OpAssign(CNWSScriptVar arg0) {
    CNWSScriptVar ret = new CNWSScriptVar(NWNXLibPINVOKE.CNWSScriptVar__OpAssign(swigCPtr, CNWSScriptVar.getCPtr(arg0)), false);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Reset(uint nVarType) {
    NWNXLibPINVOKE.CNWSScriptVar_Reset(swigCPtr, nVarType);
  }

  public bool HasInt() {
    bool ret = NWNXLibPINVOKE.CNWSScriptVar_HasInt(swigCPtr);
    return ret;
  }

  public bool HasFloat() {
    bool ret = NWNXLibPINVOKE.CNWSScriptVar_HasFloat(swigCPtr);
    return ret;
  }

  public bool HasObject() {
    bool ret = NWNXLibPINVOKE.CNWSScriptVar_HasObject(swigCPtr);
    return ret;
  }

  public bool HasString() {
    bool ret = NWNXLibPINVOKE.CNWSScriptVar_HasString(swigCPtr);
    return ret;
  }

  public bool HasLocation() {
    bool ret = NWNXLibPINVOKE.CNWSScriptVar_HasLocation(swigCPtr);
    return ret;
  }

  public bool HasCswy() {
    bool ret = NWNXLibPINVOKE.CNWSScriptVar_HasCswy(swigCPtr);
    return ret;
  }

  public bool HasJson() {
    bool ret = NWNXLibPINVOKE.CNWSScriptVar_HasJson(swigCPtr);
    return ret;
  }

  public bool IsEmpty() {
    bool ret = NWNXLibPINVOKE.CNWSScriptVar_IsEmpty(swigCPtr);
    return ret;
  }

}

}

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public static unsafe class NWNXLib {
  public static int hydro_hex2bin(byte* bin, uint bin_maxlen, byte* hex, uint hex_len, byte* ignore, byte** hex_end_p) {
    int retVal = NWNXLibPINVOKE.hydro_hex2bin(bin, bin_maxlen, hex, hex_len, ignore, (global::System.IntPtr)hex_end_p);
    return retVal;
  }

  public static byte* hydro_bin2hex(byte* hex, uint hex_maxlen, byte* bin, uint bin_len) {
    byte* retVal = NWNXLibPINVOKE.hydro_bin2hex(hex, hex_maxlen, bin, bin_len);
    return retVal;
  }

  public static void sha1(NativeArray<byte> hval, NativeArray<byte> data, ulong len) {
    NWNXLibPINVOKE.sha1(hval, data, len);
  }

  public static Vector _OpAdd(Vector v1, Vector v2) {
    Vector ret = new Vector(NWNXLibPINVOKE._OpAdd(Vector.getCPtr(v1), Vector.getCPtr(v2)), true);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Vector _OpSubtract(Vector v1, Vector v2) {
    Vector ret = new Vector(NWNXLibPINVOKE._OpSubtract__SWIG_0(Vector.getCPtr(v1), Vector.getCPtr(v2)), true);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Vector _OpSubtract(Vector v) {
    Vector ret = new Vector(NWNXLibPINVOKE._OpSubtract__SWIG_1(Vector.getCPtr(v)), true);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint OBJECT_INVALID {
    get {
      uint retVal = NWNXLibPINVOKE.OBJECT_INVALID_get();
      return retVal;
    }

  }

  public static uint MINCHAROBJID {
    get {
      uint retVal = NWNXLibPINVOKE.MINCHAROBJID_get();
      return retVal;
    }

  }

  public static uint MAXCHAROBJID {
    get {
      uint retVal = NWNXLibPINVOKE.MAXCHAROBJID_get();
      return retVal;
    }

  }

  public static uint MINOBJECTID {
    get {
      uint retVal = NWNXLibPINVOKE.MINOBJECTID_get();
      return retVal;
    }

  }

  public static uint MAXOBJECTID {
    get {
      uint retVal = NWNXLibPINVOKE.MAXOBJECTID_get();
      return retVal;
    }

  }

  public static uint PLAYERID_ALL_SERVERADMINS {
    get {
      uint retVal = NWNXLibPINVOKE.PLAYERID_ALL_SERVERADMINS_get();
      return retVal;
    }

  }

  public static uint PLAYERID_ALL_GAMEMASTERS {
    get {
      uint retVal = NWNXLibPINVOKE.PLAYERID_ALL_GAMEMASTERS_get();
      return retVal;
    }

  }

  public static uint PLAYERID_ALL_PLAYERS {
    get {
      uint retVal = NWNXLibPINVOKE.PLAYERID_ALL_PLAYERS_get();
      return retVal;
    }

  }

  public static uint PLAYERID_SERVER {
    get {
      uint retVal = NWNXLibPINVOKE.PLAYERID_SERVER_get();
      return retVal;
    }

  }

  public static uint PLAYERID_INVALIDID {
    get {
      uint retVal = NWNXLibPINVOKE.PLAYERID_INVALIDID_get();
      return retVal;
    }

  }

  public static uint PLAYERID_ALL_CLIENTS {
    get {
      uint retVal = NWNXLibPINVOKE.PLAYERID_ALL_CLIENTS_get();
      return retVal;
    }

  }

  public static CExoString g_sBuildNumber {
    set {
      NWNXLibPINVOKE.g_sBuildNumber_set(CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.g_sBuildNumber_get();
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public static CExoString g_sBuildRevision {
    set {
      NWNXLibPINVOKE.g_sBuildRevision_set(CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.g_sBuildRevision_get();
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public static CExoString g_sBuildPostfix {
    set {
      NWNXLibPINVOKE.g_sBuildPostfix_set(CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.g_sBuildPostfix_get();
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public static CExoBase g_pExoBase {
    set {
      NWNXLibPINVOKE.g_pExoBase_set(CExoBase.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.g_pExoBase_get();
      CExoBase ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoBase(cPtr, false);
      return ret;
    } 
  }

  public static CExoResMan g_pExoResMan {
    set {
      NWNXLibPINVOKE.g_pExoResMan_set(CExoResMan.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.g_pExoResMan_get();
      CExoResMan ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoResMan(cPtr, false);
      return ret;
    } 
  }

  public static CVirtualMachine g_pVirtualMachine {
    set {
      NWNXLibPINVOKE.g_pVirtualMachine_set(CVirtualMachine.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.g_pVirtualMachine_get();
      CVirtualMachine ret = (cPtr == global::System.IntPtr.Zero) ? null : new CVirtualMachine(cPtr, false);
      return ret;
    } 
  }

  public static CScriptCompiler g_pScriptCompiler {
    set {
      NWNXLibPINVOKE.g_pScriptCompiler_set(CScriptCompiler.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.g_pScriptCompiler_get();
      CScriptCompiler ret = (cPtr == global::System.IntPtr.Zero) ? null : new CScriptCompiler(cPtr, false);
      return ret;
    } 
  }

  public static CAppManager g_pAppManager {
    set {
      NWNXLibPINVOKE.g_pAppManager_set(CAppManager.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.g_pAppManager_get();
      CAppManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new CAppManager(cPtr, false);
      return ret;
    } 
  }

  public static CTlkTable g_pTlkTable {
    set {
      NWNXLibPINVOKE.g_pTlkTable_set(CTlkTable.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.g_pTlkTable_get();
      CTlkTable ret = (cPtr == global::System.IntPtr.Zero) ? null : new CTlkTable(cPtr, false);
      return ret;
    } 
  }

  public static CNWRules g_pRules {
    set {
      NWNXLibPINVOKE.g_pRules_set(CNWRules.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.g_pRules_get();
      CNWRules ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWRules(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_CExoTaskManager g_pExoTaskManager {
    set {
      NWNXLibPINVOKE.g_pExoTaskManager_set(SWIGTYPE_p_CExoTaskManager.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.g_pExoTaskManager_get();
      SWIGTYPE_p_CExoTaskManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_CExoTaskManager(cPtr, false);
      return ret;
    } 
  }

  public static int g_bEnableCombatDebugging {
    set {
      NWNXLibPINVOKE.g_bEnableCombatDebugging_set(value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.g_bEnableCombatDebugging_get();
      return retVal;
    }

  }

  public static int g_bEnableSavingThrowDebugging {
    set {
      NWNXLibPINVOKE.g_bEnableSavingThrowDebugging_set(value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.g_bEnableSavingThrowDebugging_get();
      return retVal;
    }

  }

  public static int g_bEnableMovementSpeedDebugging {
    set {
      NWNXLibPINVOKE.g_bEnableMovementSpeedDebugging_set(value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.g_bEnableMovementSpeedDebugging_get();
      return retVal;
    }

  }

  public static int g_bEnableHitDieDebugging {
    set {
      NWNXLibPINVOKE.g_bEnableHitDieDebugging_set(value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.g_bEnableHitDieDebugging_get();
      return retVal;
    }

  }

  public static int g_bExitProgram {
    set {
      NWNXLibPINVOKE.g_bExitProgram_set(value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.g_bExitProgram_get();
      return retVal;
    }

  }

  public static CExoString BuildNumber() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.BuildNumber();
    CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
    return ret;
  }

  public static CExoString BuildRevision() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.BuildRevision();
    CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
    return ret;
  }

  public static CExoString BuildPostfix() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.BuildPostfix();
    CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
    return ret;
  }

  public static CExoBase ExoBase() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.ExoBase();
    CExoBase ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoBase(cPtr, false);
    return ret;
  }

  public static CExoResMan ExoResMan() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.ExoResMan();
    CExoResMan ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoResMan(cPtr, false);
    return ret;
  }

  public static CVirtualMachine VirtualMachine() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.VirtualMachine();
    CVirtualMachine ret = (cPtr == global::System.IntPtr.Zero) ? null : new CVirtualMachine(cPtr, false);
    return ret;
  }

  public static CScriptCompiler ScriptCompiler() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.ScriptCompiler();
    CScriptCompiler ret = (cPtr == global::System.IntPtr.Zero) ? null : new CScriptCompiler(cPtr, false);
    return ret;
  }

  public static CAppManager AppManager() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.AppManager();
    CAppManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new CAppManager(cPtr, false);
    return ret;
  }

  public static CTlkTable TlkTable() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.TlkTable();
    CTlkTable ret = (cPtr == global::System.IntPtr.Zero) ? null : new CTlkTable(cPtr, false);
    return ret;
  }

  public static CNWRules Rules() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.Rules();
    CNWRules ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWRules(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_Task__CExoTaskManager TaskManager() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.TaskManager();
    SWIGTYPE_p_Task__CExoTaskManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Task__CExoTaskManager(cPtr, false);
    return ret;
  }

  public static int* EnableCombatDebugging() {
    int* retVal = NWNXLibPINVOKE.EnableCombatDebugging();
    return retVal;
  }

  public static int* EnableSavingThrowDebugging() {
    int* retVal = NWNXLibPINVOKE.EnableSavingThrowDebugging();
    return retVal;
  }

  public static int* EnableMovementSpeedDebugging() {
    int* retVal = NWNXLibPINVOKE.EnableMovementSpeedDebugging();
    return retVal;
  }

  public static int* EnableHitDieDebugging() {
    int* retVal = NWNXLibPINVOKE.EnableHitDieDebugging();
    return retVal;
  }

  public static int* ExitProgram() {
    int* retVal = NWNXLibPINVOKE.ExitProgram();
    return retVal;
  }

  public static readonly int CSCRIPTCOMPILER_OPTIMIZE_DEAD_FUNCTIONS = NWNXLibPINVOKE.CSCRIPTCOMPILER_OPTIMIZE_DEAD_FUNCTIONS_get();
  public static readonly int CSCRIPTCOMPILER_OPTIMIZE_FOLD_CONSTANTS = NWNXLibPINVOKE.CSCRIPTCOMPILER_OPTIMIZE_FOLD_CONSTANTS_get();
  public static readonly int CSCRIPTCOMPILER_OPTIMIZE_MELD_INSTRUCTIONS = NWNXLibPINVOKE.CSCRIPTCOMPILER_OPTIMIZE_MELD_INSTRUCTIONS_get();
  public static readonly int CSCRIPTCOMPILER_OPTIMIZE_NOTHING = NWNXLibPINVOKE.CSCRIPTCOMPILER_OPTIMIZE_NOTHING_get();
  public static readonly int CSCRIPTCOMPILER_OPTIMIZE_EVERYTHING = NWNXLibPINVOKE.CSCRIPTCOMPILER_OPTIMIZE_EVERYTHING_get();
  public static readonly int SHA1_DIGEST_SIZE = NWNXLibPINVOKE.SHA1_DIGEST_SIZE_get();
}

}

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public unsafe class CNWSCreature : CNWSObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CNWSCreature(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NWNXLibPINVOKE.CNWSCreature_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CNWSCreature obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NWNXLibPINVOKE.delete_CNWSCreature(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public global::System.IntPtr Pointer {
    get {
      return swigCPtr.Handle;
    }
  }

  public static unsafe implicit operator void*(CNWSCreature self) {
    return (void*)self.swigCPtr.Handle;
  }

  public static unsafe CNWSCreature FromPointer(void* pointer, bool memoryOwn = false) {
    return pointer != null ? new CNWSCreature((global::System.IntPtr)pointer, memoryOwn) : null;
  }

  public static CNWSCreature FromPointer(global::System.IntPtr pointer, bool memoryOwn = false) {
    return pointer != global::System.IntPtr.Zero ? new CNWSCreature(pointer, memoryOwn) : null;
  }

  public bool Equals(CNWSCreature other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }

    if (ReferenceEquals(this, other)) {
      return true;
    }

    return Pointer.Equals(other.Pointer);
  }

  public override bool Equals(object obj) {
    return ReferenceEquals(this, obj) || obj is CNWSCreature other && Equals(other);
  }

  public override int GetHashCode() {
    return swigCPtr.Handle.GetHashCode();
  }

  public static bool operator ==(CNWSCreature left, CNWSCreature right) {
    return Equals(left, right);
  }

  public static bool operator !=(CNWSCreature left, CNWSCreature right) {
    return !Equals(left, right);
  }

  public int m_bPonyRide {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bPonyRide_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bPonyRide_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nEquipArrayIndex {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nEquipArrayIndex_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreature_m_nEquipArrayIndex_get(swigCPtr);
      return retVal;
    }

  }

  public NativeArray<uint> m_poidCntrSpellObjects {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_poidCntrSpellObjects_set(swigCPtr, value);
    } 
    get {
      global::System.IntPtr arrayPtr = NWNXLibPINVOKE.CNWSCreature_m_poidCntrSpellObjects_get(swigCPtr);
      NativeArray<uint> retVal = new NativeArray<uint>(arrayPtr, 10);

      return retVal; // uint[10]
    }

  }

  public int m_nNumCntrSpellObjects {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nNumCntrSpellObjects_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_nNumCntrSpellObjects_get(swigCPtr);
      return retVal;
    }

  }

  public CExoStringArray m_sScripts {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_sScripts_set(swigCPtr, CExoStringArray.getCPtr(value));
    } 
    get {
        global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_m_sScripts_get(swigCPtr);;
        CExoStringArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoStringArray(cPtr, false);
        return ret;
    }

  }

  public CExoStringArray m_sOriginalScripts {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_sOriginalScripts_set(swigCPtr, CExoStringArray.getCPtr(value));
    } 
    get {
        global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_m_sOriginalScripts_get(swigCPtr);;
        CExoStringArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoStringArray(cPtr, false);
        return ret;
    }

  }

  public CNWSQuickbarButton m_pQuickbarButton {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_pQuickbarButton_set(swigCPtr, CNWSQuickbarButton.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_m_pQuickbarButton_get(swigCPtr);
      CNWSQuickbarButton ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSQuickbarButton(cPtr, false);
      return ret;
    } 
  }

  public int m_bLootable {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bLootable_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bLootable_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nDecayTime {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nDecayTime_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_nDecayTime_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_oidBodyBag {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_oidBodyBag_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_oidBodyBag_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_oidDesiredArea {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_oidDesiredArea_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_oidDesiredArea_get(swigCPtr);
      return retVal;
    }

  }

  public Vector m_vDesiredAreaLocation {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_vDesiredAreaLocation_set(swigCPtr, Vector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_m_vDesiredAreaLocation_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, false);
      return ret;
    } 
  }

  public int m_bDesiredAreaUpdateComplete {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bDesiredAreaUpdateComplete_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bDesiredAreaUpdateComplete_get(swigCPtr);
      return retVal;
    }

  }

  public CExoArrayListUInt32 m_aLinkedAreaOfEffectObjects {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_aLinkedAreaOfEffectObjects_set(swigCPtr, CExoArrayListUInt32.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_m_aLinkedAreaOfEffectObjects_get(swigCPtr);
      CExoArrayListUInt32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoArrayListUInt32(cPtr, false);
      return ret;
    } 
  }

  public CExoArrayListUInt32 m_aInSubAreas {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_aInSubAreas_set(swigCPtr, CExoArrayListUInt32.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_m_aInSubAreas_get(swigCPtr);
      CExoArrayListUInt32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoArrayListUInt32(cPtr, false);
      return ret;
    } 
  }

  public uint m_oidBlockingDoor {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_oidBlockingDoor_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_oidBlockingDoor_get(swigCPtr);
      return retVal;
    }

  }

  public CPathfindInformation m_pcPathfindInformation {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_pcPathfindInformation_set(swigCPtr, CPathfindInformation.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_m_pcPathfindInformation_get(swigCPtr);
      CPathfindInformation ret = (cPtr == global::System.IntPtr.Zero) ? null : new CPathfindInformation(cPtr, false);
      return ret;
    } 
  }

  public float m_fMovementScaleFactor {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_fMovementScaleFactor_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CNWSCreature_m_fMovementScaleFactor_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bUpdateCombatInformation {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bUpdateCombatInformation_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bUpdateCombatInformation_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nNumCharSheetViewers {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nNumCharSheetViewers_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_nNumCharSheetViewers_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bUpdateSpellSlots {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bUpdateSpellSlots_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bUpdateSpellSlots_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bOnCreationScriptExecuted {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bOnCreationScriptExecuted_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bOnCreationScriptExecuted_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nLastHeartbeatScriptCalendarDay {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nLastHeartbeatScriptCalendarDay_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_nLastHeartbeatScriptCalendarDay_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nLastHeartbeatScriptTimeOfDay {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nLastHeartbeatScriptTimeOfDay_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_nLastHeartbeatScriptTimeOfDay_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nHeartbeatInterval {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nHeartbeatInterval_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_nHeartbeatInterval_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nLastRestRadiusCheckDay {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nLastRestRadiusCheckDay_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_nLastRestRadiusCheckDay_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nLastRestRadiusCheckTimeOfDay {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nLastRestRadiusCheckTimeOfDay_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_nLastRestRadiusCheckTimeOfDay_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_oidLastTrapDetected {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_oidLastTrapDetected_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_oidLastTrapDetected_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nLastTrapCheckCalendarDay {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nLastTrapCheckCalendarDay_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_nLastTrapCheckCalendarDay_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nLastTrapCheckTimeOfDay {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nLastTrapCheckTimeOfDay_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_nLastTrapCheckTimeOfDay_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nLastStealthCheckCalendarDay {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nLastStealthCheckCalendarDay_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_nLastStealthCheckCalendarDay_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nLastStealthCheckTimeOfDay {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nLastStealthCheckTimeOfDay_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_nLastStealthCheckTimeOfDay_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nExcitedStateTimer {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nExcitedStateTimer_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_nExcitedStateTimer_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nLastVisibleCreaturesCheckCalendarDay {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nLastVisibleCreaturesCheckCalendarDay_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_nLastVisibleCreaturesCheckCalendarDay_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nLastVisibleCreaturesCheckTimeOfDay {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nLastVisibleCreaturesCheckTimeOfDay_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_nLastVisibleCreaturesCheckTimeOfDay_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nChecksVisibleList {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nChecksVisibleList_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_nChecksVisibleList_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nChecksHeartbeat {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nChecksHeartbeat_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_nChecksHeartbeat_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nMoveSpeedTimer {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nMoveSpeedTimer_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_nMoveSpeedTimer_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bPendingRealization {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bPendingRealization_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bPendingRealization_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nPersonalReputationHeartbeatCount {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nPersonalReputationHeartbeatCount_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreature_m_nPersonalReputationHeartbeatCount_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nLastActionQueueUpdateDay {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nLastActionQueueUpdateDay_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_nLastActionQueueUpdateDay_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nLastActionQueueUpdateTimeOfDay {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nLastActionQueueUpdateTimeOfDay_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_nLastActionQueueUpdateTimeOfDay_get(swigCPtr);
      return retVal;
    }

  }

  public CNWActionNodeArray m_pActionQueue {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_pActionQueue_set(swigCPtr, CNWActionNodeArray.getCPtr(value));
    } 
    get {
        global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_m_pActionQueue_get(swigCPtr);;
        CNWActionNodeArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWActionNodeArray(cPtr, false);
        return ret;
    }

  }

  public byte m_nAmbientAnimationState {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nAmbientAnimationState_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreature_m_nAmbientAnimationState_get(swigCPtr);
      return retVal;
    }

  }

  public CExoString m_sModelType {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_sModelType_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_m_sModelType_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public CExoArrayListUInt32 m_oidAutoMapAreaList {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_oidAutoMapAreaList_set(swigCPtr, CExoArrayListUInt32.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_m_oidAutoMapAreaList_get(swigCPtr);
      CExoArrayListUInt32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoArrayListUInt32(cPtr, false);
      return ret;
    } 
  }

  public byte** m_nAutoMapTileData {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nAutoMapTileData_set(swigCPtr, (global::System.IntPtr)value);
    } 
    get {
        global::System.IntPtr retVal = NWNXLibPINVOKE.CNWSCreature_m_nAutoMapTileData_get(swigCPtr);
        return (byte**)retVal;
    }

  }

  public int m_bAutoMapAutoExplores {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bAutoMapAutoExplores_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bAutoMapAutoExplores_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nLastExploredTileX {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nLastExploredTileX_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreature_m_nLastExploredTileX_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nLastExploredTileY {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nLastExploredTileY_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreature_m_nLastExploredTileY_get(swigCPtr);
      return retVal;
    }

  }

  public uint oidLastExploredArea {
    set {
      NWNXLibPINVOKE.CNWSCreature_oidLastExploredArea_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_oidLastExploredArea_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nDetectMode {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nDetectMode_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreature_m_nDetectMode_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nStealthMode {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nStealthMode_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreature_m_nStealthMode_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nDefensiveCastingMode {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nDefensiveCastingMode_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreature_m_nDefensiveCastingMode_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nCombatMode {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nCombatMode_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreature_m_nCombatMode_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nDesiredCombatMode {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nDesiredCombatMode_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreature_m_nDesiredCombatMode_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_oidCounterSpellTarget {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_oidCounterSpellTarget_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_oidCounterSpellTarget_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nInitiativeRoll {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nInitiativeRoll_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreature_m_nInitiativeRoll_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bInitiativeExpired {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bInitiativeExpired_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bInitiativeExpired_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bCombatState {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bCombatState_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bCombatState_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nCombatStateTimer {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nCombatStateTimer_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_nCombatStateTimer_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bPassiveAttackBehaviour {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bPassiveAttackBehaviour_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bPassiveAttackBehaviour_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bHasArms {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bHasArms_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bHasArms_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bHasLegs {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bHasLegs_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bHasLegs_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bDisarmable {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bDisarmable_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bDisarmable_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nCreatureSize {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nCreatureSize_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_nCreatureSize_get(swigCPtr);
      return retVal;
    }

  }

  public float m_fPreferredAttackDistance {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_fPreferredAttackDistance_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CNWSCreature_m_fPreferredAttackDistance_get(swigCPtr);
      return retVal;
    }

  }

  public float m_fWeaponScale {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_fWeaponScale_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CNWSCreature_m_fWeaponScale_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_oidAttackTarget {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_oidAttackTarget_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_oidAttackTarget_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_oidAttemptedAttackTarget {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_oidAttemptedAttackTarget_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_oidAttemptedAttackTarget_get(swigCPtr);
      return retVal;
    }

  }

  public Vector m_vLastAttackPosition {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_vLastAttackPosition_set(swigCPtr, Vector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_m_vLastAttackPosition_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, false);
      return ret;
    } 
  }

  public uint m_oidGoingToBeAttackedBy {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_oidGoingToBeAttackedBy_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_oidGoingToBeAttackedBy_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_oidAttemptedSpellTarget {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_oidAttemptedSpellTarget_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_oidAttemptedSpellTarget_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_oidSpellTarget {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_oidSpellTarget_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_oidSpellTarget_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nLastAmmoWarning {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nLastAmmoWarning_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_nLastAmmoWarning_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nLastCombatRoundUpdate {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nLastCombatRoundUpdate_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_nLastCombatRoundUpdate_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nLastRunningAOOUpdate {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nLastRunningAOOUpdate_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_nLastRunningAOOUpdate_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bBroadcastedAOOTo {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bBroadcastedAOOTo_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bBroadcastedAOOTo_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nLastRunningAOOTimeOut {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nLastRunningAOOTimeOut_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_nLastRunningAOOTimeOut_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bExternalCombatModeEnabled {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bExternalCombatModeEnabled_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bExternalCombatModeEnabled_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bSilent {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bSilent_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bSilent_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bHasted {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bHasted_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bHasted_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bSlowed {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bSlowed_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bSlowed_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bTaunt {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bTaunt_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bTaunt_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bForcedWalk {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bForcedWalk_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bForcedWalk_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nVisionType {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nVisionType_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreature_m_nVisionType_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nState {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nState_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreature_m_nState_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nEffectSpellId {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nEffectSpellId_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_nEffectSpellId_get(swigCPtr);
      return retVal;
    }

  }

  public CExoArrayListCEffectIconObjectPtr m_aEffectIcons {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_aEffectIcons_set(swigCPtr, CExoArrayListCEffectIconObjectPtr.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_m_aEffectIcons_get(swigCPtr);
      CExoArrayListCEffectIconObjectPtr ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoArrayListCEffectIconObjectPtr(cPtr, false);
      return ret;
    } 
  }

  public int m_bCutsceneCameraMode {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bCutsceneCameraMode_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bCutsceneCameraMode_get(swigCPtr);
      return retVal;
    }

  }

  public float m_fCutsceneCameraMoveFactor {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_fCutsceneCameraMoveFactor_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CNWSCreature_m_fCutsceneCameraMoveFactor_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bWasPlotCreature {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bWasPlotCreature_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bWasPlotCreature_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bCutsceneGhost {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bCutsceneGhost_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bCutsceneGhost_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nPerceptionRange {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nPerceptionRange_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreature_m_nPerceptionRange_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_oidLastPerception {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_oidLastPerception_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_oidLastPerception_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bLastPerceptionHeard {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bLastPerceptionHeard_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bLastPerceptionHeard_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bLastPerceptionSeen {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bLastPerceptionSeen_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bLastPerceptionSeen_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bLastPerceptionInaudible {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bLastPerceptionInaudible_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bLastPerceptionInaudible_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bLastPerceptionVanished {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bLastPerceptionVanished_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bLastPerceptionVanished_get(swigCPtr);
      return retVal;
    }

  }

  public float m_fSpotCheckDistance {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_fSpotCheckDistance_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CNWSCreature_m_fSpotCheckDistance_get(swigCPtr);
      return retVal;
    }

  }

  public float m_fMaxSpotCheckDistance {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_fMaxSpotCheckDistance_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CNWSCreature_m_fMaxSpotCheckDistance_get(swigCPtr);
      return retVal;
    }

  }

  public float m_fListenCheckDistance {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_fListenCheckDistance_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CNWSCreature_m_fListenCheckDistance_get(swigCPtr);
      return retVal;
    }

  }

  public float m_fMaxListenCheckDistance {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_fMaxListenCheckDistance_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CNWSCreature_m_fMaxListenCheckDistance_get(swigCPtr);
      return retVal;
    }

  }

  public float m_fBlindsightDistance {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_fBlindsightDistance_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CNWSCreature_m_fBlindsightDistance_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nLastHideRoll {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nLastHideRoll_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreature_m_nLastHideRoll_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nLastMoveSilentlyRoll {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nLastMoveSilentlyRoll_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreature_m_nLastMoveSilentlyRoll_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nLastSpotRoll {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nLastSpotRoll_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreature_m_nLastSpotRoll_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nLastListenRoll {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nLastListenRoll_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreature_m_nLastListenRoll_get(swigCPtr);
      return retVal;
    }

  }

  public CExoArrayListCNWVisibilityNode m_pVisibleCreaturesList {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_pVisibleCreaturesList_set(swigCPtr, CExoArrayListCNWVisibilityNode.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_m_pVisibleCreaturesList_get(swigCPtr);
      CExoArrayListCNWVisibilityNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoArrayListCNWVisibilityNode(cPtr, false);
      return ret;
    } 
  }

  public uint m_oidInvitedToPartyBy {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_oidInvitedToPartyBy_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_oidInvitedToPartyBy_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bInvitedToParty {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bInvitedToParty_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bInvitedToParty_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nInvitedToPartyDay {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nInvitedToPartyDay_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_nInvitedToPartyDay_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nInvitedToPartyTimeOfDay {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nInvitedToPartyTimeOfDay_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_nInvitedToPartyTimeOfDay_get(swigCPtr);
      return retVal;
    }

  }

  public CExoArrayListCNWSInvitationDetails m_pInvitationsOffered {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_pInvitationsOffered_set(swigCPtr, CExoArrayListCNWSInvitationDetails.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_m_pInvitationsOffered_get(swigCPtr);
      CExoArrayListCNWSInvitationDetails ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoArrayListCNWSInvitationDetails(cPtr, false);
      return ret;
    } 
  }

  public CExoArrayListCNWSInvitationDetails m_pInvitationsIgnored {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_pInvitationsIgnored_set(swigCPtr, CExoArrayListCNWSInvitationDetails.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_m_pInvitationsIgnored_get(swigCPtr);
      CExoArrayListCNWSInvitationDetails ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoArrayListCNWSInvitationDetails(cPtr, false);
      return ret;
    } 
  }

  public uint m_oidLockOnTargetObj {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_oidLockOnTargetObj_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_oidLockOnTargetObj_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nLastCounterSpellID {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nLastCounterSpellID_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_nLastCounterSpellID_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nLastCounterSpellClass {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nLastCounterSpellClass_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreature_m_nLastCounterSpellClass_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nLastCounterMetaType {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nLastCounterMetaType_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreature_m_nLastCounterMetaType_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nLastCounterDomainLevel {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nLastCounterDomainLevel_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreature_m_nLastCounterDomainLevel_get(swigCPtr);
      return retVal;
    }

  }

  public CExoArrayListUInt32 m_poidSpellIdentified {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_poidSpellIdentified_set(swigCPtr, CExoArrayListUInt32.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_m_poidSpellIdentified_get(swigCPtr);
      CExoArrayListUInt32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoArrayListUInt32(cPtr, false);
      return ret;
    } 
  }

  public uint m_oidLastSpellCastItem {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_oidLastSpellCastItem_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_oidLastSpellCastItem_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bLastSpellUnReadied {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bLastSpellUnReadied_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bLastSpellUnReadied_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bLastItemCastSpell {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bLastItemCastSpell_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bLastItemCastSpell_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nLastItemCastSpellLevel {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nLastItemCastSpellLevel_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_nLastItemCastSpellLevel_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bItemCastSpellBroadcastAOO {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bItemCastSpellBroadcastAOO_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bItemCastSpellBroadcastAOO_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_oidSittingObject {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_oidSittingObject_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_oidSittingObject_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bStealAnimationPlayed {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bStealAnimationPlayed_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bStealAnimationPlayed_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bStealAttemptDetected {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bStealAttemptDetected_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bStealAttemptDetected_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bHealAnimationPlayed {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bHealAnimationPlayed_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bHealAnimationPlayed_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bTrapAnimationPlayed {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bTrapAnimationPlayed_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bTrapAnimationPlayed_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bUnlockAnimationPlayed {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bUnlockAnimationPlayed_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bUnlockAnimationPlayed_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bLockAnimationPlayed {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bLockAnimationPlayed_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bLockAnimationPlayed_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bDropItemAnimationPlayed {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bDropItemAnimationPlayed_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bDropItemAnimationPlayed_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bPickUpItemAnimationPlayed {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bPickUpItemAnimationPlayed_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bPickUpItemAnimationPlayed_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bTauntAnimationPlayed {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bTauntAnimationPlayed_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bTauntAnimationPlayed_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nRestDurationPerHPGain {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nRestDurationPerHPGain_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_nRestDurationPerHPGain_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nRestHPToRecover {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nRestHPToRecover_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_nRestHPToRecover_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nRestDurationPerSpellLevelGain {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nRestDurationPerSpellLevelGain_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_nRestDurationPerSpellLevelGain_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nRestSpellLevelToRecover {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nRestSpellLevelToRecover_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_nRestSpellLevelToRecover_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bFacingAndAnimationDone {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bFacingAndAnimationDone_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bFacingAndAnimationDone_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bMagicalArrowsEquipped {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bMagicalArrowsEquipped_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bMagicalArrowsEquipped_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bMagicalBoltsEquipped {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bMagicalBoltsEquipped_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bMagicalBoltsEquipped_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bMagicalBulletsEquipped {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bMagicalBulletsEquipped_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bMagicalBulletsEquipped_get(swigCPtr);
      return retVal;
    }

  }

  public uint* m_pSkillTimer {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_pSkillTimer_set(swigCPtr, value);
    } 
    get {
      uint* retVal = NWNXLibPINVOKE.CNWSCreature_m_pSkillTimer_get(swigCPtr);
      return retVal;
    }

  }

  public CNWSCombatRound m_pcCombatRound {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_pcCombatRound_set(swigCPtr, CNWSCombatRound.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_m_pcCombatRound_get(swigCPtr);
      CNWSCombatRound ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSCombatRound(cPtr, false);
      return ret;
    } 
  }

  public CNWSJournal m_pJournal {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_pJournal_set(swigCPtr, CNWSJournal.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_m_pJournal_get(swigCPtr);
      CNWSJournal ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSJournal(cPtr, false);
      return ret;
    } 
  }

  public CNWSBarter m_pBarterInfo {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_pBarterInfo_set(swigCPtr, CNWSBarter.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_m_pBarterInfo_get(swigCPtr);
      CNWSBarter ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSBarter(cPtr, false);
      return ret;
    } 
  }

  public uint m_nGold {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nGold_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_nGold_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bPlayerCharacter {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bPlayerCharacter_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bPlayerCharacter_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nSoundSet {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nSoundSet_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreature_m_nSoundSet_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nFootstepType {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nFootstepType_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_nFootstepType_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nBodyBag {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nBodyBag_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreature_m_nBodyBag_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nInTransit {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nInTransit_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_nInTransit_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bPoisoned {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bPoisoned_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bPoisoned_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bDiseased {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bDiseased_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bDiseased_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bIsImmortal {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bIsImmortal_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bIsImmortal_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bNoPermDeath {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bNoPermDeath_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bNoPermDeath_get(swigCPtr);
      return retVal;
    }

  }

  public CExoString m_sDisplayName {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_sDisplayName_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_m_sDisplayName_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public int m_nUpdateDisplayNameSeq {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nUpdateDisplayNameSeq_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_nUpdateDisplayNameSeq_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nAIState {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nAIState_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreature_m_nAIState_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nAIStateAction {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nAIStateAction_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreature_m_nAIStateAction_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_oidAIStateActee {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_oidAIStateActee_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_oidAIStateActee_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nAIStateOutput {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nAIStateOutput_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreature_m_nAIStateOutput_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nActivities {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nActivities_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_nActivities_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nActivitiesLocked {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nActivitiesLocked_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_nActivitiesLocked_get(swigCPtr);
      return retVal;
    }

  }

  public float m_fMovementRateFactor {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_fMovementRateFactor_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CNWSCreature_m_fMovementRateFactor_get(swigCPtr);
      return retVal;
    }

  }

  public float m_fDriveModeMoveFactor {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_fDriveModeMoveFactor_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CNWSCreature_m_fDriveModeMoveFactor_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nWalkAnimation {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nWalkAnimation_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreature_m_nWalkAnimation_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bDriveMode {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bDriveMode_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bDriveMode_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bJumpedRecently {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bJumpedRecently_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bJumpedRecently_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_oidMaster {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_oidMaster_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_oidMaster_get(swigCPtr);
      return retVal;
    }

  }

  public CExoArrayListUInt32 m_pAssociateList {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_pAssociateList_set(swigCPtr, CExoArrayListUInt32.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_m_pAssociateList_get(swigCPtr);
      CExoArrayListUInt32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoArrayListUInt32(cPtr, false);
      return ret;
    } 
  }

  public ushort m_nAssociateType {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nAssociateType_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreature_m_nAssociateType_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nLastAssociateCommand {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nLastAssociateCommand_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_nLastAssociateCommand_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bSummonedAnimalCompanion {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bSummonedAnimalCompanion_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bSummonedAnimalCompanion_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bSummonedFamiliar {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bSummonedFamiliar_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bSummonedFamiliar_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bMasterDroppedFromServer {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bMasterDroppedFromServer_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bMasterDroppedFromServer_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nMasterDroppedCalendarDay {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nMasterDroppedCalendarDay_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_nMasterDroppedCalendarDay_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nMasterDroppedTimeOfDay {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nMasterDroppedTimeOfDay_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_nMasterDroppedTimeOfDay_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_oidCommandingPlayer {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_oidCommandingPlayer_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_oidCommandingPlayer_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nOriginalFactionId {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nOriginalFactionId_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_nOriginalFactionId_get(swigCPtr);
      return retVal;
    }

  }

  public CExoArrayListCNWSPersonalReputation m_pPersonalReputationList {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_pPersonalReputationList_set(swigCPtr, CExoArrayListCNWSPersonalReputation.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_m_pPersonalReputationList_get(swigCPtr);
      CExoArrayListCNWSPersonalReputation ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoArrayListCNWSPersonalReputation(cPtr, false);
      return ret;
    } 
  }

  public CExoArrayListInt32 m_pReputation {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_pReputation_set(swigCPtr, CExoArrayListInt32.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_m_pReputation_get(swigCPtr);
      CExoArrayListInt32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoArrayListInt32(cPtr, false);
      return ret;
    } 
  }

  public CExoArrayListCNWSPVPEntry m_pPVPList {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_pPVPList_set(swigCPtr, CExoArrayListCNWSPVPEntry.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_m_pPVPList_get(swigCPtr);
      CExoArrayListCNWSPVPEntry ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoArrayListCNWSPVPEntry(cPtr, false);
      return ret;
    } 
  }

  public uint m_oidEncounter {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_oidEncounter_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_oidEncounter_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bAlreadyRemovedFromEncounter {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bAlreadyRemovedFromEncounter_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bAlreadyRemovedFromEncounter_get(swigCPtr);
      return retVal;
    }

  }

  public CNWSInventory m_pInventory {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_pInventory_set(swigCPtr, CNWSInventory.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_m_pInventory_get(swigCPtr);
      CNWSInventory ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSInventory(cPtr, false);
      return ret;
    } 
  }

  public CItemRepository m_pcItemRepository {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_pcItemRepository_set(swigCPtr, CItemRepository.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_m_pcItemRepository_get(swigCPtr);
      CItemRepository ret = (cPtr == global::System.IntPtr.Zero) ? null : new CItemRepository(cPtr, false);
      return ret;
    } 
  }

  public ushort m_nRepositoryArrayIndex {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nRepositoryArrayIndex_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreature_m_nRepositoryArrayIndex_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nItemContainerArrayIndex {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nItemContainerArrayIndex_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreature_m_nItemContainerArrayIndex_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_oidCurrentItemContainer {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_oidCurrentItemContainer_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_oidCurrentItemContainer_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nEquippedWeight {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nEquippedWeight_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_nEquippedWeight_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bComputeWeightCarried {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bComputeWeightCarried_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bComputeWeightCarried_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nEncumbranceState {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nEncumbranceState_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_nEncumbranceState_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bLastPickupFailed {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bLastPickupFailed_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bLastPickupFailed_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nTotalWeightCarried {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nTotalWeightCarried_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_nTotalWeightCarried_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bIsPolymorphed {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bIsPolymorphed_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bIsPolymorphed_get(swigCPtr);
      return retVal;
    }

  }

  public NativeArray<uint> m_pPrePolymorphedItems {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_pPrePolymorphedItems_set(swigCPtr, value);
    } 
    get {
      global::System.IntPtr arrayPtr = NWNXLibPINVOKE.CNWSCreature_m_pPrePolymorphedItems_get(swigCPtr);
      NativeArray<uint> retVal = new NativeArray<uint>(arrayPtr, 18);

      return retVal; // uint[18]
    }

  }

  public CResRef m_refPrePolymorphPortrait {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_refPrePolymorphPortrait_set(swigCPtr, CResRef.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_m_refPrePolymorphPortrait_get(swigCPtr);
      CResRef ret = (cPtr == global::System.IntPtr.Zero) ? null : new CResRef(cPtr, false);
      return ret;
    } 
  }

  public ushort m_nPrePolymorphPortraitId {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nPrePolymorphPortraitId_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreature_m_nPrePolymorphPortraitId_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nPrePolymorphAppearanceType {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nPrePolymorphAppearanceType_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreature_m_nPrePolymorphAppearanceType_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nPrePolymorphSTR {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nPrePolymorphSTR_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreature_m_nPrePolymorphSTR_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nPrePolymorphCON {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nPrePolymorphCON_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreature_m_nPrePolymorphCON_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nPrePolymorphDEX {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nPrePolymorphDEX_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreature_m_nPrePolymorphDEX_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nPrePolymorphRacialType {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nPrePolymorphRacialType_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreature_m_nPrePolymorphRacialType_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nPrePolymorphSoundSet {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nPrePolymorphSoundSet_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreature_m_nPrePolymorphSoundSet_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nPolymorphSpellId1 {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nPolymorphSpellId1_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_nPolymorphSpellId1_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nPolymorphSpellId2 {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nPolymorphSpellId2_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_nPolymorphSpellId2_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nPolymorphSpellId3 {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nPolymorphSpellId3_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_nPolymorphSpellId3_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bPolymorphing {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bPolymorphing_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bPolymorphing_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bPolymorphLocked {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bPolymorphLocked_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bPolymorphLocked_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bPreviouslyPolymorphed {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_bPreviouslyPolymorphed_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_bPreviouslyPolymorphed_get(swigCPtr);
      return retVal;
    }

  }

  public NativeArray<uint> m_pPolymorphedItems {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_pPolymorphedItems_set(swigCPtr, value);
    } 
    get {
      global::System.IntPtr arrayPtr = NWNXLibPINVOKE.CNWSCreature_m_pPolymorphedItems_get(swigCPtr);
      NativeArray<uint> retVal = new NativeArray<uint>(arrayPtr, 18);

      return retVal; // uint[18]
    }

  }

  public CCombatInformation m_pPrePolymorphCombatInformation {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_pPrePolymorphCombatInformation_set(swigCPtr, CCombatInformation.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_m_pPrePolymorphCombatInformation_get(swigCPtr);
      CCombatInformation ret = (cPtr == global::System.IntPtr.Zero) ? null : new CCombatInformation(cPtr, false);
      return ret;
    } 
  }

  public short m_nPrePolymorphAC {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nPrePolymorphAC_set(swigCPtr, value);
    } 
    get {
      short retVal = NWNXLibPINVOKE.CNWSCreature_m_nPrePolymorphAC_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nPrePolymorphBaseAttackBonus {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nPrePolymorphBaseAttackBonus_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreature_m_nPrePolymorphBaseAttackBonus_get(swigCPtr);
      return retVal;
    }

  }

  public short m_nPrePolymorphMaxHP {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nPrePolymorphMaxHP_set(swigCPtr, value);
    } 
    get {
      short retVal = NWNXLibPINVOKE.CNWSCreature_m_nPrePolymorphMaxHP_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nPrePolymorphFortitude {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nPrePolymorphFortitude_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreature_m_nPrePolymorphFortitude_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nPrePolymorphReflex {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nPrePolymorphReflex_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreature_m_nPrePolymorphReflex_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nPrePolymorphWill {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nPrePolymorphWill_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreature_m_nPrePolymorphWill_get(swigCPtr);
      return retVal;
    }

  }

  public CNWSCreatureAppearanceInfo m_cAppearance {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_cAppearance_set(swigCPtr, CNWSCreatureAppearanceInfo.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_m_cAppearance_get(swigCPtr);
      CNWSCreatureAppearanceInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSCreatureAppearanceInfo(cPtr, false);
      return ret;
    } 
  }

  public CNWSCreatureStats m_pStats {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_pStats_set(swigCPtr, CNWSCreatureStats.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_m_pStats_get(swigCPtr);
      CNWSCreatureStats ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSCreatureStats(cPtr, false);
      return ret;
    } 
  }

  public uint m_nLastRestCalendarDay {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nLastRestCalendarDay_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_nLastRestCalendarDay_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nLastRestTimeOfDay {
    set {
      NWNXLibPINVOKE.CNWSCreature_m_nLastRestTimeOfDay_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreature_m_nLastRestTimeOfDay_get(swigCPtr);
      return retVal;
    }

  }

  public CNWSCreature(uint oidId, int bCharacterObject, int bAddObjectToArray) : this(NWNXLibPINVOKE.new_CNWSCreature__SWIG_0(oidId, bCharacterObject, bAddObjectToArray), true) {
  }

  public CNWSCreature(uint oidId, int bCharacterObject) : this(NWNXLibPINVOKE.new_CNWSCreature__SWIG_1(oidId, bCharacterObject), true) {
  }

  public CNWSCreature(uint oidId) : this(NWNXLibPINVOKE.new_CNWSCreature__SWIG_2(oidId), true) {
  }

  public CNWSCreature() : this(NWNXLibPINVOKE.new_CNWSCreature__SWIG_3(), true) {
  }

  public override void SetId(uint oidNew) {
    NWNXLibPINVOKE.CNWSCreature_SetId(swigCPtr, oidNew);
  }

  public float ComputeSpellRange(CExoString sTargetType, uint oidTarget) {
    float retVal = NWNXLibPINVOKE.CNWSCreature_ComputeSpellRange(swigCPtr, CExoString.getCPtr(sTargetType), oidTarget);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddPathfindingWaitActionToFront(ushort nGroupId) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddPathfindingWaitActionToFront(swigCPtr, nGroupId);
    return retVal;
  }

  public int AddMoveToPointActionToFront(ushort nGroupId, Vector vNewWalkPosition, uint oidNewWalkArea, uint oidObjectMovingTo, int bRunToPoint, float fRange, float fTimeout, int bClientMoving, int nClientPathNumber, int nMoveToPosition, int nMoveMode, int bStraightLine, int bCheckedActionPoint) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddMoveToPointActionToFront__SWIG_0(swigCPtr, nGroupId, Vector.getCPtr(vNewWalkPosition), oidNewWalkArea, oidObjectMovingTo, bRunToPoint, fRange, fTimeout, bClientMoving, nClientPathNumber, nMoveToPosition, nMoveMode, bStraightLine, bCheckedActionPoint);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddMoveToPointActionToFront(ushort nGroupId, Vector vNewWalkPosition, uint oidNewWalkArea, uint oidObjectMovingTo, int bRunToPoint, float fRange, float fTimeout, int bClientMoving, int nClientPathNumber, int nMoveToPosition, int nMoveMode, int bStraightLine) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddMoveToPointActionToFront__SWIG_1(swigCPtr, nGroupId, Vector.getCPtr(vNewWalkPosition), oidNewWalkArea, oidObjectMovingTo, bRunToPoint, fRange, fTimeout, bClientMoving, nClientPathNumber, nMoveToPosition, nMoveMode, bStraightLine);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddMoveToPointActionToFront(ushort nGroupId, Vector vNewWalkPosition, uint oidNewWalkArea, uint oidObjectMovingTo, int bRunToPoint, float fRange, float fTimeout, int bClientMoving, int nClientPathNumber, int nMoveToPosition, int nMoveMode) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddMoveToPointActionToFront__SWIG_2(swigCPtr, nGroupId, Vector.getCPtr(vNewWalkPosition), oidNewWalkArea, oidObjectMovingTo, bRunToPoint, fRange, fTimeout, bClientMoving, nClientPathNumber, nMoveToPosition, nMoveMode);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddMoveToPointActionToFront(ushort nGroupId, Vector vNewWalkPosition, uint oidNewWalkArea, uint oidObjectMovingTo, int bRunToPoint, float fRange, float fTimeout, int bClientMoving, int nClientPathNumber, int nMoveToPosition) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddMoveToPointActionToFront__SWIG_3(swigCPtr, nGroupId, Vector.getCPtr(vNewWalkPosition), oidNewWalkArea, oidObjectMovingTo, bRunToPoint, fRange, fTimeout, bClientMoving, nClientPathNumber, nMoveToPosition);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddMoveToPointActionToFront(ushort nGroupId, Vector vNewWalkPosition, uint oidNewWalkArea, uint oidObjectMovingTo, int bRunToPoint, float fRange, float fTimeout, int bClientMoving, int nClientPathNumber) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddMoveToPointActionToFront__SWIG_4(swigCPtr, nGroupId, Vector.getCPtr(vNewWalkPosition), oidNewWalkArea, oidObjectMovingTo, bRunToPoint, fRange, fTimeout, bClientMoving, nClientPathNumber);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddMoveToPointActionToFront(ushort nGroupId, Vector vNewWalkPosition, uint oidNewWalkArea, uint oidObjectMovingTo, int bRunToPoint, float fRange, float fTimeout, int bClientMoving) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddMoveToPointActionToFront__SWIG_5(swigCPtr, nGroupId, Vector.getCPtr(vNewWalkPosition), oidNewWalkArea, oidObjectMovingTo, bRunToPoint, fRange, fTimeout, bClientMoving);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddMoveToPointActionToFront(ushort nGroupId, Vector vNewWalkPosition, uint oidNewWalkArea, uint oidObjectMovingTo, int bRunToPoint, float fRange, float fTimeout) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddMoveToPointActionToFront__SWIG_6(swigCPtr, nGroupId, Vector.getCPtr(vNewWalkPosition), oidNewWalkArea, oidObjectMovingTo, bRunToPoint, fRange, fTimeout);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddMoveToPointActionToFront(ushort nGroupId, Vector vNewWalkPosition, uint oidNewWalkArea, uint oidObjectMovingTo, int bRunToPoint, float fRange) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddMoveToPointActionToFront__SWIG_7(swigCPtr, nGroupId, Vector.getCPtr(vNewWalkPosition), oidNewWalkArea, oidObjectMovingTo, bRunToPoint, fRange);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddMoveToPointActionToFront(ushort nGroupId, Vector vNewWalkPosition, uint oidNewWalkArea, uint oidObjectMovingTo, int bRunToPoint) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddMoveToPointActionToFront__SWIG_8(swigCPtr, nGroupId, Vector.getCPtr(vNewWalkPosition), oidNewWalkArea, oidObjectMovingTo, bRunToPoint);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddMoveToPointActionToFront(ushort nGroupId, Vector vNewWalkPosition, uint oidNewWalkArea, uint oidObjectMovingTo) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddMoveToPointActionToFront__SWIG_9(swigCPtr, nGroupId, Vector.getCPtr(vNewWalkPosition), oidNewWalkArea, oidObjectMovingTo);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddMoveToPointActionToFront(ushort nGroupId, Vector vNewWalkPosition, uint oidNewWalkArea) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddMoveToPointActionToFront__SWIG_10(swigCPtr, nGroupId, Vector.getCPtr(vNewWalkPosition), oidNewWalkArea);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddMoveToPointAction(ushort nGroupId, Vector vNewWalkPosition, uint oidNewWalkArea, uint oidObjectMovingTo, int bRunToPoint, float fRange, float fTimeout, int bClientMoving, int nClientPathNumber, int nMoveToPosition, int nMoveMode, int bStraightLine, int bCheckedActionPoint) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddMoveToPointAction__SWIG_0(swigCPtr, nGroupId, Vector.getCPtr(vNewWalkPosition), oidNewWalkArea, oidObjectMovingTo, bRunToPoint, fRange, fTimeout, bClientMoving, nClientPathNumber, nMoveToPosition, nMoveMode, bStraightLine, bCheckedActionPoint);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddMoveToPointAction(ushort nGroupId, Vector vNewWalkPosition, uint oidNewWalkArea, uint oidObjectMovingTo, int bRunToPoint, float fRange, float fTimeout, int bClientMoving, int nClientPathNumber, int nMoveToPosition, int nMoveMode, int bStraightLine) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddMoveToPointAction__SWIG_1(swigCPtr, nGroupId, Vector.getCPtr(vNewWalkPosition), oidNewWalkArea, oidObjectMovingTo, bRunToPoint, fRange, fTimeout, bClientMoving, nClientPathNumber, nMoveToPosition, nMoveMode, bStraightLine);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddMoveToPointAction(ushort nGroupId, Vector vNewWalkPosition, uint oidNewWalkArea, uint oidObjectMovingTo, int bRunToPoint, float fRange, float fTimeout, int bClientMoving, int nClientPathNumber, int nMoveToPosition, int nMoveMode) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddMoveToPointAction__SWIG_2(swigCPtr, nGroupId, Vector.getCPtr(vNewWalkPosition), oidNewWalkArea, oidObjectMovingTo, bRunToPoint, fRange, fTimeout, bClientMoving, nClientPathNumber, nMoveToPosition, nMoveMode);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddMoveToPointAction(ushort nGroupId, Vector vNewWalkPosition, uint oidNewWalkArea, uint oidObjectMovingTo, int bRunToPoint, float fRange, float fTimeout, int bClientMoving, int nClientPathNumber, int nMoveToPosition) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddMoveToPointAction__SWIG_3(swigCPtr, nGroupId, Vector.getCPtr(vNewWalkPosition), oidNewWalkArea, oidObjectMovingTo, bRunToPoint, fRange, fTimeout, bClientMoving, nClientPathNumber, nMoveToPosition);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddMoveToPointAction(ushort nGroupId, Vector vNewWalkPosition, uint oidNewWalkArea, uint oidObjectMovingTo, int bRunToPoint, float fRange, float fTimeout, int bClientMoving, int nClientPathNumber) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddMoveToPointAction__SWIG_4(swigCPtr, nGroupId, Vector.getCPtr(vNewWalkPosition), oidNewWalkArea, oidObjectMovingTo, bRunToPoint, fRange, fTimeout, bClientMoving, nClientPathNumber);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddMoveToPointAction(ushort nGroupId, Vector vNewWalkPosition, uint oidNewWalkArea, uint oidObjectMovingTo, int bRunToPoint, float fRange, float fTimeout, int bClientMoving) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddMoveToPointAction__SWIG_5(swigCPtr, nGroupId, Vector.getCPtr(vNewWalkPosition), oidNewWalkArea, oidObjectMovingTo, bRunToPoint, fRange, fTimeout, bClientMoving);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddMoveToPointAction(ushort nGroupId, Vector vNewWalkPosition, uint oidNewWalkArea, uint oidObjectMovingTo, int bRunToPoint, float fRange, float fTimeout) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddMoveToPointAction__SWIG_6(swigCPtr, nGroupId, Vector.getCPtr(vNewWalkPosition), oidNewWalkArea, oidObjectMovingTo, bRunToPoint, fRange, fTimeout);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddMoveToPointAction(ushort nGroupId, Vector vNewWalkPosition, uint oidNewWalkArea, uint oidObjectMovingTo, int bRunToPoint, float fRange) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddMoveToPointAction__SWIG_7(swigCPtr, nGroupId, Vector.getCPtr(vNewWalkPosition), oidNewWalkArea, oidObjectMovingTo, bRunToPoint, fRange);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddMoveToPointAction(ushort nGroupId, Vector vNewWalkPosition, uint oidNewWalkArea, uint oidObjectMovingTo, int bRunToPoint) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddMoveToPointAction__SWIG_8(swigCPtr, nGroupId, Vector.getCPtr(vNewWalkPosition), oidNewWalkArea, oidObjectMovingTo, bRunToPoint);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddMoveToPointAction(ushort nGroupId, Vector vNewWalkPosition, uint oidNewWalkArea, uint oidObjectMovingTo) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddMoveToPointAction__SWIG_9(swigCPtr, nGroupId, Vector.getCPtr(vNewWalkPosition), oidNewWalkArea, oidObjectMovingTo);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddMoveToPointAction(ushort nGroupId, Vector vNewWalkPosition, uint oidNewWalkArea) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddMoveToPointAction__SWIG_10(swigCPtr, nGroupId, Vector.getCPtr(vNewWalkPosition), oidNewWalkArea);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddDriveAction(ushort nGroupId, Vector vPathStart, int nBearing, int nClientPathNumber, int nDriveFlags, int nNumWayPointsToGenerate) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddDriveAction(swigCPtr, nGroupId, Vector.getCPtr(vPathStart), nBearing, nClientPathNumber, nDriveFlags, nNumWayPointsToGenerate);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddAnimalEmpathyAction(uint oidTarget) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddAnimalEmpathyAction(swigCPtr, oidTarget);
    return retVal;
  }

  public int AddAttackActions(uint oidTarget, int bPassive, int bClearAllActions, int bAddToFront) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddAttackActions__SWIG_0(swigCPtr, oidTarget, bPassive, bClearAllActions, bAddToFront);
    return retVal;
  }

  public int AddAttackActions(uint oidTarget, int bPassive, int bClearAllActions) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddAttackActions__SWIG_1(swigCPtr, oidTarget, bPassive, bClearAllActions);
    return retVal;
  }

  public int AddAttackActions(uint oidTarget, int bPassive) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddAttackActions__SWIG_2(swigCPtr, oidTarget, bPassive);
    return retVal;
  }

  public int AddAttackActions(uint oidTarget) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddAttackActions__SWIG_3(swigCPtr, oidTarget);
    return retVal;
  }

  public int AddCastSpellActions(uint nSpellId, int nMultiClass, int nDomainLevel, int nMetaType, int bSpontaneousCast, Vector vTargetLocation, uint oidTarget, int bAreaTarget, int bAddToFront, int bFake, byte nProjectilePathType, int bInstant, int bAllowPolymorphedCast, int nFeat, byte nCasterLevel) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddCastSpellActions__SWIG_0(swigCPtr, nSpellId, nMultiClass, nDomainLevel, nMetaType, bSpontaneousCast, Vector.getCPtr(vTargetLocation), oidTarget, bAreaTarget, bAddToFront, bFake, nProjectilePathType, bInstant, bAllowPolymorphedCast, nFeat, nCasterLevel);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddCastSpellActions(uint nSpellId, int nMultiClass, int nDomainLevel, int nMetaType, int bSpontaneousCast, Vector vTargetLocation, uint oidTarget, int bAreaTarget, int bAddToFront, int bFake, byte nProjectilePathType, int bInstant, int bAllowPolymorphedCast, int nFeat) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddCastSpellActions__SWIG_1(swigCPtr, nSpellId, nMultiClass, nDomainLevel, nMetaType, bSpontaneousCast, Vector.getCPtr(vTargetLocation), oidTarget, bAreaTarget, bAddToFront, bFake, nProjectilePathType, bInstant, bAllowPolymorphedCast, nFeat);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddCastSpellActions(uint nSpellId, int nMultiClass, int nDomainLevel, int nMetaType, int bSpontaneousCast, Vector vTargetLocation, uint oidTarget, int bAreaTarget, int bAddToFront, int bFake, byte nProjectilePathType, int bInstant, int bAllowPolymorphedCast) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddCastSpellActions__SWIG_2(swigCPtr, nSpellId, nMultiClass, nDomainLevel, nMetaType, bSpontaneousCast, Vector.getCPtr(vTargetLocation), oidTarget, bAreaTarget, bAddToFront, bFake, nProjectilePathType, bInstant, bAllowPolymorphedCast);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddCastSpellActions(uint nSpellId, int nMultiClass, int nDomainLevel, int nMetaType, int bSpontaneousCast, Vector vTargetLocation, uint oidTarget, int bAreaTarget, int bAddToFront, int bFake, byte nProjectilePathType, int bInstant) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddCastSpellActions__SWIG_3(swigCPtr, nSpellId, nMultiClass, nDomainLevel, nMetaType, bSpontaneousCast, Vector.getCPtr(vTargetLocation), oidTarget, bAreaTarget, bAddToFront, bFake, nProjectilePathType, bInstant);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddCastSpellActions(uint nSpellId, int nMultiClass, int nDomainLevel, int nMetaType, int bSpontaneousCast, Vector vTargetLocation, uint oidTarget, int bAreaTarget, int bAddToFront, int bFake, byte nProjectilePathType) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddCastSpellActions__SWIG_4(swigCPtr, nSpellId, nMultiClass, nDomainLevel, nMetaType, bSpontaneousCast, Vector.getCPtr(vTargetLocation), oidTarget, bAreaTarget, bAddToFront, bFake, nProjectilePathType);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddCastSpellActions(uint nSpellId, int nMultiClass, int nDomainLevel, int nMetaType, int bSpontaneousCast, Vector vTargetLocation, uint oidTarget, int bAreaTarget, int bAddToFront, int bFake) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddCastSpellActions__SWIG_5(swigCPtr, nSpellId, nMultiClass, nDomainLevel, nMetaType, bSpontaneousCast, Vector.getCPtr(vTargetLocation), oidTarget, bAreaTarget, bAddToFront, bFake);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddCastSpellActions(uint nSpellId, int nMultiClass, int nDomainLevel, int nMetaType, int bSpontaneousCast, Vector vTargetLocation, uint oidTarget, int bAreaTarget, int bAddToFront) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddCastSpellActions__SWIG_6(swigCPtr, nSpellId, nMultiClass, nDomainLevel, nMetaType, bSpontaneousCast, Vector.getCPtr(vTargetLocation), oidTarget, bAreaTarget, bAddToFront);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddCastSpellActions(uint nSpellId, int nMultiClass, int nDomainLevel, int nMetaType, int bSpontaneousCast, Vector vTargetLocation, uint oidTarget, int bAreaTarget) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddCastSpellActions__SWIG_7(swigCPtr, nSpellId, nMultiClass, nDomainLevel, nMetaType, bSpontaneousCast, Vector.getCPtr(vTargetLocation), oidTarget, bAreaTarget);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddCastSpellActions(uint nSpellId, int nMultiClass, int nDomainLevel, int nMetaType, int bSpontaneousCast, Vector vTargetLocation, uint oidTarget) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddCastSpellActions__SWIG_8(swigCPtr, nSpellId, nMultiClass, nDomainLevel, nMetaType, bSpontaneousCast, Vector.getCPtr(vTargetLocation), oidTarget);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddHealActions(uint oidTarget, uint oidItemUsed, int nActivePropertyIndex) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddHealActions__SWIG_0(swigCPtr, oidTarget, oidItemUsed, nActivePropertyIndex);
    return retVal;
  }

  public int AddHealActions(uint oidTarget, uint oidItemUsed) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddHealActions__SWIG_1(swigCPtr, oidTarget, oidItemUsed);
    return retVal;
  }

  public int AddSitActions(uint oidTarget) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddSitActions(swigCPtr, oidTarget);
    return retVal;
  }

  public int AddItemCastSpellActions(uint oidItemUsed, int nActivePropertyIndex, int nSubPropertyIndex, Vector vTargetLocation, uint oidTarget, int bAreaTarget, int bDecrementCharges) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddItemCastSpellActions__SWIG_0(swigCPtr, oidItemUsed, nActivePropertyIndex, nSubPropertyIndex, Vector.getCPtr(vTargetLocation), oidTarget, bAreaTarget, bDecrementCharges);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddItemCastSpellActions(uint oidItemUsed, int nActivePropertyIndex, int nSubPropertyIndex, Vector vTargetLocation, uint oidTarget, int bAreaTarget) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddItemCastSpellActions__SWIG_1(swigCPtr, oidItemUsed, nActivePropertyIndex, nSubPropertyIndex, Vector.getCPtr(vTargetLocation), oidTarget, bAreaTarget);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddItemCastSpellActions(uint oidItemUsed, int nActivePropertyIndex, int nSubPropertyIndex, Vector vTargetLocation, uint oidTarget) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddItemCastSpellActions__SWIG_2(swigCPtr, oidItemUsed, nActivePropertyIndex, nSubPropertyIndex, Vector.getCPtr(vTargetLocation), oidTarget);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddTrapActions(uint oidTrap, byte nAction, uint oidTargetObject, Vector vPosition, uint oidTargetArea) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddTrapActions(swigCPtr, oidTrap, nAction, oidTargetObject, Vector.getCPtr(vPosition), oidTargetArea);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddTauntActions(uint oidTarget) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddTauntActions(swigCPtr, oidTarget);
    return retVal;
  }

  public int AddCounterSpellActions(uint oidTarget) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddCounterSpellActions(swigCPtr, oidTarget);
    return retVal;
  }

  public int AddAppearActions(int nAnimation) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddAppearActions__SWIG_0(swigCPtr, nAnimation);
    return retVal;
  }

  public int AddAppearActions() {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddAppearActions__SWIG_1(swigCPtr);
    return retVal;
  }

  public int AddDisappearActions(int bReturning, int nAnimation) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddDisappearActions__SWIG_0(swigCPtr, bReturning, nAnimation);
    return retVal;
  }

  public int AddDisappearActions(int bReturning) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddDisappearActions__SWIG_1(swigCPtr, bReturning);
    return retVal;
  }

  public int AddDisappearActions() {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddDisappearActions__SWIG_2(swigCPtr);
    return retVal;
  }

  public int AddDropItemActions(uint oidItem, Vector vDropLocation, int bDropGold) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddDropItemActions(swigCPtr, oidItem, Vector.getCPtr(vDropLocation), bDropGold);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddPickUpItemActions(uint oidItem, uint oidTargetRepository, byte x, byte y) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddPickUpItemActions(swigCPtr, oidItem, oidTargetRepository, x, y);
    return retVal;
  }

  public int AddEquipItemActions(CNWSItem pItem, uint nInventorySlot, int bAddToFront, int bForceAddAction, uint oidFeedbackPlayer) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddEquipItemActions__SWIG_0(swigCPtr, CNWSItem.getCPtr(pItem), nInventorySlot, bAddToFront, bForceAddAction, oidFeedbackPlayer);
    return retVal;
  }

  public int AddEquipItemActions(CNWSItem pItem, uint nInventorySlot, int bAddToFront, int bForceAddAction) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddEquipItemActions__SWIG_1(swigCPtr, CNWSItem.getCPtr(pItem), nInventorySlot, bAddToFront, bForceAddAction);
    return retVal;
  }

  public int AddEquipItemActions(CNWSItem pItem, uint nInventorySlot, int bAddToFront) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddEquipItemActions__SWIG_2(swigCPtr, CNWSItem.getCPtr(pItem), nInventorySlot, bAddToFront);
    return retVal;
  }

  public int AddEquipItemActions(CNWSItem pItem, uint nInventorySlot) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddEquipItemActions__SWIG_3(swigCPtr, CNWSItem.getCPtr(pItem), nInventorySlot);
    return retVal;
  }

  public int RunEquip(uint oidItemToEquip, uint nInventorySlot, uint oidFeedbackPlayer) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_RunEquip__SWIG_0(swigCPtr, oidItemToEquip, nInventorySlot, oidFeedbackPlayer);
    return retVal;
  }

  public int RunEquip(uint oidItemToEquip, uint nInventorySlot) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_RunEquip__SWIG_1(swigCPtr, oidItemToEquip, nInventorySlot);
    return retVal;
  }

  public int AddUnequipActions(CNWSItem pItem, uint oidTargetRepository, byte x, byte y, int bAddToFront, int bForceAddAction, uint oidFeedbackPlayer) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddUnequipActions__SWIG_0(swigCPtr, CNWSItem.getCPtr(pItem), oidTargetRepository, x, y, bAddToFront, bForceAddAction, oidFeedbackPlayer);
    return retVal;
  }

  public int AddUnequipActions(CNWSItem pItem, uint oidTargetRepository, byte x, byte y, int bAddToFront, int bForceAddAction) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddUnequipActions__SWIG_1(swigCPtr, CNWSItem.getCPtr(pItem), oidTargetRepository, x, y, bAddToFront, bForceAddAction);
    return retVal;
  }

  public int AddUnequipActions(CNWSItem pItem, uint oidTargetRepository, byte x, byte y, int bAddToFront) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddUnequipActions__SWIG_2(swigCPtr, CNWSItem.getCPtr(pItem), oidTargetRepository, x, y, bAddToFront);
    return retVal;
  }

  public int AddUnequipActions(CNWSItem pItem, uint oidTargetRepository, byte x, byte y) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddUnequipActions__SWIG_3(swigCPtr, CNWSItem.getCPtr(pItem), oidTargetRepository, x, y);
    return retVal;
  }

  public int RunUnequip(uint oidItemToUnequip, uint oidTargetRepository, byte x, byte y, int bMergeIntoRepository, uint oidFeedbackPlayer) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_RunUnequip__SWIG_0(swigCPtr, oidItemToUnequip, oidTargetRepository, x, y, bMergeIntoRepository, oidFeedbackPlayer);
    return retVal;
  }

  public int RunUnequip(uint oidItemToUnequip, uint oidTargetRepository, byte x, byte y, int bMergeIntoRepository) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_RunUnequip__SWIG_1(swigCPtr, oidItemToUnequip, oidTargetRepository, x, y, bMergeIntoRepository);
    return retVal;
  }

  public int RunUnequip(uint oidItemToUnequip, uint oidTargetRepository, byte x, byte y) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_RunUnequip__SWIG_2(swigCPtr, oidItemToUnequip, oidTargetRepository, x, y);
    return retVal;
  }

  public int AddUseTalentOnObjectActions(int nType, int nId, uint oTarget, byte nMultiClass, uint oidItem, int nItemPropertyIndex, byte nCasterLevel, byte nMetaType) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddUseTalentOnObjectActions(swigCPtr, nType, nId, oTarget, nMultiClass, oidItem, nItemPropertyIndex, nCasterLevel, nMetaType);
    return retVal;
  }

  public int AddUseTalentAtLocationActions(int nType, int nId, Vector vTarget, byte nMultiClass, uint oidItem, int nItemPropertyIndex, byte nCasterLevel, byte nMetaType) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddUseTalentAtLocationActions(swigCPtr, nType, nId, Vector.getCPtr(vTarget), nMultiClass, oidItem, nItemPropertyIndex, nCasterLevel, nMetaType);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public byte CanEquipItem(CNWSItem pItem, uint* pEquipToSlot, int bEquipping, int bLoading, int bDisplayFeedback, CNWSPlayer pFeedbackPlayer) {
    byte retVal = NWNXLibPINVOKE.CNWSCreature_CanEquipItem__SWIG_0(swigCPtr, CNWSItem.getCPtr(pItem), pEquipToSlot, bEquipping, bLoading, bDisplayFeedback, CNWSPlayer.getCPtr(pFeedbackPlayer));
    return retVal;
  }

  public byte CanEquipItem(CNWSItem pItem, uint* pEquipToSlot, int bEquipping, int bLoading, int bDisplayFeedback) {
    byte retVal = NWNXLibPINVOKE.CNWSCreature_CanEquipItem__SWIG_1(swigCPtr, CNWSItem.getCPtr(pItem), pEquipToSlot, bEquipping, bLoading, bDisplayFeedback);
    return retVal;
  }

  public byte CanEquipItem(CNWSItem pItem, uint* pEquipToSlot, int bEquipping, int bLoading) {
    byte retVal = NWNXLibPINVOKE.CNWSCreature_CanEquipItem__SWIG_2(swigCPtr, CNWSItem.getCPtr(pItem), pEquipToSlot, bEquipping, bLoading);
    return retVal;
  }

  public byte CanEquipItem(CNWSItem pItem, uint* pEquipToSlot, int bEquipping) {
    byte retVal = NWNXLibPINVOKE.CNWSCreature_CanEquipItem__SWIG_3(swigCPtr, CNWSItem.getCPtr(pItem), pEquipToSlot, bEquipping);
    return retVal;
  }

  public byte CanEquipItem(CNWSItem pItem, uint* pEquipToSlot) {
    byte retVal = NWNXLibPINVOKE.CNWSCreature_CanEquipItem__SWIG_4(swigCPtr, CNWSItem.getCPtr(pItem), pEquipToSlot);
    return retVal;
  }

  public int CanUseItem(CNWSItem pItem, int bIgnoreIdentifiedFlag) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_CanUseItem__SWIG_0(swigCPtr, CNWSItem.getCPtr(pItem), bIgnoreIdentifiedFlag);
    return retVal;
  }

  public int CanUseItem(CNWSItem pItem) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_CanUseItem__SWIG_1(swigCPtr, CNWSItem.getCPtr(pItem));
    return retVal;
  }

  public byte CanUnEquipWeapon(CNWSItem pItem) {
    byte retVal = NWNXLibPINVOKE.CNWSCreature_CanUnEquipWeapon(swigCPtr, CNWSItem.getCPtr(pItem));
    return retVal;
  }

  public void ResetItemPossessor() {
    NWNXLibPINVOKE.CNWSCreature_ResetItemPossessor(swigCPtr);
  }

  public int AddRepositoryMoveActions(CNWSItem pItem, uint oidTargetRepository, byte x, byte y) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddRepositoryMoveActions(swigCPtr, CNWSItem.getCPtr(pItem), oidTargetRepository, x, y);
    return retVal;
  }

  public void StartGuiTimingBar(uint nTimeToRun, byte nGuiTimingEventID) {
    NWNXLibPINVOKE.CNWSCreature_StartGuiTimingBar(swigCPtr, nTimeToRun, nGuiTimingEventID);
  }

  public void StopGuiTimingBar() {
    NWNXLibPINVOKE.CNWSCreature_StopGuiTimingBar(swigCPtr);
  }

  public int AddPickPocketActions(uint oidTarget) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AddPickPocketActions(swigCPtr, oidTarget);
    return retVal;
  }

  public void AddToArea(CNWSArea pArea, float fX, float fY, float fZ, int bForceAdd, int bExecuteAreaEntryScript) {
    NWNXLibPINVOKE.CNWSCreature_AddToArea__SWIG_0(swigCPtr, CNWSArea.getCPtr(pArea), fX, fY, fZ, bForceAdd, bExecuteAreaEntryScript);
  }

  public void AddToArea(CNWSArea pArea, float fX, float fY, float fZ, int bForceAdd) {
    NWNXLibPINVOKE.CNWSCreature_AddToArea__SWIG_1(swigCPtr, CNWSArea.getCPtr(pArea), fX, fY, fZ, bForceAdd);
  }

  public void AddToArea(CNWSArea pArea, float fX, float fY, float fZ) {
    NWNXLibPINVOKE.CNWSCreature_AddToArea__SWIG_2(swigCPtr, CNWSArea.getCPtr(pArea), fX, fY, fZ);
  }

  public override void AIUpdate() {
    NWNXLibPINVOKE.CNWSCreature_AIUpdate(swigCPtr);
  }

  public void SpawnInHeartbeatPerception(int bAIUpdateLoop) {
    NWNXLibPINVOKE.CNWSCreature_SpawnInHeartbeatPerception(swigCPtr, bAIUpdateLoop);
  }

  public override CNWSCreature AsNWSCreature() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_AsNWSCreature(swigCPtr);
    CNWSCreature ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSCreature(cPtr, false);
    return ret;
  }

  public override void ResetUpdateTimes(uint nCalendarDay, uint nTimeOfDay) {
    NWNXLibPINVOKE.CNWSCreature_ResetUpdateTimes(swigCPtr, nCalendarDay, nTimeOfDay);
  }

  public override void EventHandler(uint nEventId, uint nCallerObjectId, void* pScript, uint nCalendarDay, uint nTimeOfDay) {
    NWNXLibPINVOKE.CNWSCreature_EventHandler(swigCPtr, nEventId, nCallerObjectId, (global::System.IntPtr)pScript, nCalendarDay, nTimeOfDay);
  }

  public uint GetItemCount(int bDroppableOnly) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_GetItemCount__SWIG_0(swigCPtr, bDroppableOnly);
    return retVal;
  }

  public uint GetItemCount() {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_GetItemCount__SWIG_1(swigCPtr);
    return retVal;
  }

  public int AcquireItem(void** pItem, uint oidPossessor, uint oidTargetRepository, byte x, byte y, int bOriginatingFromScript, int bDisplayFeedback) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AcquireItem__SWIG_0(swigCPtr, (global::System.IntPtr)pItem, oidPossessor, oidTargetRepository, x, y, bOriginatingFromScript, bDisplayFeedback);
    return retVal;
  }

  public int AcquireItem(void** pItem, uint oidPossessor, uint oidTargetRepository, byte x, byte y, int bOriginatingFromScript) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AcquireItem__SWIG_1(swigCPtr, (global::System.IntPtr)pItem, oidPossessor, oidTargetRepository, x, y, bOriginatingFromScript);
    return retVal;
  }

  public int AcquireItem(void** pItem, uint oidPossessor, uint oidTargetRepository, byte x, byte y) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AcquireItem__SWIG_2(swigCPtr, (global::System.IntPtr)pItem, oidPossessor, oidTargetRepository, x, y);
    return retVal;
  }

  public int AcquireItem(void** pItem, uint oidPossessor, uint oidTargetRepository, byte x) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AcquireItem__SWIG_3(swigCPtr, (global::System.IntPtr)pItem, oidPossessor, oidTargetRepository, x);
    return retVal;
  }

  public int AcquireItem(void** pItem, uint oidPossessor, uint oidTargetRepository) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AcquireItem__SWIG_4(swigCPtr, (global::System.IntPtr)pItem, oidPossessor, oidTargetRepository);
    return retVal;
  }

  public int AcquireItem(void** pItem, uint oidPossessor) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AcquireItem__SWIG_5(swigCPtr, (global::System.IntPtr)pItem, oidPossessor);
    return retVal;
  }

  public int AcquireItem(void** pItem) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_AcquireItem__SWIG_6(swigCPtr, (global::System.IntPtr)pItem);
    return retVal;
  }

  public int RemoveItem(CNWSItem pItem, int bMergeIntoRepository, int bDisplayFeedback, int bForceRemove, int bSetPossessor) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_RemoveItem__SWIG_0(swigCPtr, CNWSItem.getCPtr(pItem), bMergeIntoRepository, bDisplayFeedback, bForceRemove, bSetPossessor);
    return retVal;
  }

  public int RemoveItem(CNWSItem pItem, int bMergeIntoRepository, int bDisplayFeedback, int bForceRemove) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_RemoveItem__SWIG_1(swigCPtr, CNWSItem.getCPtr(pItem), bMergeIntoRepository, bDisplayFeedback, bForceRemove);
    return retVal;
  }

  public int RemoveItem(CNWSItem pItem, int bMergeIntoRepository, int bDisplayFeedback) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_RemoveItem__SWIG_2(swigCPtr, CNWSItem.getCPtr(pItem), bMergeIntoRepository, bDisplayFeedback);
    return retVal;
  }

  public int RemoveItem(CNWSItem pItem, int bMergeIntoRepository) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_RemoveItem__SWIG_3(swigCPtr, CNWSItem.getCPtr(pItem), bMergeIntoRepository);
    return retVal;
  }

  public int RemoveItem(CNWSItem pItem) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_RemoveItem__SWIG_4(swigCPtr, CNWSItem.getCPtr(pItem));
    return retVal;
  }

  public int RemoveItemFromRepository(CNWSItem pItem, int bRemoveFromContainers) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_RemoveItemFromRepository__SWIG_0(swigCPtr, CNWSItem.getCPtr(pItem), bRemoveFromContainers);
    return retVal;
  }

  public int RemoveItemFromRepository(CNWSItem pItem) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_RemoveItemFromRepository__SWIG_1(swigCPtr, CNWSItem.getCPtr(pItem));
    return retVal;
  }

  public void RemoveFromArea(int bReturning) {
    NWNXLibPINVOKE.CNWSCreature_RemoveFromArea__SWIG_0(swigCPtr, bReturning);
  }

  public void RemoveFromArea() {
    NWNXLibPINVOKE.CNWSCreature_RemoveFromArea__SWIG_1(swigCPtr);
  }

  public int LoadCreature(CResGFF pRes, CResStruct cCreatureStruct, int bIsSaveGame, int bIsAssociate, int bPreserveObjectIDs, int bCopyObject) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_LoadCreature__SWIG_0(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(cCreatureStruct), bIsSaveGame, bIsAssociate, bPreserveObjectIDs, bCopyObject);
    return retVal;
  }

  public int LoadCreature(CResGFF pRes, CResStruct cCreatureStruct, int bIsSaveGame, int bIsAssociate, int bPreserveObjectIDs) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_LoadCreature__SWIG_1(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(cCreatureStruct), bIsSaveGame, bIsAssociate, bPreserveObjectIDs);
    return retVal;
  }

  public int LoadCreature(CResGFF pRes, CResStruct cCreatureStruct, int bIsSaveGame, int bIsAssociate) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_LoadCreature__SWIG_2(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(cCreatureStruct), bIsSaveGame, bIsAssociate);
    return retVal;
  }

  public int LoadCreature(CResGFF pRes, CResStruct cCreatureStruct, int bIsSaveGame) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_LoadCreature__SWIG_3(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(cCreatureStruct), bIsSaveGame);
    return retVal;
  }

  public int LoadCreature(CResGFF pRes, CResStruct cCreatureStruct) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_LoadCreature__SWIG_4(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(cCreatureStruct));
    return retVal;
  }

  public int SaveCreature(CResGFF pRes, CResStruct pStruct, int bStoreAssociateList, int bUseDesiredAreaInfo, int bExportingChar, int bSaveOIDs) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_SaveCreature__SWIG_0(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pStruct), bStoreAssociateList, bUseDesiredAreaInfo, bExportingChar, bSaveOIDs);
    return retVal;
  }

  public int SaveCreature(CResGFF pRes, CResStruct pStruct, int bStoreAssociateList, int bUseDesiredAreaInfo, int bExportingChar) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_SaveCreature__SWIG_1(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pStruct), bStoreAssociateList, bUseDesiredAreaInfo, bExportingChar);
    return retVal;
  }

  public int SaveCreature(CResGFF pRes, CResStruct pStruct, int bStoreAssociateList, int bUseDesiredAreaInfo) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_SaveCreature__SWIG_2(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pStruct), bStoreAssociateList, bUseDesiredAreaInfo);
    return retVal;
  }

  public int SaveCreature(CResGFF pRes, CResStruct pStruct, int bStoreAssociateList) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_SaveCreature__SWIG_3(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pStruct), bStoreAssociateList);
    return retVal;
  }

  public int SaveCreature(CResGFF pRes, CResStruct pStruct) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_SaveCreature__SWIG_4(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pStruct));
    return retVal;
  }

  public int LoadFromTemplate(CResRef cResRef, CExoString pTag) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_LoadFromTemplate__SWIG_0(swigCPtr, CResRef.getCPtr(cResRef), CExoString.getCPtr(pTag));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int LoadFromTemplate(CResRef cResRef) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_LoadFromTemplate__SWIG_1(swigCPtr, CResRef.getCPtr(cResRef));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public void ReadScriptsFromGff(CResGFF pRes, CResStruct pGffStructWithCreatureStats) {
    NWNXLibPINVOKE.CNWSCreature_ReadScriptsFromGff(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pGffStructWithCreatureStats));
  }

  public int CheckForValidPolymorphEffectFromGFF(CResGFF pRes, CResStruct pStruct) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_CheckForValidPolymorphEffectFromGFF(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pStruct));
    return retVal;
  }

  public void ReadItemsFromGff(CResGFF pRes, CResStruct pGffStructWithCreatureStats, int bPreserveItemIDs, int bRunScripts) {
    NWNXLibPINVOKE.CNWSCreature_ReadItemsFromGff__SWIG_0(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pGffStructWithCreatureStats), bPreserveItemIDs, bRunScripts);
  }

  public void ReadItemsFromGff(CResGFF pRes, CResStruct pGffStructWithCreatureStats, int bPreserveItemIDs) {
    NWNXLibPINVOKE.CNWSCreature_ReadItemsFromGff__SWIG_1(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pGffStructWithCreatureStats), bPreserveItemIDs);
  }

  public void ReadItemsFromGff(CResGFF pRes, CResStruct pGffStructWithCreatureStats) {
    NWNXLibPINVOKE.CNWSCreature_ReadItemsFromGff__SWIG_2(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pGffStructWithCreatureStats));
  }

  public int CalculateSpellSaveDC(int nSpellId) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_CalculateSpellSaveDC(swigCPtr, nSpellId);
    return retVal;
  }

  public int TestAIStateAsMode(int nAIStateAction) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_TestAIStateAsMode(swigCPtr, nAIStateAction);
    return retVal;
  }

  public void ComputeAIState() {
    NWNXLibPINVOKE.CNWSCreature_ComputeAIState(swigCPtr);
  }

  public float GetMovementRateFactor() {
    float retVal = NWNXLibPINVOKE.CNWSCreature_GetMovementRateFactor(swigCPtr);
    return retVal;
  }

  public void SetMovementRateFactor(float fValue) {
    NWNXLibPINVOKE.CNWSCreature_SetMovementRateFactor(swigCPtr, fValue);
  }

  public float GetWalkRate() {
    float retVal = NWNXLibPINVOKE.CNWSCreature_GetWalkRate(swigCPtr);
    return retVal;
  }

  public float GetRunRate() {
    float retVal = NWNXLibPINVOKE.CNWSCreature_GetRunRate(swigCPtr);
    return retVal;
  }

  public int GetUseMonkAbilities() {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetUseMonkAbilities(swigCPtr);
    return retVal;
  }

  public int UseSkill(byte nSkill, byte nSubSkill, uint oidTarget, Vector vTargetPosition, uint oidArea, uint oidUsedItem, int nActivePropertyIndex) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_UseSkill__SWIG_0(swigCPtr, nSkill, nSubSkill, oidTarget, Vector.getCPtr(vTargetPosition), oidArea, oidUsedItem, nActivePropertyIndex);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int UseSkill(byte nSkill, byte nSubSkill, uint oidTarget, Vector vTargetPosition, uint oidArea, uint oidUsedItem) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_UseSkill__SWIG_1(swigCPtr, nSkill, nSubSkill, oidTarget, Vector.getCPtr(vTargetPosition), oidArea, oidUsedItem);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int UseSkill(byte nSkill, byte nSubSkill, uint oidTarget, Vector vTargetPosition, uint oidArea) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_UseSkill__SWIG_2(swigCPtr, nSkill, nSubSkill, oidTarget, Vector.getCPtr(vTargetPosition), oidArea);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int UseFeat(ushort nFeat, ushort nSubFeat, uint oidTarget, uint oidArea, Vector pvTarget) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_UseFeat__SWIG_0(swigCPtr, nFeat, nSubFeat, oidTarget, oidArea, Vector.getCPtr(pvTarget));
    return retVal;
  }

  public int UseFeat(ushort nFeat, ushort nSubFeat, uint oidTarget, uint oidArea) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_UseFeat__SWIG_1(swigCPtr, nFeat, nSubFeat, oidTarget, oidArea);
    return retVal;
  }

  public int UseItem(uint oidItem, byte nActivePropertyIndex, byte nSubPropertyIndex, uint oidTarget, Vector vTargetPosition, uint oidArea, int bUseCharges) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_UseItem__SWIG_0(swigCPtr, oidItem, nActivePropertyIndex, nSubPropertyIndex, oidTarget, Vector.getCPtr(vTargetPosition), oidArea, bUseCharges);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int UseItem(uint oidItem, byte nActivePropertyIndex, byte nSubPropertyIndex, uint oidTarget, Vector vTargetPosition, uint oidArea) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_UseItem__SWIG_1(swigCPtr, oidItem, nActivePropertyIndex, nSubPropertyIndex, oidTarget, Vector.getCPtr(vTargetPosition), oidArea);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int ToggleMode(byte nMode) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_ToggleMode(swigCPtr, nMode);
    return retVal;
  }

  public int GetMode(byte nMode) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetMode(swigCPtr, nMode);
    return retVal;
  }

  public void SetMode(byte nMode, int bSet) {
    NWNXLibPINVOKE.CNWSCreature_SetMode(swigCPtr, nMode, bSet);
  }

  public void RestoreItemProperties() {
    NWNXLibPINVOKE.CNWSCreature_RestoreItemProperties(swigCPtr);
  }

  public void RemoveSpellActionFromRound() {
    NWNXLibPINVOKE.CNWSCreature_RemoveSpellActionFromRound(swigCPtr);
  }

  public void ProcessPendingCombatActions() {
    NWNXLibPINVOKE.CNWSCreature_ProcessPendingCombatActions(swigCPtr);
  }

  public int GetFlatFooted() {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetFlatFooted(swigCPtr);
    return retVal;
  }

  public int GetFlanked(CNWSCreature pTestCreature) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetFlanked(swigCPtr, CNWSCreature.getCPtr(pTestCreature));
    return retVal;
  }

  public int GetIsInMelee() {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetIsInMelee(swigCPtr);
    return retVal;
  }

  public int GetAttackResultHit(CNWSCombatAttackData pAttackData) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetAttackResultHit(swigCPtr, CNWSCombatAttackData.getCPtr(pAttackData));
    return retVal;
  }

  public void DoCombatStep(byte nStepType, int nAnimationTime, uint oidTargetObject) {
    NWNXLibPINVOKE.CNWSCreature_DoCombatStep(swigCPtr, nStepType, nAnimationTime, oidTargetObject);
  }

  public short GetArmorClass() {
    short retVal = NWNXLibPINVOKE.CNWSCreature_GetArmorClass(swigCPtr);
    return retVal;
  }

  public override short GetMaxHitPoints(int bIncludeToughness) {
    short retVal = NWNXLibPINVOKE.CNWSCreature_GetMaxHitPoints__SWIG_0(swigCPtr, bIncludeToughness);
    return retVal;
  }

  public override short GetMaxHitPoints() {
    short retVal = NWNXLibPINVOKE.CNWSCreature_GetMaxHitPoints__SWIG_1(swigCPtr);
    return retVal;
  }

  public override void DoDamage(int nDamage) {
    NWNXLibPINVOKE.CNWSCreature_DoDamage(swigCPtr, nDamage);
  }

  public byte CalculateDamagePower(CNWSObject pTarget, int bOffHand) {
    byte retVal = NWNXLibPINVOKE.CNWSCreature_CalculateDamagePower__SWIG_0(swigCPtr, CNWSObject.getCPtr(pTarget), bOffHand);
    return retVal;
  }

  public byte CalculateDamagePower(CNWSObject pTarget) {
    byte retVal = NWNXLibPINVOKE.CNWSCreature_CalculateDamagePower__SWIG_1(swigCPtr, CNWSObject.getCPtr(pTarget));
    return retVal;
  }

  public uint GetDamageFlags() {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_GetDamageFlags(swigCPtr);
    return retVal;
  }

  public float MaxAttackRange(uint oidTarget, int bBaseValue, int bPassiveRange) {
    float retVal = NWNXLibPINVOKE.CNWSCreature_MaxAttackRange__SWIG_0(swigCPtr, oidTarget, bBaseValue, bPassiveRange);
    return retVal;
  }

  public float MaxAttackRange(uint oidTarget, int bBaseValue) {
    float retVal = NWNXLibPINVOKE.CNWSCreature_MaxAttackRange__SWIG_1(swigCPtr, oidTarget, bBaseValue);
    return retVal;
  }

  public float MaxAttackRange(uint oidTarget) {
    float retVal = NWNXLibPINVOKE.CNWSCreature_MaxAttackRange__SWIG_2(swigCPtr, oidTarget);
    return retVal;
  }

  public float DesiredAttackRange(uint oidTarget, int bBaseValue) {
    float retVal = NWNXLibPINVOKE.CNWSCreature_DesiredAttackRange__SWIG_0(swigCPtr, oidTarget, bBaseValue);
    return retVal;
  }

  public float DesiredAttackRange(uint oidTarget) {
    float retVal = NWNXLibPINVOKE.CNWSCreature_DesiredAttackRange__SWIG_1(swigCPtr, oidTarget);
    return retVal;
  }

  public byte GetDetectMode() {
    byte retVal = NWNXLibPINVOKE.CNWSCreature_GetDetectMode(swigCPtr);
    return retVal;
  }

  public void SetDetectMode(byte nDetectMode) {
    NWNXLibPINVOKE.CNWSCreature_SetDetectMode(swigCPtr, nDetectMode);
  }

  public void SetStealthMode(byte nHideMode) {
    NWNXLibPINVOKE.CNWSCreature_SetStealthMode(swigCPtr, nHideMode);
  }

  public void SetDefensiveCastingMode(byte nDefensiveCastingMode) {
    NWNXLibPINVOKE.CNWSCreature_SetDefensiveCastingMode(swigCPtr, nDefensiveCastingMode);
  }

  public void SetCombatMode(byte nMode, int bForceMode) {
    NWNXLibPINVOKE.CNWSCreature_SetCombatMode__SWIG_0(swigCPtr, nMode, bForceMode);
  }

  public void SetCombatMode(byte nMode) {
    NWNXLibPINVOKE.CNWSCreature_SetCombatMode__SWIG_1(swigCPtr, nMode);
  }

  public int GetSpellOrHealActionQueued() {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetSpellOrHealActionQueued(swigCPtr);
    return retVal;
  }

  public int GetHasInvisbilityEffectApplied() {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetHasInvisbilityEffectApplied(swigCPtr);
    return retVal;
  }

  public void ComputeModifiedMovementRate() {
    NWNXLibPINVOKE.CNWSCreature_ComputeModifiedMovementRate(swigCPtr);
  }

  public int GetTotalEffectBonus(byte nEffectBonusType, CNWSObject pObject, int bElementalDamage, int bForceMax, byte nSaveType, byte nSpecificType, byte nSkill, byte nAbilityScore, int bOffHand) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetTotalEffectBonus__SWIG_0(swigCPtr, nEffectBonusType, CNWSObject.getCPtr(pObject), bElementalDamage, bForceMax, nSaveType, nSpecificType, nSkill, nAbilityScore, bOffHand);
    return retVal;
  }

  public int GetTotalEffectBonus(byte nEffectBonusType, CNWSObject pObject, int bElementalDamage, int bForceMax, byte nSaveType, byte nSpecificType, byte nSkill, byte nAbilityScore) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetTotalEffectBonus__SWIG_1(swigCPtr, nEffectBonusType, CNWSObject.getCPtr(pObject), bElementalDamage, bForceMax, nSaveType, nSpecificType, nSkill, nAbilityScore);
    return retVal;
  }

  public int GetTotalEffectBonus(byte nEffectBonusType, CNWSObject pObject, int bElementalDamage, int bForceMax, byte nSaveType, byte nSpecificType, byte nSkill) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetTotalEffectBonus__SWIG_2(swigCPtr, nEffectBonusType, CNWSObject.getCPtr(pObject), bElementalDamage, bForceMax, nSaveType, nSpecificType, nSkill);
    return retVal;
  }

  public int GetTotalEffectBonus(byte nEffectBonusType, CNWSObject pObject, int bElementalDamage, int bForceMax, byte nSaveType, byte nSpecificType) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetTotalEffectBonus__SWIG_3(swigCPtr, nEffectBonusType, CNWSObject.getCPtr(pObject), bElementalDamage, bForceMax, nSaveType, nSpecificType);
    return retVal;
  }

  public int GetTotalEffectBonus(byte nEffectBonusType, CNWSObject pObject, int bElementalDamage, int bForceMax, byte nSaveType) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetTotalEffectBonus__SWIG_4(swigCPtr, nEffectBonusType, CNWSObject.getCPtr(pObject), bElementalDamage, bForceMax, nSaveType);
    return retVal;
  }

  public int GetTotalEffectBonus(byte nEffectBonusType, CNWSObject pObject, int bElementalDamage, int bForceMax) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetTotalEffectBonus__SWIG_5(swigCPtr, nEffectBonusType, CNWSObject.getCPtr(pObject), bElementalDamage, bForceMax);
    return retVal;
  }

  public int GetTotalEffectBonus(byte nEffectBonusType, CNWSObject pObject, int bElementalDamage) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetTotalEffectBonus__SWIG_6(swigCPtr, nEffectBonusType, CNWSObject.getCPtr(pObject), bElementalDamage);
    return retVal;
  }

  public int GetTotalEffectBonus(byte nEffectBonusType, CNWSObject pObject) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetTotalEffectBonus__SWIG_7(swigCPtr, nEffectBonusType, CNWSObject.getCPtr(pObject));
    return retVal;
  }

  public CExoArrayListCGameEffectPtr GetFilteredEffectList(byte nEffectListType) {
    CExoArrayListCGameEffectPtr ret = new CExoArrayListCGameEffectPtr(NWNXLibPINVOKE.CNWSCreature_GetFilteredEffectList(swigCPtr, nEffectListType), true);
    return ret;
  }

  public int GetWeaponPower(CNWSObject pObject, int bOffHand) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetWeaponPower(swigCPtr, CNWSObject.getCPtr(pObject), bOffHand);
    return retVal;
  }

  public void SendFeedbackMessage(ushort nFeedbackID, CNWCCMessageData pMessageData, CNWSPlayer pFeedbackPlayer) {
    NWNXLibPINVOKE.CNWSCreature_SendFeedbackMessage__SWIG_0(swigCPtr, nFeedbackID, CNWCCMessageData.getCPtr(pMessageData), CNWSPlayer.getCPtr(pFeedbackPlayer));
  }

  public void SendFeedbackMessage(ushort nFeedbackID, CNWCCMessageData pMessageData) {
    NWNXLibPINVOKE.CNWSCreature_SendFeedbackMessage__SWIG_1(swigCPtr, nFeedbackID, CNWCCMessageData.getCPtr(pMessageData));
  }

  public void SendFeedbackMessage(ushort nFeedbackID) {
    NWNXLibPINVOKE.CNWSCreature_SendFeedbackMessage__SWIG_2(swigCPtr, nFeedbackID);
  }

  public void SendFeedbackString(CExoString sFeedbackMessage, CNWSPlayer pFeedbackPlayer) {
    NWNXLibPINVOKE.CNWSCreature_SendFeedbackString__SWIG_0(swigCPtr, CExoString.getCPtr(sFeedbackMessage), CNWSPlayer.getCPtr(pFeedbackPlayer));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SendFeedbackString(CExoString sFeedbackMessage) {
    NWNXLibPINVOKE.CNWSCreature_SendFeedbackString__SWIG_1(swigCPtr, CExoString.getCPtr(sFeedbackMessage));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int EquipItem(uint nInventorySlot, CNWSItem pItem, int bApplyPropertyEffects, int bLoadingItem, int bRunEquipEvent) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_EquipItem__SWIG_0(swigCPtr, nInventorySlot, CNWSItem.getCPtr(pItem), bApplyPropertyEffects, bLoadingItem, bRunEquipEvent);
    return retVal;
  }

  public int EquipItem(uint nInventorySlot, CNWSItem pItem, int bApplyPropertyEffects, int bLoadingItem) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_EquipItem__SWIG_1(swigCPtr, nInventorySlot, CNWSItem.getCPtr(pItem), bApplyPropertyEffects, bLoadingItem);
    return retVal;
  }

  public int EquipItem(uint nInventorySlot, CNWSItem pItem, int bApplyPropertyEffects) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_EquipItem__SWIG_2(swigCPtr, nInventorySlot, CNWSItem.getCPtr(pItem), bApplyPropertyEffects);
    return retVal;
  }

  public int EquipItem(uint nInventorySlot, CNWSItem pItem) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_EquipItem__SWIG_3(swigCPtr, nInventorySlot, CNWSItem.getCPtr(pItem));
    return retVal;
  }

  public int UnequipItem(CNWSItem pItem, int bUnequipWhilePolymorphed, int bRunUnequipEvent) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_UnequipItem__SWIG_0(swigCPtr, CNWSItem.getCPtr(pItem), bUnequipWhilePolymorphed, bRunUnequipEvent);
    return retVal;
  }

  public int UnequipItem(CNWSItem pItem, int bUnequipWhilePolymorphed) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_UnequipItem__SWIG_1(swigCPtr, CNWSItem.getCPtr(pItem), bUnequipWhilePolymorphed);
    return retVal;
  }

  public int UnequipItem(CNWSItem pItem) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_UnequipItem__SWIG_2(swigCPtr, CNWSItem.getCPtr(pItem));
    return retVal;
  }

  public void DestroyEquippedItems() {
    NWNXLibPINVOKE.CNWSCreature_DestroyEquippedItems(swigCPtr);
  }

  public override void SetLockOrientationToObject(uint oidLockOnObj) {
    NWNXLibPINVOKE.CNWSCreature_SetLockOrientationToObject(swigCPtr, oidLockOnObj);
  }

  public int LearnScroll(uint oidScrollToLearn) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_LearnScroll(swigCPtr, oidScrollToLearn);
    return retVal;
  }

  public void ActionManager(uint nActionTypeToAdd) {
    NWNXLibPINVOKE.CNWSCreature_ActionManager(swigCPtr, nActionTypeToAdd);
  }

  public void ActivityManager(uint nActionTypePerforming) {
    NWNXLibPINVOKE.CNWSCreature_ActivityManager(swigCPtr, nActionTypePerforming);
  }

  public int GetActivity(int nActivity) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetActivity(swigCPtr, nActivity);
    return retVal;
  }

  public void SetActivity(int nActivity, int bValue) {
    NWNXLibPINVOKE.CNWSCreature_SetActivity(swigCPtr, nActivity, bValue);
  }

  public void ClearActivities(int nActivityTypesToRemove) {
    NWNXLibPINVOKE.CNWSCreature_ClearActivities(swigCPtr, nActivityTypesToRemove);
  }

  public byte SavingThrowRoll(byte nType, ushort nDifficultyClass, byte nSaveType, uint oidSaveVersus, int bPrint, ushort nFeat, int bQueueFeedback) {
    byte retVal = NWNXLibPINVOKE.CNWSCreature_SavingThrowRoll__SWIG_0(swigCPtr, nType, nDifficultyClass, nSaveType, oidSaveVersus, bPrint, nFeat, bQueueFeedback);
    return retVal;
  }

  public byte SavingThrowRoll(byte nType, ushort nDifficultyClass, byte nSaveType, uint oidSaveVersus, int bPrint, ushort nFeat) {
    byte retVal = NWNXLibPINVOKE.CNWSCreature_SavingThrowRoll__SWIG_1(swigCPtr, nType, nDifficultyClass, nSaveType, oidSaveVersus, bPrint, nFeat);
    return retVal;
  }

  public byte SavingThrowRoll(byte nType, ushort nDifficultyClass, byte nSaveType, uint oidSaveVersus, int bPrint) {
    byte retVal = NWNXLibPINVOKE.CNWSCreature_SavingThrowRoll__SWIG_2(swigCPtr, nType, nDifficultyClass, nSaveType, oidSaveVersus, bPrint);
    return retVal;
  }

  public byte SavingThrowRoll(byte nType, ushort nDifficultyClass, byte nSaveType, uint oidSaveVersus) {
    byte retVal = NWNXLibPINVOKE.CNWSCreature_SavingThrowRoll__SWIG_3(swigCPtr, nType, nDifficultyClass, nSaveType, oidSaveVersus);
    return retVal;
  }

  public byte SavingThrowRoll(byte nType, ushort nDifficultyClass, byte nSaveType) {
    byte retVal = NWNXLibPINVOKE.CNWSCreature_SavingThrowRoll__SWIG_4(swigCPtr, nType, nDifficultyClass, nSaveType);
    return retVal;
  }

  public byte SavingThrowRoll(byte nType, ushort nDifficultyClass) {
    byte retVal = NWNXLibPINVOKE.CNWSCreature_SavingThrowRoll__SWIG_5(swigCPtr, nType, nDifficultyClass);
    return retVal;
  }

  public int GetIsInUseRange(uint oidUse, float fAdditionalRange, int bIgnoreTransparentDoors) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetIsInUseRange__SWIG_0(swigCPtr, oidUse, fAdditionalRange, bIgnoreTransparentDoors);
    return retVal;
  }

  public int GetIsInUseRange(uint oidUse, float fAdditionalRange) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetIsInUseRange__SWIG_1(swigCPtr, oidUse, fAdditionalRange);
    return retVal;
  }

  public int GetIsInUseRange(uint oidUse) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetIsInUseRange__SWIG_2(swigCPtr, oidUse);
    return retVal;
  }

  public int GetUseRange(uint oidUse, Vector vUsePoint, float* fMoveRange) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetUseRange(swigCPtr, oidUse, Vector.getCPtr(vUsePoint), (global::System.IntPtr)fMoveRange);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public override void SetAnimation(int nAnimation) {
    NWNXLibPINVOKE.CNWSCreature_SetAnimation(swigCPtr, nAnimation);
  }

  public int GetInvisible(CNWSObject pVersus, int bSendFeedback) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetInvisible__SWIG_0(swigCPtr, CNWSObject.getCPtr(pVersus), bSendFeedback);
    return retVal;
  }

  public int GetInvisible(CNWSObject pVersus) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetInvisible__SWIG_1(swigCPtr, CNWSObject.getCPtr(pVersus));
    return retVal;
  }

  public int GetBlind() {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetBlind(swigCPtr);
    return retVal;
  }

  public void StoreCutsceneVars() {
    NWNXLibPINVOKE.CNWSCreature_StoreCutsceneVars(swigCPtr);
  }

  public void RestoreCutsceneVars() {
    NWNXLibPINVOKE.CNWSCreature_RestoreCutsceneVars(swigCPtr);
  }

  public void RemoveCombatInvisibilityEffects() {
    NWNXLibPINVOKE.CNWSCreature_RemoveCombatInvisibilityEffects(swigCPtr);
  }

  public void SetInvitedToParty(int bInvitedToParty) {
    NWNXLibPINVOKE.CNWSCreature_SetInvitedToParty(swigCPtr, bInvitedToParty);
  }

  public void SetCombatState(int bState) {
    NWNXLibPINVOKE.CNWSCreature_SetCombatState(swigCPtr, bState);
  }

  public void BroadcastCombatStateToParty() {
    NWNXLibPINVOKE.CNWSCreature_BroadcastCombatStateToParty(swigCPtr);
  }

  public void BroadcastAttackDataToParty(CNWCCMessageData pMessageData, CNWSCombatAttackData pAttackData, CNWSCreature pOpponent) {
    NWNXLibPINVOKE.CNWSCreature_BroadcastAttackDataToParty__SWIG_0(swigCPtr, CNWCCMessageData.getCPtr(pMessageData), CNWSCombatAttackData.getCPtr(pAttackData), CNWSCreature.getCPtr(pOpponent));
  }

  public void BroadcastAttackDataToParty(CNWCCMessageData pMessageData, CNWSCombatAttackData pAttackData) {
    NWNXLibPINVOKE.CNWSCreature_BroadcastAttackDataToParty__SWIG_1(swigCPtr, CNWCCMessageData.getCPtr(pMessageData), CNWSCombatAttackData.getCPtr(pAttackData));
  }

  public void BroadcastDamageDataToParty(CNWCCMessageData pMessageData, CNWSCreature pOpponent) {
    NWNXLibPINVOKE.CNWSCreature_BroadcastDamageDataToParty__SWIG_0(swigCPtr, CNWCCMessageData.getCPtr(pMessageData), CNWSCreature.getCPtr(pOpponent));
  }

  public void BroadcastDamageDataToParty(CNWCCMessageData pMessageData) {
    NWNXLibPINVOKE.CNWSCreature_BroadcastDamageDataToParty__SWIG_1(swigCPtr, CNWCCMessageData.getCPtr(pMessageData));
  }

  public void BroadcastDeathDataToParty(CNWCCMessageData pMessageData, CNWSCreature pOpponent) {
    NWNXLibPINVOKE.CNWSCreature_BroadcastDeathDataToParty__SWIG_0(swigCPtr, CNWCCMessageData.getCPtr(pMessageData), CNWSCreature.getCPtr(pOpponent));
  }

  public void BroadcastDeathDataToParty(CNWCCMessageData pMessageData) {
    NWNXLibPINVOKE.CNWSCreature_BroadcastDeathDataToParty__SWIG_1(swigCPtr, CNWCCMessageData.getCPtr(pMessageData));
  }

  public void BroadcastSkillData(CNWCCMessageData pMessageData) {
    NWNXLibPINVOKE.CNWSCreature_BroadcastSkillData(swigCPtr, CNWCCMessageData.getCPtr(pMessageData));
  }

  public void BroadcastSavingThrowData(CNWCCMessageData pMessageData) {
    NWNXLibPINVOKE.CNWSCreature_BroadcastSavingThrowData(swigCPtr, CNWCCMessageData.getCPtr(pMessageData));
  }

  public void BroadcastAssociateCommand(int nAssociateCommand) {
    NWNXLibPINVOKE.CNWSCreature_BroadcastAssociateCommand(swigCPtr, nAssociateCommand);
  }

  public void SetBroadcastedAOOTo(int bValue) {
    NWNXLibPINVOKE.CNWSCreature_SetBroadcastedAOOTo(swigCPtr, bValue);
  }

  public override void BroadcastFloatyData(CNWCCMessageData pMessageData) {
    NWNXLibPINVOKE.CNWSCreature_BroadcastFloatyData(swigCPtr, CNWCCMessageData.getCPtr(pMessageData));
  }

  public void DisplayFloatyDataToSelf(uint nStrRef) {
    NWNXLibPINVOKE.CNWSCreature_DisplayFloatyDataToSelf(swigCPtr, nStrRef);
  }

  public void BroadcastSpellCast(uint nSpellID, byte nMultiClass, ushort nFeat) {
    NWNXLibPINVOKE.CNWSCreature_BroadcastSpellCast(swigCPtr, nSpellID, nMultiClass, nFeat);
  }

  public int GetNumCounterSpellingCreatures(uint nSpellID) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetNumCounterSpellingCreatures(swigCPtr, nSpellID);
    return retVal;
  }

  public void ValidateCounterSpellData(uint nSpellID, byte nMultiClass, byte nSpellLevel) {
    NWNXLibPINVOKE.CNWSCreature_ValidateCounterSpellData(swigCPtr, nSpellID, nMultiClass, nSpellLevel);
  }

  public void RemoveCounterspeller(uint oCreature) {
    NWNXLibPINVOKE.CNWSCreature_RemoveCounterspeller(swigCPtr, oCreature);
  }

  public void BroadcastBattleCry() {
    NWNXLibPINVOKE.CNWSCreature_BroadcastBattleCry(swigCPtr);
  }

  public void BroadcastVoiceChat(byte nVoiceChatID) {
    NWNXLibPINVOKE.CNWSCreature_BroadcastVoiceChat(swigCPtr, nVoiceChatID);
  }

  public void BroadcastAttackOfOpportunity(uint oidSingleTarget, int bMovement) {
    NWNXLibPINVOKE.CNWSCreature_BroadcastAttackOfOpportunity__SWIG_0(swigCPtr, oidSingleTarget, bMovement);
  }

  public void BroadcastAttackOfOpportunity(uint oidSingleTarget) {
    NWNXLibPINVOKE.CNWSCreature_BroadcastAttackOfOpportunity__SWIG_1(swigCPtr, oidSingleTarget);
  }

  public void BroadcastAttackOfOpportunity() {
    NWNXLibPINVOKE.CNWSCreature_BroadcastAttackOfOpportunity__SWIG_2(swigCPtr);
  }

  public void RecomputeAmbientAnimationState() {
    NWNXLibPINVOKE.CNWSCreature_RecomputeAmbientAnimationState(swigCPtr);
  }

  public void AddAssociate(uint oidAssociate, ushort nAssociateType) {
    NWNXLibPINVOKE.CNWSCreature_AddAssociate(swigCPtr, oidAssociate, nAssociateType);
  }

  public void ReceiveAssociateCommand(int nCommandId) {
    NWNXLibPINVOKE.CNWSCreature_ReceiveAssociateCommand(swigCPtr, nCommandId);
  }

  public void RelayQuickChatCommandToAssociates(ushort nSoundSetSoundID) {
    NWNXLibPINVOKE.CNWSCreature_RelayQuickChatCommandToAssociates(swigCPtr, nSoundSetSoundID);
  }

  public void RemoveAssociate(uint oidAssociate) {
    NWNXLibPINVOKE.CNWSCreature_RemoveAssociate(swigCPtr, oidAssociate);
  }

  public void RemoveAllAssociates() {
    NWNXLibPINVOKE.CNWSCreature_RemoveAllAssociates(swigCPtr);
  }

  public void UnsummonMyself() {
    NWNXLibPINVOKE.CNWSCreature_UnsummonMyself(swigCPtr);
  }

  public void SetPCDominatedScripts() {
    NWNXLibPINVOKE.CNWSCreature_SetPCDominatedScripts(swigCPtr);
  }

  public void ResetPCDominatedScripts() {
    NWNXLibPINVOKE.CNWSCreature_ResetPCDominatedScripts(swigCPtr);
  }

  public void RemoveDomination() {
    NWNXLibPINVOKE.CNWSCreature_RemoveDomination(swigCPtr);
  }

  public void ProcessMasterDeathForAssociates() {
    NWNXLibPINVOKE.CNWSCreature_ProcessMasterDeathForAssociates(swigCPtr);
  }

  public void BringAssociatesToNewFaction(int nFactionId) {
    NWNXLibPINVOKE.CNWSCreature_BringAssociatesToNewFaction(swigCPtr, nFactionId);
  }

  public void SetAssociateListenPatterns() {
    NWNXLibPINVOKE.CNWSCreature_SetAssociateListenPatterns(swigCPtr);
  }

  public void SetAssociateType(ushort nAssociateType) {
    NWNXLibPINVOKE.CNWSCreature_SetAssociateType(swigCPtr, nAssociateType);
  }

  public uint GetAssociateId(ushort nAssociateType, int nNth) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_GetAssociateId__SWIG_0(swigCPtr, nAssociateType, nNth);
    return retVal;
  }

  public uint GetAssociateId(ushort nAssociateType) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_GetAssociateId__SWIG_1(swigCPtr, nAssociateType);
    return retVal;
  }

  public int GetNumAssociatesOfType(ushort nAssociateType) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetNumAssociatesOfType(swigCPtr, nAssociateType);
    return retVal;
  }

  public void NotifyAssociateActionToggle(int nMode) {
    NWNXLibPINVOKE.CNWSCreature_NotifyAssociateActionToggle(swigCPtr, nMode);
  }

  public int GetHenchmanIndex(uint oidAssociate) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetHenchmanIndex(swigCPtr, oidAssociate);
    return retVal;
  }

  public void SummonAnimalCompanion() {
    NWNXLibPINVOKE.CNWSCreature_SummonAnimalCompanion(swigCPtr);
  }

  public void SummonFamiliar() {
    NWNXLibPINVOKE.CNWSCreature_SummonFamiliar(swigCPtr);
  }

  public void PossessFamiliar() {
    NWNXLibPINVOKE.CNWSCreature_PossessFamiliar(swigCPtr);
  }

  public void UnpossessFamiliar() {
    NWNXLibPINVOKE.CNWSCreature_UnpossessFamiliar(swigCPtr);
  }

  public void PossessCreature(uint target) {
    NWNXLibPINVOKE.CNWSCreature_PossessCreature(swigCPtr, target);
  }

  public void UnpossessCreature() {
    NWNXLibPINVOKE.CNWSCreature_UnpossessCreature(swigCPtr);
  }

  public void PossessCreatureDM(uint target, byte possessType) {
    NWNXLibPINVOKE.CNWSCreature_PossessCreatureDM(swigCPtr, target, possessType);
  }

  public void UnpossessCreatureDM() {
    NWNXLibPINVOKE.CNWSCreature_UnpossessCreatureDM(swigCPtr);
  }

  public void DMClearScripts(int override_) {
    NWNXLibPINVOKE.CNWSCreature_DMClearScripts__SWIG_0(swigCPtr, override_);
  }

  public void DMClearScripts() {
    NWNXLibPINVOKE.CNWSCreature_DMClearScripts__SWIG_1(swigCPtr);
  }

  public void DMResetClearedScripts(int override_) {
    NWNXLibPINVOKE.CNWSCreature_DMResetClearedScripts__SWIG_0(swigCPtr, override_);
  }

  public void DMResetClearedScripts() {
    NWNXLibPINVOKE.CNWSCreature_DMResetClearedScripts__SWIG_1(swigCPtr);
  }

  public int GetIsAbleToPossessFamiliar() {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetIsAbleToPossessFamiliar(swigCPtr);
    return retVal;
  }

  public int GetIsPossessedFamiliar() {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetIsPossessedFamiliar(swigCPtr);
    return retVal;
  }

  public uint GetDominatedCreatureId(int nAssociateIndex) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_GetDominatedCreatureId__SWIG_0(swigCPtr, nAssociateIndex);
    return retVal;
  }

  public uint GetDominatedCreatureId() {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_GetDominatedCreatureId__SWIG_1(swigCPtr);
    return retVal;
  }

  public int GetTakesCommandsFromPlayer(CNWSPlayer pPlayer) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetTakesCommandsFromPlayer(swigCPtr, CNWSPlayer.getCPtr(pPlayer));
    return retVal;
  }

  public CNWSFaction GetFaction() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_GetFaction(swigCPtr);
    CNWSFaction ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSFaction(cPtr, false);
    return ret;
  }

  public uint GetNearestEnemy(float fRange, uint oidToExclude, int bVisible, int bAttackClearLineToTarget) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_GetNearestEnemy__SWIG_0(swigCPtr, fRange, oidToExclude, bVisible, bAttackClearLineToTarget);
    return retVal;
  }

  public uint GetNearestEnemy(float fRange, uint oidToExclude, int bVisible) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_GetNearestEnemy__SWIG_1(swigCPtr, fRange, oidToExclude, bVisible);
    return retVal;
  }

  public uint GetNearestEnemy(float fRange, uint oidToExclude) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_GetNearestEnemy__SWIG_2(swigCPtr, fRange, oidToExclude);
    return retVal;
  }

  public uint GetNearestEnemy(float fRange) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_GetNearestEnemy__SWIG_3(swigCPtr, fRange);
    return retVal;
  }

  public int GetCreatureReputation(uint oidSource, int nSourceFactionId, int bUseOriginalFaction) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetCreatureReputation__SWIG_0(swigCPtr, oidSource, nSourceFactionId, bUseOriginalFaction);
    return retVal;
  }

  public int GetCreatureReputation(uint oidSource, int nSourceFactionId) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetCreatureReputation__SWIG_1(swigCPtr, oidSource, nSourceFactionId);
    return retVal;
  }

  public int GetStandardFactionReputation(int nStandardFactionId) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetStandardFactionReputation(swigCPtr, nStandardFactionId);
    return retVal;
  }

  public void SetStandardFactionReputation(int nStandardFactionId, int nNewReputation) {
    NWNXLibPINVOKE.CNWSCreature_SetStandardFactionReputation(swigCPtr, nStandardFactionId, nNewReputation);
  }

  public void AdjustReputation(int nFactionId, int nAdjustment) {
    NWNXLibPINVOKE.CNWSCreature_AdjustReputation(swigCPtr, nFactionId, nAdjustment);
  }

  public void AddToPersonalReputationList(uint oidObject, int nAdjustment, int bValueDecays, float fDurationInSeconds) {
    NWNXLibPINVOKE.CNWSCreature_AddToPersonalReputationList__SWIG_0(swigCPtr, oidObject, nAdjustment, bValueDecays, fDurationInSeconds);
  }

  public void AddToPersonalReputationList(uint oidObject, int nAdjustment, int bValueDecays) {
    NWNXLibPINVOKE.CNWSCreature_AddToPersonalReputationList__SWIG_1(swigCPtr, oidObject, nAdjustment, bValueDecays);
  }

  public void AddToPersonalReputationList(uint oidObject, int nAdjustment) {
    NWNXLibPINVOKE.CNWSCreature_AddToPersonalReputationList__SWIG_2(swigCPtr, oidObject, nAdjustment);
  }

  public void ClearPersonalReputation(uint oidSource) {
    NWNXLibPINVOKE.CNWSCreature_ClearPersonalReputation(swigCPtr, oidSource);
  }

  public int CalculatePersonalReputationAdjustment(uint oidSource) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_CalculatePersonalReputationAdjustment(swigCPtr, oidSource);
    return retVal;
  }

  public void CleanOutPersonalReputationList() {
    NWNXLibPINVOKE.CNWSCreature_CleanOutPersonalReputationList(swigCPtr);
  }

  public void LoadPersonalReputationList(CResGFF pRes, CResStruct pResStruct) {
    NWNXLibPINVOKE.CNWSCreature_LoadPersonalReputationList(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pResStruct));
  }

  public void SavePersonalReputationList(CResGFF pRes, CResStruct pResStruct) {
    NWNXLibPINVOKE.CNWSCreature_SavePersonalReputationList(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pResStruct));
  }

  public void LoadAssociateList(CResGFF pRes, CResStruct pResStruct, int bLoadOID) {
    NWNXLibPINVOKE.CNWSCreature_LoadAssociateList(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pResStruct), bLoadOID);
  }

  public void SaveAssociateList(CResGFF pRes, CResStruct pResStruct, int bSaveOIDs) {
    NWNXLibPINVOKE.CNWSCreature_SaveAssociateList(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pResStruct), bSaveOIDs);
  }

  public void RealizeAssociateList() {
    NWNXLibPINVOKE.CNWSCreature_RealizeAssociateList(swigCPtr);
  }

  public int ReplyToInvitation(int nInvitationReply, uint oidInvitedBy) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_ReplyToInvitation(swigCPtr, nInvitationReply, oidInvitedBy);
    return retVal;
  }

  public void CleanInvitationLists(int bForcePurgeEntireList) {
    NWNXLibPINVOKE.CNWSCreature_CleanInvitationLists__SWIG_0(swigCPtr, bForcePurgeEntireList);
  }

  public void CleanInvitationLists() {
    NWNXLibPINVOKE.CNWSCreature_CleanInvitationLists__SWIG_1(swigCPtr);
  }

  public void AddToInvitationsOffered(uint oidToAdd) {
    NWNXLibPINVOKE.CNWSCreature_AddToInvitationsOffered(swigCPtr, oidToAdd);
  }

  public int GetIsInInvitationsOffered(uint oidInvitedPerson) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetIsInInvitationsOffered(swigCPtr, oidInvitedPerson);
    return retVal;
  }

  public void RemoveFromInvitationsOffered(uint oidToRemove) {
    NWNXLibPINVOKE.CNWSCreature_RemoveFromInvitationsOffered(swigCPtr, oidToRemove);
  }

  public int GetNumInvited() {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetNumInvited(swigCPtr);
    return retVal;
  }

  public void AddToInvitationsIgnored(uint oidToAdd) {
    NWNXLibPINVOKE.CNWSCreature_AddToInvitationsIgnored(swigCPtr, oidToAdd);
  }

  public int GetIsInInvitationsIgnored(uint oidIgnoredPerson) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetIsInInvitationsIgnored(swigCPtr, oidIgnoredPerson);
    return retVal;
  }

  public void UpdateVisibleList() {
    NWNXLibPINVOKE.CNWSCreature_UpdateVisibleList(swigCPtr);
  }

  public CNWVisibilityNode GetVisibleListElement(uint oidCreature) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_GetVisibleListElement(swigCPtr, oidCreature);
    CNWVisibilityNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWVisibilityNode(cPtr, false);
    return ret;
  }

  public void AddToVisibleList(uint oidCreature, int bSeen, int bHeard, byte nSanctuary, int bInvisible) {
    NWNXLibPINVOKE.CNWSCreature_AddToVisibleList__SWIG_0(swigCPtr, oidCreature, bSeen, bHeard, nSanctuary, bInvisible);
  }

  public void AddToVisibleList(uint oidCreature, int bSeen, int bHeard, byte nSanctuary) {
    NWNXLibPINVOKE.CNWSCreature_AddToVisibleList__SWIG_1(swigCPtr, oidCreature, bSeen, bHeard, nSanctuary);
  }

  public void AddToVisibleList(uint oidCreature, int bSeen, int bHeard) {
    NWNXLibPINVOKE.CNWSCreature_AddToVisibleList__SWIG_2(swigCPtr, oidCreature, bSeen, bHeard);
  }

  public void RemoveFromVisibleList(uint oidCreature) {
    NWNXLibPINVOKE.CNWSCreature_RemoveFromVisibleList(swigCPtr, oidCreature);
  }

  public void ClearVisibleList() {
    NWNXLibPINVOKE.CNWSCreature_ClearVisibleList(swigCPtr);
  }

  public void UpdateAutoMap(uint oidCreature) {
    NWNXLibPINVOKE.CNWSCreature_UpdateAutoMap(swigCPtr, oidCreature);
  }

  public void MergeItem(CNWSItem pItemToMergeInto, CNWSItem pItemToMerge) {
    NWNXLibPINVOKE.CNWSCreature_MergeItem(swigCPtr, CNWSItem.getCPtr(pItemToMergeInto), CNWSItem.getCPtr(pItemToMerge));
  }

  public void SplitItem(CNWSItem pItemToSplit, int nNumberToSplitOff) {
    NWNXLibPINVOKE.CNWSCreature_SplitItem(swigCPtr, CNWSItem.getCPtr(pItemToSplit), nNumberToSplitOff);
  }

  public void UpdateEncumbranceState(int bDisplayFeedback) {
    NWNXLibPINVOKE.CNWSCreature_UpdateEncumbranceState__SWIG_0(swigCPtr, bDisplayFeedback);
  }

  public void UpdateEncumbranceState() {
    NWNXLibPINVOKE.CNWSCreature_UpdateEncumbranceState__SWIG_1(swigCPtr);
  }

  public int UpdateSubareasOnJumpPosition(Vector vNewPosition, uint oidNewArea) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_UpdateSubareasOnJumpPosition(swigCPtr, Vector.getCPtr(vNewPosition), oidNewArea);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int UpdateSubareasOnMoveTo(Vector vOldPosition, Vector vNewPosition, int bIntersectingSubAreas, CExoArrayListUInt32 aIntersectingSubAreas, int bDriveMode) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_UpdateSubareasOnMoveTo__SWIG_0(swigCPtr, Vector.getCPtr(vOldPosition), Vector.getCPtr(vNewPosition), bIntersectingSubAreas, CExoArrayListUInt32.getCPtr(aIntersectingSubAreas), bDriveMode);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int UpdateSubareasOnMoveTo(Vector vOldPosition, Vector vNewPosition, int bIntersectingSubAreas, CExoArrayListUInt32 aIntersectingSubAreas) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_UpdateSubareasOnMoveTo__SWIG_1(swigCPtr, Vector.getCPtr(vOldPosition), Vector.getCPtr(vNewPosition), bIntersectingSubAreas, CExoArrayListUInt32.getCPtr(aIntersectingSubAreas));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int UpdateSubareasOnMoveTo(Vector vOldPosition, Vector vNewPosition, int bIntersectingSubAreas) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_UpdateSubareasOnMoveTo__SWIG_2(swigCPtr, Vector.getCPtr(vOldPosition), Vector.getCPtr(vNewPosition), bIntersectingSubAreas);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int UpdateSubareasOnMoveTo(Vector vOldPosition, Vector vNewPosition) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_UpdateSubareasOnMoveTo__SWIG_3(swigCPtr, Vector.getCPtr(vOldPosition), Vector.getCPtr(vNewPosition));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int HandleSubAreaStateChanges(CExoArrayListUInt32 aNewSubAreas, CExoArrayListUInt32 aIntersectingSubAreas, int bDriveMode) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_HandleSubAreaStateChanges__SWIG_0(swigCPtr, CExoArrayListUInt32.getCPtr(aNewSubAreas), CExoArrayListUInt32.getCPtr(aIntersectingSubAreas), bDriveMode);
    return retVal;
  }

  public int HandleSubAreaStateChanges(CExoArrayListUInt32 aNewSubAreas, CExoArrayListUInt32 aIntersectingSubAreas) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_HandleSubAreaStateChanges__SWIG_1(swigCPtr, CExoArrayListUInt32.getCPtr(aNewSubAreas), CExoArrayListUInt32.getCPtr(aIntersectingSubAreas));
    return retVal;
  }

  public void PostProcess() {
    NWNXLibPINVOKE.CNWSCreature_PostProcess(swigCPtr);
  }

  public void ComputeArmourClass(CNWSItem pItemToEquip, int bEquipping, int bLoadingItem) {
    NWNXLibPINVOKE.CNWSCreature_ComputeArmourClass__SWIG_0(swigCPtr, CNWSItem.getCPtr(pItemToEquip), bEquipping, bLoadingItem);
  }

  public void ComputeArmourClass(CNWSItem pItemToEquip, int bEquipping) {
    NWNXLibPINVOKE.CNWSCreature_ComputeArmourClass__SWIG_1(swigCPtr, CNWSItem.getCPtr(pItemToEquip), bEquipping);
  }

  public void ComputeArmourClass(CNWSItem pItemToEquip) {
    NWNXLibPINVOKE.CNWSCreature_ComputeArmourClass__SWIG_2(swigCPtr, CNWSItem.getCPtr(pItemToEquip));
  }

  public int GetRangeWeaponEquipped() {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetRangeWeaponEquipped(swigCPtr);
    return retVal;
  }

  public int GetUnarmed() {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetUnarmed(swigCPtr);
    return retVal;
  }

  public void SetExcitedState(byte nAction) {
    NWNXLibPINVOKE.CNWSCreature_SetExcitedState(swigCPtr, nAction);
  }

  public void UpdateExcitedStateTimer() {
    NWNXLibPINVOKE.CNWSCreature_UpdateExcitedStateTimer(swigCPtr);
  }

  public void Rest(int bRestingWithMaster, int bEnemyToCreatureLineOfSightCheck) {
    NWNXLibPINVOKE.CNWSCreature_Rest__SWIG_0(swigCPtr, bRestingWithMaster, bEnemyToCreatureLineOfSightCheck);
  }

  public void Rest(int bRestingWithMaster) {
    NWNXLibPINVOKE.CNWSCreature_Rest__SWIG_1(swigCPtr, bRestingWithMaster);
  }

  public void Rest() {
    NWNXLibPINVOKE.CNWSCreature_Rest__SWIG_2(swigCPtr);
  }

  public void CancelRest(ushort nCancelFeedbackMessage) {
    NWNXLibPINVOKE.CNWSCreature_CancelRest(swigCPtr, nCancelFeedbackMessage);
  }

  public int ApplyDiseasePayload(CGameEffect pEffect, uint nCalendarDay, uint nTimeOfDay) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_ApplyDiseasePayload(swigCPtr, CGameEffect.getCPtr(pEffect), nCalendarDay, nTimeOfDay);
    return retVal;
  }

  public int ApplyPoisonPayload(CGameEffect pEffect, uint nCalendarDay, uint nTimeOfDay) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_ApplyPoisonPayload(swigCPtr, CGameEffect.getCPtr(pEffect), nCalendarDay, nTimeOfDay);
    return retVal;
  }

  public int ApplyWounding(CGameEffect pEffect) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_ApplyWounding(swigCPtr, CGameEffect.getCPtr(pEffect));
    return retVal;
  }

  public int RemoveCharmEffectsByOBJECTID(uint oidCharmer, int nRepAdjToCharmer) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_RemoveCharmEffectsByOBJECTID__SWIG_0(swigCPtr, oidCharmer, nRepAdjToCharmer);
    return retVal;
  }

  public int RemoveCharmEffectsByOBJECTID(uint oidCharmer) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_RemoveCharmEffectsByOBJECTID__SWIG_1(swigCPtr, oidCharmer);
    return retVal;
  }

  public int RemoveCharmEffectsByFactionID(int nCharmerFactionID, int nRepAdjToCharmer) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_RemoveCharmEffectsByFactionID__SWIG_0(swigCPtr, nCharmerFactionID, nRepAdjToCharmer);
    return retVal;
  }

  public int RemoveCharmEffectsByFactionID(int nCharmerFactionID) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_RemoveCharmEffectsByFactionID__SWIG_1(swigCPtr, nCharmerFactionID);
    return retVal;
  }

  public void RemoveSleepEffects() {
    NWNXLibPINVOKE.CNWSCreature_RemoveSleepEffects(swigCPtr);
  }

  public void RemoveBadEffects() {
    NWNXLibPINVOKE.CNWSCreature_RemoveBadEffects(swigCPtr);
  }

  public void RemoveWoundingEffects() {
    NWNXLibPINVOKE.CNWSCreature_RemoveWoundingEffects(swigCPtr);
  }

  public int GetRelativeWeaponSize(CNWSItem pItem) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetRelativeWeaponSize(swigCPtr, CNWSItem.getCPtr(pItem));
    return retVal;
  }

  public int EvaluateLock(CNWSObject pObject, int bLockObject) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_EvaluateLock(swigCPtr, CNWSObject.getCPtr(pObject), bLockObject);
    return retVal;
  }

  public void UpdateActionQueue() {
    NWNXLibPINVOKE.CNWSCreature_UpdateActionQueue(swigCPtr);
  }

  public int UpdateSpecialAttacks() {
    int retVal = NWNXLibPINVOKE.CNWSCreature_UpdateSpecialAttacks(swigCPtr);
    return retVal;
  }

  public void TerminateClientSidePath(int nClientPathNumber) {
    NWNXLibPINVOKE.CNWSCreature_TerminateClientSidePath(swigCPtr, nClientPathNumber);
  }

  public uint AIActionMoveToPoint(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionMoveToPoint(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionJumpToPoint(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionJumpToPoint(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionJumpToObject(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionJumpToObject(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionRandomWalk(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionRandomWalk(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionChangeFacingPoint(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionChangeFacingPoint(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionChangeFacingObject(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionChangeFacingObject(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionCheckInterAreaPathfinding(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionCheckInterAreaPathfinding(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionCheckMoveAwayFromObject(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionCheckMoveAwayFromObject(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionCheckMoveAwayFromLocation(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionCheckMoveAwayFromLocation(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionCheckMoveToObject(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionCheckMoveToObject(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionCheckMoveToObjectRadius(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionCheckMoveToObjectRadius(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionCheckMoveToPoint(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionCheckMoveToPoint(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionCheckMoveToPointRadius(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionCheckMoveToPointRadius(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionForceFollowObject(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionForceFollowObject(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionCheckForceFollowObject(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionCheckForceFollowObject(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionDrive(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionDrive(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint DriveUpdateLocation(int bRun) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_DriveUpdateLocation(swigCPtr, bRun);
    return retVal;
  }

  public uint AIActionCastSpell(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionCastSpell(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionItemCastSpell(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionItemCastSpell(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionRepositoryMove(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionRepositoryMove(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionEquipItem(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionEquipItem(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionUnequipItem(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionUnequipItem(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public int CheckAttackClearLineToTarget(uint oidAttackTarget, Vector vTarget, CNWSArea pArea) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_CheckAttackClearLineToTarget__SWIG_0(swigCPtr, oidAttackTarget, Vector.getCPtr(vTarget), CNWSArea.getCPtr(pArea));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int CheckAttackClearLineToTarget(uint oidAttackTarget, Vector vTarget) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_CheckAttackClearLineToTarget__SWIG_1(swigCPtr, oidAttackTarget, Vector.getCPtr(vTarget));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int CheckAttackClearLineToTarget(uint oidAttackTarget) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_CheckAttackClearLineToTarget__SWIG_2(swigCPtr, oidAttackTarget);
    return retVal;
  }

  public CNWSCreature GetNewCombatTarget(uint oidAttackTarget) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_GetNewCombatTarget(swigCPtr, oidAttackTarget);
    CNWSCreature ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSCreature(cPtr, false);
    return ret;
  }

  public void ChangeAttackTarget(CNWSObjectActionNode pNode, uint oidAttackTarget) {
    NWNXLibPINVOKE.CNWSCreature_ChangeAttackTarget(swigCPtr, CNWSObjectActionNode.getCPtr(pNode), oidAttackTarget);
  }

  public uint AIActionAttackObject(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionAttackObject(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionEncounterCreatureDestroySelf() {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionEncounterCreatureDestroySelf(swigCPtr);
    return retVal;
  }

  public uint AIActionAnimalEmpathy(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionAnimalEmpathy(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionRest(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionRest(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionTaunt(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionTaunt(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionCounterSpell(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionCounterSpell(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionAppear(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionAppear(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionDisappear(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionDisappear(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionPickPocket(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionPickPocket(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionHeal(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionHeal(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionSit(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionSit(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionWaitForEndOfRound(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionWaitForEndOfRound(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionOrientCamera(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionOrientCamera(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionPickUpItem(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionPickUpItem(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionDropItem(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionDropItem(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionFlagTrap(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionFlagTrap(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionDisarmTrap(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionDisarmTrap(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionRecoverTrap(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionRecoverTrap(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionExamineTrap(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionExamineTrap(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionSetTrap(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionSetTrap(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionBarter(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionBarter(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionExamine(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionExamine(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public uint AIActionAreaWait(CNWSObjectActionNode pNode) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_AIActionAreaWait(swigCPtr, CNWSObjectActionNode.getCPtr(pNode));
    return retVal;
  }

  public override CResRef GetPortrait() {
    CResRef ret = new CResRef(NWNXLibPINVOKE.CNWSCreature_GetPortrait(swigCPtr), true);
    return ret;
  }

  public override void SetPortrait(CResRef cPortrait) {
    NWNXLibPINVOKE.CNWSCreature_SetPortrait(swigCPtr, CResRef.getCPtr(cPortrait));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void SetPortraitId(ushort nPortraitId) {
    NWNXLibPINVOKE.CNWSCreature_SetPortraitId(swigCPtr, nPortraitId);
  }

  public void UpdateAppearanceForEquippedItems() {
    NWNXLibPINVOKE.CNWSCreature_UpdateAppearanceForEquippedItems(swigCPtr);
  }

  public void UpdatePersonalSpace() {
    NWNXLibPINVOKE.CNWSCreature_UpdatePersonalSpace(swigCPtr);
  }

  public void UpdateAppearanceDependantInfo() {
    NWNXLibPINVOKE.CNWSCreature_UpdateAppearanceDependantInfo(swigCPtr);
  }

  public CNWSJournal GetJournal() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_GetJournal(swigCPtr);
    CNWSJournal ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSJournal(cPtr, false);
    return ret;
  }

  public void ReloadJournalEntries() {
    NWNXLibPINVOKE.CNWSCreature_ReloadJournalEntries(swigCPtr);
  }

  public CNWSBarter GetBarterInfo(int bCreateIfNonExistant) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_GetBarterInfo__SWIG_0(swigCPtr, bCreateIfNonExistant);
    CNWSBarter ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSBarter(cPtr, false);
    return ret;
  }

  public CNWSBarter GetBarterInfo() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_GetBarterInfo__SWIG_1(swigCPtr);
    CNWSBarter ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSBarter(cPtr, false);
    return ret;
  }

  public int StartBarter(uint oidTarget, uint oidItem, int bFromActionQueue) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_StartBarter__SWIG_0(swigCPtr, oidTarget, oidItem, bFromActionQueue);
    return retVal;
  }

  public int StartBarter(uint oidTarget, uint oidItem) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_StartBarter__SWIG_1(swigCPtr, oidTarget, oidItem);
    return retVal;
  }

  public void ClearHostileActionsVersus(CNWSCreature pCreature) {
    NWNXLibPINVOKE.CNWSCreature_ClearHostileActionsVersus(swigCPtr, CNWSCreature.getCPtr(pCreature));
  }

  public void PacifyCreature(uint oidTarget) {
    NWNXLibPINVOKE.CNWSCreature_PacifyCreature__SWIG_0(swigCPtr, oidTarget);
  }

  public void PacifyCreature() {
    NWNXLibPINVOKE.CNWSCreature_PacifyCreature__SWIG_1(swigCPtr);
  }

  public void ClearAutoMapData() {
    NWNXLibPINVOKE.CNWSCreature_ClearAutoMapData(swigCPtr);
  }

  public void SetAutoMapData(int nNumAreas, uint* pAreaList, byte** pMapTileData) {
    NWNXLibPINVOKE.CNWSCreature_SetAutoMapData(swigCPtr, nNumAreas, pAreaList, (global::System.IntPtr)pMapTileData);
  }

  public void ReconcileAutoMapData() {
    NWNXLibPINVOKE.CNWSCreature_ReconcileAutoMapData(swigCPtr);
  }

  public int RetrieveAreaAutoMapDataIndex(uint oidArea) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_RetrieveAreaAutoMapDataIndex(swigCPtr, oidArea);
    return retVal;
  }

  public void SetAllTilesExplored(uint oidArea, int bExplored) {
    NWNXLibPINVOKE.CNWSCreature_SetAllTilesExplored__SWIG_0(swigCPtr, oidArea, bExplored);
  }

  public void SetAllTilesExplored(uint oidArea) {
    NWNXLibPINVOKE.CNWSCreature_SetAllTilesExplored__SWIG_1(swigCPtr, oidArea);
  }

  public void SetTileExplored(uint oidArea, int nXPos, int nYPos, int newState) {
    NWNXLibPINVOKE.CNWSCreature_SetTileExplored__SWIG_0(swigCPtr, oidArea, nXPos, nYPos, newState);
  }

  public void SetTileExplored(uint oidArea, int nXPos, int nYPos) {
    NWNXLibPINVOKE.CNWSCreature_SetTileExplored__SWIG_1(swigCPtr, oidArea, nXPos, nYPos);
  }

  public int GetTileExplored(uint oidArea, int nXPos, int nYPos) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetTileExplored(swigCPtr, oidArea, nXPos, nYPos);
    return retVal;
  }

  public int TranslateAddress(uint oidArea, int nByteIndex, int nBitIndex, int* xPos, int* yPos) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_TranslateAddress(swigCPtr, oidArea, nByteIndex, nBitIndex, xPos, yPos);
    return retVal;
  }

  public int CancelAction(ushort nActionID, ushort nGroupID) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_CancelAction(swigCPtr, nActionID, nGroupID);
    return retVal;
  }

  public int ForceMoveToPoint(CNWSForcedAction pForcedAction) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_ForceMoveToPoint(swigCPtr, CNWSForcedAction.getCPtr(pForcedAction));
    return retVal;
  }

  public int RequestBuy(uint oidItemToBuy, uint oidStore, uint oidDesiredRepository) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_RequestBuy__SWIG_0(swigCPtr, oidItemToBuy, oidStore, oidDesiredRepository);
    return retVal;
  }

  public int RequestBuy(uint oidItemToBuy, uint oidStore) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_RequestBuy__SWIG_1(swigCPtr, oidItemToBuy, oidStore);
    return retVal;
  }

  public int RequestSell(uint oidItemToSell, uint oidStore) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_RequestSell(swigCPtr, oidItemToSell, oidStore);
    return retVal;
  }

  public int TransferGold(uint oidDestination, Vector vDestination, uint nGoldAmount, int bBarter, byte nXpos, byte nYpos) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_TransferGold__SWIG_0(swigCPtr, oidDestination, Vector.getCPtr(vDestination), nGoldAmount, bBarter, nXpos, nYpos);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int TransferGold(uint oidDestination, Vector vDestination, uint nGoldAmount, int bBarter, byte nXpos) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_TransferGold__SWIG_1(swigCPtr, oidDestination, Vector.getCPtr(vDestination), nGoldAmount, bBarter, nXpos);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int TransferGold(uint oidDestination, Vector vDestination, uint nGoldAmount, int bBarter) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_TransferGold__SWIG_2(swigCPtr, oidDestination, Vector.getCPtr(vDestination), nGoldAmount, bBarter);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public void CancelGoldTransfer(uint oidMaybeGold) {
    NWNXLibPINVOKE.CNWSCreature_CancelGoldTransfer(swigCPtr, oidMaybeGold);
  }

  public void SetGold(int nGold) {
    NWNXLibPINVOKE.CNWSCreature_SetGold(swigCPtr, nGold);
  }

  public void AddGold(int nGoldToAdd, int bDisplayFeedback) {
    NWNXLibPINVOKE.CNWSCreature_AddGold__SWIG_0(swigCPtr, nGoldToAdd, bDisplayFeedback);
  }

  public void AddGold(int nGoldToAdd) {
    NWNXLibPINVOKE.CNWSCreature_AddGold__SWIG_1(swigCPtr, nGoldToAdd);
  }

  public void RemoveGold(int nGoldToRemove, int bDisplayFeedback) {
    NWNXLibPINVOKE.CNWSCreature_RemoveGold__SWIG_0(swigCPtr, nGoldToRemove, bDisplayFeedback);
  }

  public void RemoveGold(int nGoldToRemove) {
    NWNXLibPINVOKE.CNWSCreature_RemoveGold__SWIG_1(swigCPtr, nGoldToRemove);
  }

  public void InitializeQuickbar() {
    NWNXLibPINVOKE.CNWSCreature_InitializeQuickbar(swigCPtr);
  }

  public CNWSQuickbarButton GetQuickbarButton(byte nButton) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreature_GetQuickbarButton(swigCPtr, nButton);
    CNWSQuickbarButton ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSQuickbarButton(cPtr, false);
    return ret;
  }

  public void SetQuickbarButton_Item(byte nButton, uint oidItem, int nPropertyID, uint oidSecondaryItem) {
    NWNXLibPINVOKE.CNWSCreature_SetQuickbarButton_Item(swigCPtr, nButton, oidItem, nPropertyID, oidSecondaryItem);
  }

  public void SetQuickbarButton_Spell(byte nButton, byte nMultiClass, uint nSpellID, byte nMetaType, byte nDomainLevel) {
    NWNXLibPINVOKE.CNWSCreature_SetQuickbarButton_Spell(swigCPtr, nButton, nMultiClass, nSpellID, nMetaType, nDomainLevel);
  }

  public void SetQuickbarButton_SpellLikeAbility(byte nButton, uint nSpellID, byte nCasterLevel) {
    NWNXLibPINVOKE.CNWSCreature_SetQuickbarButton_SpellLikeAbility(swigCPtr, nButton, nSpellID, nCasterLevel);
  }

  public void SetQuickbarButton_AssociateCommand(byte nButton, int nCommand, ushort nAssociateType, uint oidAssociate) {
    NWNXLibPINVOKE.CNWSCreature_SetQuickbarButton_AssociateCommand(swigCPtr, nButton, nCommand, nAssociateType, oidAssociate);
  }

  public void SetQuickbarButton_DungeonMaster_CreateCreature(byte nButton, CResRef ref_, CExoString sToolTip) {
    NWNXLibPINVOKE.CNWSCreature_SetQuickbarButton_DungeonMaster_CreateCreature(swigCPtr, nButton, CResRef.getCPtr(ref_), CExoString.getCPtr(sToolTip));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetQuickbarButton_DungeonMaster_CreateItem(byte nButton, CResRef ref_, CExoString sToolTip) {
    NWNXLibPINVOKE.CNWSCreature_SetQuickbarButton_DungeonMaster_CreateItem(swigCPtr, nButton, CResRef.getCPtr(ref_), CExoString.getCPtr(sToolTip));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetQuickbarButton_DungeonMaster_CreateEncounter(byte nButton, CResRef ref_, CExoString sToolTip) {
    NWNXLibPINVOKE.CNWSCreature_SetQuickbarButton_DungeonMaster_CreateEncounter(swigCPtr, nButton, CResRef.getCPtr(ref_), CExoString.getCPtr(sToolTip));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetQuickbarButton_DungeonMaster_CreateWaypoint(byte nButton, CResRef ref_, CExoString sToolTip) {
    NWNXLibPINVOKE.CNWSCreature_SetQuickbarButton_DungeonMaster_CreateWaypoint(swigCPtr, nButton, CResRef.getCPtr(ref_), CExoString.getCPtr(sToolTip));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetQuickbarButton_DungeonMaster_CreateTrigger(byte nButton, CResRef ref_, CExoString sToolTip) {
    NWNXLibPINVOKE.CNWSCreature_SetQuickbarButton_DungeonMaster_CreateTrigger(swigCPtr, nButton, CResRef.getCPtr(ref_), CExoString.getCPtr(sToolTip));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetQuickbarButton_DungeonMaster_CreatePortal(byte nButton, CResRef ref_, CExoString sToolTip) {
    NWNXLibPINVOKE.CNWSCreature_SetQuickbarButton_DungeonMaster_CreatePortal(swigCPtr, nButton, CResRef.getCPtr(ref_), CExoString.getCPtr(sToolTip));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetQuickbarButton_DungeonMaster_CreatePlaceable(byte nButton, CResRef ref_, CExoString sToolTip) {
    NWNXLibPINVOKE.CNWSCreature_SetQuickbarButton_DungeonMaster_CreatePlaceable(swigCPtr, nButton, CResRef.getCPtr(ref_), CExoString.getCPtr(sToolTip));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetQuickbarButton_CommandLine(byte nButton, CExoString label, CExoString cmd) {
    NWNXLibPINVOKE.CNWSCreature_SetQuickbarButton_CommandLine(swigCPtr, nButton, CExoString.getCPtr(label), CExoString.getCPtr(cmd));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetQuickbarButton_DM_General_ResRefParam(byte nButton, byte nObjectType, CResRef ref_) {
    NWNXLibPINVOKE.CNWSCreature_SetQuickbarButton_DM_General_ResRefParam(swigCPtr, nButton, nObjectType, CResRef.getCPtr(ref_));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetQuickbarButton_GeneralNoParam(byte nButton, byte nObjectType) {
    NWNXLibPINVOKE.CNWSCreature_SetQuickbarButton_GeneralNoParam(swigCPtr, nButton, nObjectType);
  }

  public void SetQuickbarButton_GeneralINTParam(byte nButton, byte nObjectType, int nParam) {
    NWNXLibPINVOKE.CNWSCreature_SetQuickbarButton_GeneralINTParam(swigCPtr, nButton, nObjectType, nParam);
  }

  public void QuickbarButton_RemoveItem(uint oidItem) {
    NWNXLibPINVOKE.CNWSCreature_QuickbarButton_RemoveItem(swigCPtr, oidItem);
  }

  public void QuickbarButton_RemoveSpell(uint nSpellId) {
    NWNXLibPINVOKE.CNWSCreature_QuickbarButton_RemoveSpell(swigCPtr, nSpellId);
  }

  public int LoadPolymorphData(CResGFF pRes, CResStruct pResStruct, int bRunItemScripts) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_LoadPolymorphData__SWIG_0(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pResStruct), bRunItemScripts);
    return retVal;
  }

  public int LoadPolymorphData(CResGFF pRes, CResStruct pResStruct) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_LoadPolymorphData__SWIG_1(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pResStruct));
    return retVal;
  }

  public void CleanUpOldPolymorphedItems() {
    NWNXLibPINVOKE.CNWSCreature_CleanUpOldPolymorphedItems(swigCPtr);
  }

  public void LoadQuickButtons(CResGFF pRes, CResStruct pStruct) {
    NWNXLibPINVOKE.CNWSCreature_LoadQuickButtons(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pStruct));
  }

  public void CreateDefaultQuickButtons() {
    NWNXLibPINVOKE.CNWSCreature_CreateDefaultQuickButtons(swigCPtr);
  }

  public void CreateDefaultQuickButtons_CheckItem(CNWSItem pItem, uint* nMaxCostRanged, uint* nMaxCostMelee, uint* oidRangedWeapon, uint* oidMeleeWeapon) {
    NWNXLibPINVOKE.CNWSCreature_CreateDefaultQuickButtons_CheckItem(swigCPtr, CNWSItem.getCPtr(pItem), (global::System.IntPtr)nMaxCostRanged, (global::System.IntPtr)nMaxCostMelee, (global::System.IntPtr)oidRangedWeapon, (global::System.IntPtr)oidMeleeWeapon);
  }

  public void CreateDefaultQuickButtons_AddFeat(byte* nButton, ushort nFeat, int bDomainFeat) {
    NWNXLibPINVOKE.CNWSCreature_CreateDefaultQuickButtons_AddFeat(swigCPtr, (global::System.IntPtr)nButton, nFeat, bDomainFeat);
  }

  public void CreateDefaultQuickButtonsDM() {
    NWNXLibPINVOKE.CNWSCreature_CreateDefaultQuickButtonsDM(swigCPtr);
  }

  public void CopyQuickButtonsFromDM(CNWSPlayer pPlayer) {
    NWNXLibPINVOKE.CNWSCreature_CopyQuickButtonsFromDM(swigCPtr, CNWSPlayer.getCPtr(pPlayer));
  }

  public void LoadQuickBarHack(CExoString sFilename) {
    NWNXLibPINVOKE.CNWSCreature_LoadQuickBarHack(swigCPtr, CExoString.getCPtr(sFilename));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SaveQuickBarHack(CExoString sFilename) {
    NWNXLibPINVOKE.CNWSCreature_SaveQuickBarHack(swigCPtr, CExoString.getCPtr(sFilename));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ConvertModeToggleQuickButton(CNWSQuickbarButton pButton) {
    NWNXLibPINVOKE.CNWSCreature_ConvertModeToggleQuickButton(swigCPtr, CNWSQuickbarButton.getCPtr(pButton));
  }

  public void LoadAutoMapData(CResGFF pRes, CResStruct pStruct) {
    NWNXLibPINVOKE.CNWSCreature_LoadAutoMapData(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pStruct));
  }

  public void SaveAutoMapData(CResGFF pRes, CResStruct pStruct) {
    NWNXLibPINVOKE.CNWSCreature_SaveAutoMapData(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pStruct));
  }

  public void ApplyDeathExperience() {
    NWNXLibPINVOKE.CNWSCreature_ApplyDeathExperience(swigCPtr);
  }

  public float CalculateDeathExperience(int nPartyPotentialLevel, int nPartyEffectiveLevel) {
    float retVal = NWNXLibPINVOKE.CNWSCreature_CalculateDeathExperience(swigCPtr, nPartyPotentialLevel, nPartyEffectiveLevel);
    return retVal;
  }

  public void ResolveDamageShields(CNWSCreature pAttacker) {
    NWNXLibPINVOKE.CNWSCreature_ResolveDamageShields(swigCPtr, CNWSCreature.getCPtr(pAttacker));
  }

  public int ResolveDefensiveEffects(CNWSObject pTarget, int bAttackHit) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_ResolveDefensiveEffects__SWIG_0(swigCPtr, CNWSObject.getCPtr(pTarget), bAttackHit);
    return retVal;
  }

  public int ResolveDefensiveEffects(CNWSObject pTarget) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_ResolveDefensiveEffects__SWIG_1(swigCPtr, CNWSObject.getCPtr(pTarget));
    return retVal;
  }

  public void ResolveInitiative() {
    NWNXLibPINVOKE.CNWSCreature_ResolveInitiative(swigCPtr);
  }

  public int EquipMostDamagingMeleeWeapon(uint oidVersus, int bOffHand, int bEquipGeneralWeapon) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_EquipMostDamagingMeleeWeapon__SWIG_0(swigCPtr, oidVersus, bOffHand, bEquipGeneralWeapon);
    return retVal;
  }

  public int EquipMostDamagingMeleeWeapon(uint oidVersus, int bOffHand) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_EquipMostDamagingMeleeWeapon__SWIG_1(swigCPtr, oidVersus, bOffHand);
    return retVal;
  }

  public int EquipMostDamagingRangedWeapon(uint oidVersus) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_EquipMostDamagingRangedWeapon(swigCPtr, oidVersus);
    return retVal;
  }

  public int EquipMostDamagingAmmunition(uint oidVersus, CNWSItem pWeapon) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_EquipMostDamagingAmmunition(swigCPtr, oidVersus, CNWSItem.getCPtr(pWeapon));
    return retVal;
  }

  public int GetIsWeaponEffective(uint oidVersus, int bOffHand) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetIsWeaponEffective(swigCPtr, oidVersus, bOffHand);
    return retVal;
  }

  public int EquipMostEffectiveArmor() {
    int retVal = NWNXLibPINVOKE.CNWSCreature_EquipMostEffectiveArmor(swigCPtr);
    return retVal;
  }

  public float GetSpotCheckDistance() {
    float retVal = NWNXLibPINVOKE.CNWSCreature_GetSpotCheckDistance(swigCPtr);
    return retVal;
  }

  public float GetListenCheckDistance() {
    float retVal = NWNXLibPINVOKE.CNWSCreature_GetListenCheckDistance(swigCPtr);
    return retVal;
  }

  public void DoPerceptionUpdateOnCreature(CNWSCreature pTarget, int bHideInPlainSight) {
    NWNXLibPINVOKE.CNWSCreature_DoPerceptionUpdateOnCreature__SWIG_0(swigCPtr, CNWSCreature.getCPtr(pTarget), bHideInPlainSight);
  }

  public void DoPerceptionUpdateOnCreature(CNWSCreature pTarget) {
    NWNXLibPINVOKE.CNWSCreature_DoPerceptionUpdateOnCreature__SWIG_1(swigCPtr, CNWSCreature.getCPtr(pTarget));
  }

  public int ComputeTotalWeightCarried() {
    int retVal = NWNXLibPINVOKE.CNWSCreature_ComputeTotalWeightCarried(swigCPtr);
    return retVal;
  }

  public int ComputeTotalEquippedWeight() {
    int retVal = NWNXLibPINVOKE.CNWSCreature_ComputeTotalEquippedWeight(swigCPtr);
    return retVal;
  }

  public int UseLoreOnItem(uint oidItem) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_UseLoreOnItem(swigCPtr, oidItem);
    return retVal;
  }

  public void PayToIdentifyItem(uint oidItem, uint oidStore) {
    NWNXLibPINVOKE.CNWSCreature_PayToIdentifyItem__SWIG_0(swigCPtr, oidItem, oidStore);
  }

  public void PayToIdentifyItem(uint oidItem) {
    NWNXLibPINVOKE.CNWSCreature_PayToIdentifyItem__SWIG_1(swigCPtr, oidItem);
  }

  public int DecrementSpellReadyCount(uint nSpellID, byte nMultiClass, byte nDomainLevel, byte nMetaType, byte nCasterLevel) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_DecrementSpellReadyCount__SWIG_0(swigCPtr, nSpellID, nMultiClass, nDomainLevel, nMetaType, nCasterLevel);
    return retVal;
  }

  public int DecrementSpellReadyCount(uint nSpellID, byte nMultiClass, byte nDomainLevel, byte nMetaType) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_DecrementSpellReadyCount__SWIG_1(swigCPtr, nSpellID, nMultiClass, nDomainLevel, nMetaType);
    return retVal;
  }

  public void AutoCloseGUIPanels(int bCheckStoreDistance) {
    NWNXLibPINVOKE.CNWSCreature_AutoCloseGUIPanels__SWIG_0(swigCPtr, bCheckStoreDistance);
  }

  public void AutoCloseGUIPanels() {
    NWNXLibPINVOKE.CNWSCreature_AutoCloseGUIPanels__SWIG_1(swigCPtr);
  }

  public void CutWaypointPath() {
    NWNXLibPINVOKE.CNWSCreature_CutWaypointPath(swigCPtr);
  }

  public void FailedOpenInformAssociates() {
    NWNXLibPINVOKE.CNWSCreature_FailedOpenInformAssociates(swigCPtr);
  }

  public void SawTrapInformAssociates(uint oidTrap) {
    NWNXLibPINVOKE.CNWSCreature_SawTrapInformAssociates(swigCPtr, oidTrap);
  }

  public void AddToPVPList(uint oidPC) {
    NWNXLibPINVOKE.CNWSCreature_AddToPVPList(swigCPtr, oidPC);
  }

  public void RemoveFromPVPList(uint oidPC) {
    NWNXLibPINVOKE.CNWSCreature_RemoveFromPVPList(swigCPtr, oidPC);
  }

  public void SetPVPPlayerLikesMe(uint oidPC, int bNewAttitude, int bSetReciprocal) {
    NWNXLibPINVOKE.CNWSCreature_SetPVPPlayerLikesMe__SWIG_0(swigCPtr, oidPC, bNewAttitude, bSetReciprocal);
  }

  public void SetPVPPlayerLikesMe(uint oidPC, int bNewAttitude) {
    NWNXLibPINVOKE.CNWSCreature_SetPVPPlayerLikesMe__SWIG_1(swigCPtr, oidPC, bNewAttitude);
  }

  public int GetPVPPlayerLikesMe(uint oidPC) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetPVPPlayerLikesMe(swigCPtr, oidPC);
    return retVal;
  }

  public void SetInTransit(int nInTransit) {
    NWNXLibPINVOKE.CNWSCreature_SetInTransit(swigCPtr, nInTransit);
  }

  public int Polymorph(int nPolymorphType, CGameEffect pParentEffect, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_Polymorph__SWIG_0(swigCPtr, nPolymorphType, CGameEffect.getCPtr(pParentEffect), bLoadingGame);
    return retVal;
  }

  public int Polymorph(int nPolymorphType, CGameEffect pParentEffect) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_Polymorph__SWIG_1(swigCPtr, nPolymorphType, CGameEffect.getCPtr(pParentEffect));
    return retVal;
  }

  public int UnPolymorph(CGameEffect pParentEffect) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_UnPolymorph(swigCPtr, CGameEffect.getCPtr(pParentEffect));
    return retVal;
  }

  public int GetTurnResistanceHD() {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetTurnResistanceHD(swigCPtr);
    return retVal;
  }

  public ushort GetBodyBagAppearance() {
    ushort retVal = NWNXLibPINVOKE.CNWSCreature_GetBodyBagAppearance(swigCPtr);
    return retVal;
  }

  public void CheckInventoryForPlotItems() {
    NWNXLibPINVOKE.CNWSCreature_CheckInventoryForPlotItems(swigCPtr);
  }

  public void DumpToLog() {
    NWNXLibPINVOKE.CNWSCreature_DumpToLog(swigCPtr);
  }

  public int GetIsCreatureBumpable(CNWSCreature pBlockingCreature) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetIsCreatureBumpable(swigCPtr, CNWSCreature.getCPtr(pBlockingCreature));
    return retVal;
  }

  public void ExternalResolveAttack(uint oidTarget, int nAttackTime) {
    NWNXLibPINVOKE.CNWSCreature_ExternalResolveAttack(swigCPtr, oidTarget, nAttackTime);
  }

  public void BroadcastWhirlwindAttack(int bAttackMessage) {
    NWNXLibPINVOKE.CNWSCreature_BroadcastWhirlwindAttack(swigCPtr, bAttackMessage);
  }

  public void RestoreItemPropertiesInRepository(CItemRepository pItemRepository) {
    NWNXLibPINVOKE.CNWSCreature_RestoreItemPropertiesInRepository(swigCPtr, CItemRepository.getCPtr(pItemRepository));
  }

  public int BumpFriends(CNWSCreature pBlockingCreature, Vector vStart, Vector vEnd) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_BumpFriends(swigCPtr, CNWSCreature.getCPtr(pBlockingCreature), Vector.getCPtr(vStart), Vector.getCPtr(vEnd));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int GetPVPReputation(uint oidSource) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetPVPReputation(swigCPtr, oidSource);
    return retVal;
  }

  public void InitialisePVPList() {
    NWNXLibPINVOKE.CNWSCreature_InitialisePVPList(swigCPtr);
  }

  public void SetAssociatesToForgetAggression(uint oidTarget) {
    NWNXLibPINVOKE.CNWSCreature_SetAssociatesToForgetAggression(swigCPtr, oidTarget);
  }

  public void RemoveDominationEffect() {
    NWNXLibPINVOKE.CNWSCreature_RemoveDominationEffect(swigCPtr);
  }

  public byte CanEquipWeapon(CNWSItem pItem, uint* nEquipToSlot, int bEquipping, int bDisplayFeedback, CNWSPlayer pFeedbackPlayer) {
    byte retVal = NWNXLibPINVOKE.CNWSCreature_CanEquipWeapon__SWIG_0(swigCPtr, CNWSItem.getCPtr(pItem), nEquipToSlot, bEquipping, bDisplayFeedback, CNWSPlayer.getCPtr(pFeedbackPlayer));
    return retVal;
  }

  public byte CanEquipWeapon(CNWSItem pItem, uint* nEquipToSlot, int bEquipping, int bDisplayFeedback) {
    byte retVal = NWNXLibPINVOKE.CNWSCreature_CanEquipWeapon__SWIG_1(swigCPtr, CNWSItem.getCPtr(pItem), nEquipToSlot, bEquipping, bDisplayFeedback);
    return retVal;
  }

  public byte CanEquipShield(CNWSItem pItem, int bEquipping, int bDisplayFeedback) {
    byte retVal = NWNXLibPINVOKE.CNWSCreature_CanEquipShield(swigCPtr, CNWSItem.getCPtr(pItem), bEquipping, bDisplayFeedback);
    return retVal;
  }

  public byte CanEquipMiscellaneous(CNWSItem pItem, uint* pEquipSlot, int bEquipping, int bDisplayFeedback) {
    byte retVal = NWNXLibPINVOKE.CNWSCreature_CanEquipMiscellaneous(swigCPtr, CNWSItem.getCPtr(pItem), pEquipSlot, bEquipping, bDisplayFeedback);
    return retVal;
  }

  public int CheckProficiencies(CNWSItem pItem, uint nEquipToSlot) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_CheckProficiencies(swigCPtr, CNWSItem.getCPtr(pItem), nEquipToSlot);
    return retVal;
  }

  public int CheckItemClassRestrictions(CNWSItem pItem) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_CheckItemClassRestrictions(swigCPtr, CNWSItem.getCPtr(pItem));
    return retVal;
  }

  public int CheckItemAlignmentRestrictions(CNWSItem pItem) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_CheckItemAlignmentRestrictions(swigCPtr, CNWSItem.getCPtr(pItem));
    return retVal;
  }

  public int CheckItemRaceRestrictions(CNWSItem pItem) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_CheckItemRaceRestrictions(swigCPtr, CNWSItem.getCPtr(pItem));
    return retVal;
  }

  public int CheckUseMagicDeviceSkill(CNWSItem pItem, int nCheckType) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_CheckUseMagicDeviceSkill(swigCPtr, CNWSItem.getCPtr(pItem), nCheckType);
    return retVal;
  }

  public void SaveQuickButtons(CResGFF pRes, CResStruct pStruct) {
    NWNXLibPINVOKE.CNWSCreature_SaveQuickButtons(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pStruct));
  }

  public void UpdateTrapCheck() {
    NWNXLibPINVOKE.CNWSCreature_UpdateTrapCheck(swigCPtr);
  }

  public void UpdateTrapCheckDM() {
    NWNXLibPINVOKE.CNWSCreature_UpdateTrapCheckDM(swigCPtr);
  }

  public int DoStealthDetection(CNWSCreature pHidingCreature, int bClearLOS, int* bSeen, int* bHeard, int bTargetHiding) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_DoStealthDetection__SWIG_0(swigCPtr, CNWSCreature.getCPtr(pHidingCreature), bClearLOS, bSeen, bHeard, bTargetHiding);
    return retVal;
  }

  public int DoStealthDetection(CNWSCreature pHidingCreature, int bClearLOS, int* bSeen, int* bHeard) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_DoStealthDetection__SWIG_1(swigCPtr, CNWSCreature.getCPtr(pHidingCreature), bClearLOS, bSeen, bHeard);
    return retVal;
  }

  public int DoStealthDetection(CNWSCreature pHidingCreature, int bClearLOS, int* bSeen) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_DoStealthDetection__SWIG_2(swigCPtr, CNWSCreature.getCPtr(pHidingCreature), bClearLOS, bSeen);
    return retVal;
  }

  public int DoStealthDetection(CNWSCreature pHidingCreature, int bClearLOS) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_DoStealthDetection__SWIG_3(swigCPtr, CNWSCreature.getCPtr(pHidingCreature), bClearLOS);
    return retVal;
  }

  public int DoListenDetection(CNWSCreature pHidingCreature, int bTargetInvisible) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_DoListenDetection(swigCPtr, CNWSCreature.getCPtr(pHidingCreature), bTargetInvisible);
    return retVal;
  }

  public int DoSpotDetection(CNWSCreature pHidingCreature, int bTargetInvisible) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_DoSpotDetection(swigCPtr, CNWSCreature.getCPtr(pHidingCreature), bTargetInvisible);
    return retVal;
  }

  public float ComputeTotalWalkDistance() {
    float retVal = NWNXLibPINVOKE.CNWSCreature_ComputeTotalWalkDistance(swigCPtr);
    return retVal;
  }

  public void ComputeAIStateOnAction(int nActionId, uint oidActionTarget) {
    NWNXLibPINVOKE.CNWSCreature_ComputeAIStateOnAction(swigCPtr, nActionId, oidActionTarget);
  }

  public override int ClearAction(CNWSObjectActionNode pNode, int bIsTopmostAction) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_ClearAction(swigCPtr, CNWSObjectActionNode.getCPtr(pNode), bIsTopmostAction);
    return retVal;
  }

  public void UpdateCombatRoundTimer() {
    NWNXLibPINVOKE.CNWSCreature_UpdateCombatRoundTimer(swigCPtr);
  }

  public override void UpdateEffectPtrs() {
    NWNXLibPINVOKE.CNWSCreature_UpdateEffectPtrs(swigCPtr);
  }

  public override void UpdateAttributesOnEffect(CGameEffect e, int bLoadingGame) {
    NWNXLibPINVOKE.CNWSCreature_UpdateAttributesOnEffect__SWIG_0(swigCPtr, CGameEffect.getCPtr(e), bLoadingGame);
  }

  public override void UpdateAttributesOnEffect(CGameEffect e) {
    NWNXLibPINVOKE.CNWSCreature_UpdateAttributesOnEffect__SWIG_1(swigCPtr, CGameEffect.getCPtr(e));
  }

  public void AddToAssociateList(uint oidAssociate) {
    NWNXLibPINVOKE.CNWSCreature_AddToAssociateList(swigCPtr, oidAssociate);
  }

  public void RemoveFromAssociateList(uint oidAssociate) {
    NWNXLibPINVOKE.CNWSCreature_RemoveFromAssociateList(swigCPtr, oidAssociate);
  }

  public void ReprocessAssociateList() {
    NWNXLibPINVOKE.CNWSCreature_ReprocessAssociateList(swigCPtr);
  }

  public void CheckMasterIsValid(uint nCalendarDay, uint nTimeOfDay) {
    NWNXLibPINVOKE.CNWSCreature_CheckMasterIsValid(swigCPtr, nCalendarDay, nTimeOfDay);
  }

  public void SummonAssociate(CResRef cResRef, CExoString sAssociateName, ushort nAssociateType) {
    NWNXLibPINVOKE.CNWSCreature_SummonAssociate(swigCPtr, CResRef.getCPtr(cResRef), CExoString.getCPtr(sAssociateName), nAssociateType);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int CheckVisibleList(uint oidCreature) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_CheckVisibleList(swigCPtr, oidCreature);
    return retVal;
  }

  public void ResolveAttack(uint oidTarget, int nAttacks, int nTimeAnimation) {
    NWNXLibPINVOKE.CNWSCreature_ResolveAttack(swigCPtr, oidTarget, nAttacks, nTimeAnimation);
  }

  public void ResolveAttackRoll(CNWSObject pTarget) {
    NWNXLibPINVOKE.CNWSCreature_ResolveAttackRoll(swigCPtr, CNWSObject.getCPtr(pTarget));
  }

  public void ResolveSneakAttack(CNWSCreature pTarget) {
    NWNXLibPINVOKE.CNWSCreature_ResolveSneakAttack(swigCPtr, CNWSCreature.getCPtr(pTarget));
  }

  public void ResolveDeathAttack(CNWSCreature pTarget) {
    NWNXLibPINVOKE.CNWSCreature_ResolveDeathAttack(swigCPtr, CNWSCreature.getCPtr(pTarget));
  }

  public void ResolveCachedSpecialAttacks() {
    NWNXLibPINVOKE.CNWSCreature_ResolveCachedSpecialAttacks(swigCPtr);
  }

  public void ResolveSituationalModifiers(CNWSObject pTarget) {
    NWNXLibPINVOKE.CNWSCreature_ResolveSituationalModifiers(swigCPtr, CNWSObject.getCPtr(pTarget));
  }

  public void ResolveDamage(CNWSObject pTarget) {
    NWNXLibPINVOKE.CNWSCreature_ResolveDamage(swigCPtr, CNWSObject.getCPtr(pTarget));
  }

  public void ResolveItemCastSpell(CNWSObject pTarget) {
    NWNXLibPINVOKE.CNWSCreature_ResolveItemCastSpell(swigCPtr, CNWSObject.getCPtr(pTarget));
  }

  public void ResolveElementalDamage(CNWSObject pTarget) {
    NWNXLibPINVOKE.CNWSCreature_ResolveElementalDamage(swigCPtr, CNWSObject.getCPtr(pTarget));
  }

  public void ResolveOnHitEffect(CNWSObject pTarget, int bOffHandAttack, int bCritical) {
    NWNXLibPINVOKE.CNWSCreature_ResolveOnHitEffect(swigCPtr, CNWSObject.getCPtr(pTarget), bOffHandAttack, bCritical);
  }

  public void ResolveOnHitVisuals(CNWSObject pTarget) {
    NWNXLibPINVOKE.CNWSCreature_ResolveOnHitVisuals(swigCPtr, CNWSObject.getCPtr(pTarget));
  }

  public void ResolveRangedAttack(CNWSObject pTarget, int nAttacks, int nTimeAnimation) {
    NWNXLibPINVOKE.CNWSCreature_ResolveRangedAttack(swigCPtr, CNWSObject.getCPtr(pTarget), nAttacks, nTimeAnimation);
  }

  public void ResolveRangedSpecialAttack(CNWSObject pTarget, int nTimeAnimation) {
    NWNXLibPINVOKE.CNWSCreature_ResolveRangedSpecialAttack(swigCPtr, CNWSObject.getCPtr(pTarget), nTimeAnimation);
  }

  public void ResolvePostRangedDamage(CNWSObject pTarget) {
    NWNXLibPINVOKE.CNWSCreature_ResolvePostRangedDamage(swigCPtr, CNWSObject.getCPtr(pTarget));
  }

  public void ResolveRangedAnimations(CNWSObject pTarget, int nTimeAnimation) {
    NWNXLibPINVOKE.CNWSCreature_ResolveRangedAnimations(swigCPtr, CNWSObject.getCPtr(pTarget), nTimeAnimation);
  }

  public void ResolveRangedMiss(CNWSObject pTarget) {
    NWNXLibPINVOKE.CNWSCreature_ResolveRangedMiss(swigCPtr, CNWSObject.getCPtr(pTarget));
  }

  public void SignalRangedDamage(CNWSObject pTarget, int nAttacks) {
    NWNXLibPINVOKE.CNWSCreature_SignalRangedDamage(swigCPtr, CNWSObject.getCPtr(pTarget), nAttacks);
  }

  public void ResolveAmmunition(uint nTimeIndex) {
    NWNXLibPINVOKE.CNWSCreature_ResolveAmmunition(swigCPtr, nTimeIndex);
  }

  public void ResolveSafeProjectile(uint nTimeIndex, int nAttackIndex) {
    NWNXLibPINVOKE.CNWSCreature_ResolveSafeProjectile(swigCPtr, nTimeIndex, nAttackIndex);
  }

  public int GetAmmunitionAvailable(int nNumAttacks) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetAmmunitionAvailable(swigCPtr, nNumAttacks);
    return retVal;
  }

  public void ResolveMeleeAttack(CNWSObject pTarget, int nAttacks, int nTimeAnimation) {
    NWNXLibPINVOKE.CNWSCreature_ResolveMeleeAttack(swigCPtr, CNWSObject.getCPtr(pTarget), nAttacks, nTimeAnimation);
  }

  public void ResolveMeleeSpecialAttack(int nAttackIndex, int nAttacks, CNWSObject pTarget, int nTimeAnimation) {
    NWNXLibPINVOKE.CNWSCreature_ResolveMeleeSpecialAttack(swigCPtr, nAttackIndex, nAttacks, CNWSObject.getCPtr(pTarget), nTimeAnimation);
  }

  public void ResolveMeleeAnimations(int nAttackIndex, int nAttacks, CNWSObject pTarget, int nTimeAnimation) {
    NWNXLibPINVOKE.CNWSCreature_ResolveMeleeAnimations(swigCPtr, nAttackIndex, nAttacks, CNWSObject.getCPtr(pTarget), nTimeAnimation);
  }

  public void ResolvePostMeleeDamage(CNWSObject pTarget) {
    NWNXLibPINVOKE.CNWSCreature_ResolvePostMeleeDamage(swigCPtr, CNWSObject.getCPtr(pTarget));
  }

  public void SignalMeleeDamage(CNWSObject pTarget, int nAttacks) {
    NWNXLibPINVOKE.CNWSCreature_SignalMeleeDamage(swigCPtr, CNWSObject.getCPtr(pTarget), nAttacks);
  }

  public void ApplyOnHitBlindness(CNWSObject pTarget, int nDurationRounds) {
    NWNXLibPINVOKE.CNWSCreature_ApplyOnHitBlindness(swigCPtr, CNWSObject.getCPtr(pTarget), nDurationRounds);
  }

  public void ApplyOnHitConfusion(CNWSObject pTarget, int nDurationRounds) {
    NWNXLibPINVOKE.CNWSCreature_ApplyOnHitConfusion(swigCPtr, CNWSObject.getCPtr(pTarget), nDurationRounds);
  }

  public void ApplyOnHitDaze(CNWSObject pTarget, int nDurationRounds) {
    NWNXLibPINVOKE.CNWSCreature_ApplyOnHitDaze(swigCPtr, CNWSObject.getCPtr(pTarget), nDurationRounds);
  }

  public void ApplyOnHitDeafness(CNWSObject pTarget, int nDurationRounds) {
    NWNXLibPINVOKE.CNWSCreature_ApplyOnHitDeafness(swigCPtr, CNWSObject.getCPtr(pTarget), nDurationRounds);
  }

  public void ApplyOnHitDeathAttack(CNWSObject pTarget, int nDurationRounds) {
    NWNXLibPINVOKE.CNWSCreature_ApplyOnHitDeathAttack(swigCPtr, CNWSObject.getCPtr(pTarget), nDurationRounds);
  }

  public void ApplyOnHitDominate(CNWSObject pTarget, int nDurationRounds) {
    NWNXLibPINVOKE.CNWSCreature_ApplyOnHitDominate(swigCPtr, CNWSObject.getCPtr(pTarget), nDurationRounds);
  }

  public void ApplyOnHitDoom(CNWSObject pTarget, int nDurationRounds) {
    NWNXLibPINVOKE.CNWSCreature_ApplyOnHitDoom(swigCPtr, CNWSObject.getCPtr(pTarget), nDurationRounds);
  }

  public void ApplyOnHitFear(CNWSObject pTarget, int nDurationRounds) {
    NWNXLibPINVOKE.CNWSCreature_ApplyOnHitFear(swigCPtr, CNWSObject.getCPtr(pTarget), nDurationRounds);
  }

  public void ApplyOnHitHold(CNWSObject pTarget, int nDurationRounds) {
    NWNXLibPINVOKE.CNWSCreature_ApplyOnHitHold(swigCPtr, CNWSObject.getCPtr(pTarget), nDurationRounds);
  }

  public void ApplyOnHitSilence(CNWSObject pTarget, int nDurationRounds) {
    NWNXLibPINVOKE.CNWSCreature_ApplyOnHitSilence(swigCPtr, CNWSObject.getCPtr(pTarget), nDurationRounds);
  }

  public void ApplyOnHitSleep(CNWSObject pTarget, int nDurationRounds) {
    NWNXLibPINVOKE.CNWSCreature_ApplyOnHitSleep(swigCPtr, CNWSObject.getCPtr(pTarget), nDurationRounds);
  }

  public void ApplyOnHitSlow(CNWSObject pTarget, int nDurationRounds) {
    NWNXLibPINVOKE.CNWSCreature_ApplyOnHitSlow(swigCPtr, CNWSObject.getCPtr(pTarget), nDurationRounds);
  }

  public void ApplyOnHitStun(CNWSObject pTarget, int nDurationRounds) {
    NWNXLibPINVOKE.CNWSCreature_ApplyOnHitStun(swigCPtr, CNWSObject.getCPtr(pTarget), nDurationRounds);
  }

  public void ApplyOnHitWounding(CNWSObject pTarget, CNWItemProperty pProperty) {
    NWNXLibPINVOKE.CNWSCreature_ApplyOnHitWounding(swigCPtr, CNWSObject.getCPtr(pTarget), CNWItemProperty.getCPtr(pProperty));
  }

  public void ApplyOnHitVorpal(CNWSObject pTarget, CNWItemProperty pProperty) {
    NWNXLibPINVOKE.CNWSCreature_ApplyOnHitVorpal(swigCPtr, CNWSObject.getCPtr(pTarget), CNWItemProperty.getCPtr(pProperty));
  }

  public void ApplyOnHitCastSpell(CNWSObject pTarget, CNWItemProperty pProperty, CNWSItem pItem) {
    NWNXLibPINVOKE.CNWSCreature_ApplyOnHitCastSpell(swigCPtr, CNWSObject.getCPtr(pTarget), CNWItemProperty.getCPtr(pProperty), CNWSItem.getCPtr(pItem));
  }

  public void ApplyOnHitDispelMagic(CNWSObject pTarget, uint oidAttackItem) {
    NWNXLibPINVOKE.CNWSCreature_ApplyOnHitDispelMagic__SWIG_0(swigCPtr, CNWSObject.getCPtr(pTarget), oidAttackItem);
  }

  public void ApplyOnHitGreaterDispel(CNWSObject pTarget, uint oidAttackItem) {
    NWNXLibPINVOKE.CNWSCreature_ApplyOnHitGreaterDispel(swigCPtr, CNWSObject.getCPtr(pTarget), oidAttackItem);
  }

  public void ApplyOnHitKnock(CNWSObject pTarget, uint oidAttackItem) {
    NWNXLibPINVOKE.CNWSCreature_ApplyOnHitKnock(swigCPtr, CNWSObject.getCPtr(pTarget), oidAttackItem);
  }

  public void ApplyOnHitLesserDispel(CNWSObject pTarget, uint oidAttackItem) {
    NWNXLibPINVOKE.CNWSCreature_ApplyOnHitLesserDispel(swigCPtr, CNWSObject.getCPtr(pTarget), oidAttackItem);
  }

  public void ApplyOnHitMordysDisjunction(CNWSObject pTarget, uint oidAttackItem) {
    NWNXLibPINVOKE.CNWSCreature_ApplyOnHitMordysDisjunction(swigCPtr, CNWSObject.getCPtr(pTarget), oidAttackItem);
  }

  public void ApplyOnHitVampiricRegeneration(CNWSObject pTarget, CNWItemProperty pProperty) {
    NWNXLibPINVOKE.CNWSCreature_ApplyOnHitVampiricRegeneration(swigCPtr, CNWSObject.getCPtr(pTarget), CNWItemProperty.getCPtr(pProperty));
  }

  public void ApplyOnHitDispelMagic(CNWSObject pTarget, CNWItemProperty pProperty) {
    NWNXLibPINVOKE.CNWSCreature_ApplyOnHitDispelMagic__SWIG_1(swigCPtr, CNWSObject.getCPtr(pTarget), CNWItemProperty.getCPtr(pProperty));
  }

  public void ApplyOnHitAbilityDamage(CNWSObject pTarget, CNWItemProperty pProperty) {
    NWNXLibPINVOKE.CNWSCreature_ApplyOnHitAbilityDamage(swigCPtr, CNWSObject.getCPtr(pTarget), CNWItemProperty.getCPtr(pProperty));
  }

  public void ApplyOnHitDisease(CNWSObject pTarget, CNWItemProperty pProperty) {
    NWNXLibPINVOKE.CNWSCreature_ApplyOnHitDisease(swigCPtr, CNWSObject.getCPtr(pTarget), CNWItemProperty.getCPtr(pProperty));
  }

  public void ApplyOnHitPoison(CNWSObject pTarget, CNWItemProperty pProperty) {
    NWNXLibPINVOKE.CNWSCreature_ApplyOnHitPoison(swigCPtr, CNWSObject.getCPtr(pTarget), CNWItemProperty.getCPtr(pProperty));
  }

  public void ApplyOnHitSlayAlignment(CNWSObject pTarget, CNWItemProperty pProperty) {
    NWNXLibPINVOKE.CNWSCreature_ApplyOnHitSlayAlignment(swigCPtr, CNWSObject.getCPtr(pTarget), CNWItemProperty.getCPtr(pProperty));
  }

  public void ApplyOnHitSlayAlignmentGroup(CNWSObject pTarget, CNWItemProperty pProperty) {
    NWNXLibPINVOKE.CNWSCreature_ApplyOnHitSlayAlignmentGroup(swigCPtr, CNWSObject.getCPtr(pTarget), CNWItemProperty.getCPtr(pProperty));
  }

  public void ApplyOnHitSlayRacialGroup(CNWSObject pTarget, CNWItemProperty pProperty) {
    NWNXLibPINVOKE.CNWSCreature_ApplyOnHitSlayRacialGroup(swigCPtr, CNWSObject.getCPtr(pTarget), CNWItemProperty.getCPtr(pProperty));
  }

  public void ApplyOnHitLevelDrain(CNWSObject pTarget, CNWItemProperty pProperty) {
    NWNXLibPINVOKE.CNWSCreature_ApplyOnHitLevelDrain(swigCPtr, CNWSObject.getCPtr(pTarget), CNWItemProperty.getCPtr(pProperty));
  }

  public int GetCanSlayAlignment(CNWSObject pTarget, CNWItemProperty pProperty) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_GetCanSlayAlignment(swigCPtr, CNWSObject.getCPtr(pTarget), CNWItemProperty.getCPtr(pProperty));
    return retVal;
  }

  public int CalculateMaxElementalDamage(CNWSObject pTarget, int bOffHand) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_CalculateMaxElementalDamage(swigCPtr, CNWSObject.getCPtr(pTarget), bOffHand);
    return retVal;
  }

  public uint CalculateProjectileTimeToTarget(Vector vPosition, int bThrownWeapon) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_CalculateProjectileTimeToTarget(swigCPtr, Vector.getCPtr(vPosition), bThrownWeapon);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public uint WalkUpdateLocation(ushort nActionGroupID) {
    uint retVal = NWNXLibPINVOKE.CNWSCreature_WalkUpdateLocation(swigCPtr, nActionGroupID);
    return retVal;
  }

  public int WalkUpdateLocationDistance(float fDistance, Vector vNewPosition, Vector vNewOrientation, CExoArrayListUInt32 aIntersectingSubAreas) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_WalkUpdateLocationDistance(swigCPtr, fDistance, Vector.getCPtr(vNewPosition), Vector.getCPtr(vNewOrientation), CExoArrayListUInt32.getCPtr(aIntersectingSubAreas));
    return retVal;
  }

  public int WalkUpdateLocationTestDistance(Vector vStart, Vector vEnd) {
    int retVal = NWNXLibPINVOKE.CNWSCreature_WalkUpdateLocationTestDistance(swigCPtr, Vector.getCPtr(vStart), Vector.getCPtr(vEnd));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public override CExoLocString GetFirstName() {
    CExoLocString ret = new CExoLocString(NWNXLibPINVOKE.CNWSCreature_GetFirstName(swigCPtr), false);
    return ret;
  }

  public override CExoLocString GetLastName() {
    CExoLocString ret = new CExoLocString(NWNXLibPINVOKE.CNWSCreature_GetLastName(swigCPtr), false);
    return ret;
  }

  public new void _Destructor() {
    NWNXLibPINVOKE.CNWSCreature__Destructor(swigCPtr);
  }

}

}

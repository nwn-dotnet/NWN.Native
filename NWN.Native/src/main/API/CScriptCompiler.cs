//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public unsafe class CScriptCompiler : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CScriptCompiler(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CScriptCompiler obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CScriptCompiler() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NWNXLibPINVOKE.delete_CScriptCompiler(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public global::System.IntPtr Pointer {
    get {
      return swigCPtr.Handle;
    }
  }

  public static unsafe implicit operator void*(CScriptCompiler self) {
    return (void*)self.swigCPtr.Handle;
  }

  public static unsafe CScriptCompiler FromPointer(void* pointer, bool memoryOwn = false) {
    return pointer != null ? new CScriptCompiler((global::System.IntPtr)pointer, memoryOwn) : null;
  }

  public static CScriptCompiler FromPointer(global::System.IntPtr pointer, bool memoryOwn = false) {
    return pointer != global::System.IntPtr.Zero ? new CScriptCompiler(pointer, memoryOwn) : null;
  }

  public bool Equals(CScriptCompiler other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }

    if (ReferenceEquals(this, other)) {
      return true;
    }

    return Pointer.Equals(other.Pointer);
  }

  public override bool Equals(object obj) {
    return ReferenceEquals(this, obj) || obj is CScriptCompiler other && Equals(other);
  }

  public override int GetHashCode() {
    return swigCPtr.Handle.GetHashCode();
  }

  public static bool operator ==(CScriptCompiler left, CScriptCompiler right) {
    return Equals(left, right);
  }

  public static bool operator !=(CScriptCompiler left, CScriptCompiler right) {
    return !Equals(left, right);
  }

  public static CScriptCompilerAPI MakeDefaultAPI() {
    CScriptCompilerAPI ret = new CScriptCompilerAPI(NWNXLibPINVOKE.CScriptCompiler_MakeDefaultAPI(), true);
    return ret;
  }

  public CScriptCompilerAPI m_cAPI {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_cAPI_set(swigCPtr, CScriptCompilerAPI.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_cAPI_get(swigCPtr);
      CScriptCompilerAPI ret = (cPtr == global::System.IntPtr.Zero) ? null : new CScriptCompilerAPI(cPtr, false);
      return ret;
    } 
  }

  public ushort m_nResTypeSource {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nResTypeSource_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CScriptCompiler_m_nResTypeSource_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nResTypeCompiled {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nResTypeCompiled_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CScriptCompiler_m_nResTypeCompiled_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nResTypeDebug {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nResTypeDebug_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CScriptCompiler_m_nResTypeDebug_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nKeyWords {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nKeyWords_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nKeyWords_get(swigCPtr);
      return retVal;
    }

  }

  public CScriptCompilerKeyWordEntry m_pcKeyWords {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_pcKeyWords_set(swigCPtr, CScriptCompilerKeyWordEntry.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_pcKeyWords_get(swigCPtr);
      CScriptCompilerKeyWordEntry ret = (cPtr == global::System.IntPtr.Zero) ? null : new CScriptCompilerKeyWordEntry(cPtr, false);
      return ret;
    } 
  }

  public int m_nParseTreeNodeBlockEmptyNodes {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nParseTreeNodeBlockEmptyNodes_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nParseTreeNodeBlockEmptyNodes_get(swigCPtr);
      return retVal;
    }

  }

  public CScriptParseTreeNodeBlock m_pCurrentParseTreeNodeBlock {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_pCurrentParseTreeNodeBlock_set(swigCPtr, CScriptParseTreeNodeBlock.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_pCurrentParseTreeNodeBlock_get(swigCPtr);
      CScriptParseTreeNodeBlock ret = (cPtr == global::System.IntPtr.Zero) ? null : new CScriptParseTreeNodeBlock(cPtr, false);
      return ret;
    } 
  }

  public CScriptParseTreeNodeBlock m_pParseTreeNodeBlockHead {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_pParseTreeNodeBlockHead_set(swigCPtr, CScriptParseTreeNodeBlock.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_pParseTreeNodeBlockHead_get(swigCPtr);
      CScriptParseTreeNodeBlock ret = (cPtr == global::System.IntPtr.Zero) ? null : new CScriptParseTreeNodeBlock(cPtr, false);
      return ret;
    } 
  }

  public CScriptParseTreeNodeBlock m_pParseTreeNodeBlockTail {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_pParseTreeNodeBlockTail_set(swigCPtr, CScriptParseTreeNodeBlock.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_pParseTreeNodeBlockTail_get(swigCPtr);
      CScriptParseTreeNodeBlock ret = (cPtr == global::System.IntPtr.Zero) ? null : new CScriptParseTreeNodeBlock(cPtr, false);
      return ret;
    } 
  }

  public void** m_ppsParseTreeFileNames {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_ppsParseTreeFileNames_set(swigCPtr, (global::System.IntPtr)value);
    } 
    get {
        global::System.IntPtr retVal = NWNXLibPINVOKE.CScriptCompiler_m_ppsParseTreeFileNames_get(swigCPtr);
        return (void**)retVal;
    }

  }

  public int m_nNextParseTreeFileName {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nNextParseTreeFileName_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nNextParseTreeFileName_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nCurrentParseTreeFileName {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nCurrentParseTreeFileName_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nCurrentParseTreeFileName_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nCurrentLineNumber {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nCurrentLineNumber_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nCurrentLineNumber_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nCurrentLineNumberFileReference {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nCurrentLineNumberFileReference_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nCurrentLineNumberFileReference_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nCurrentLineNumberReferences {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nCurrentLineNumberReferences_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nCurrentLineNumberReferences_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nCurrentLineNumberBinaryStartInstruction {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nCurrentLineNumberBinaryStartInstruction_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nCurrentLineNumberBinaryStartInstruction_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nCurrentLineNumberBinaryEndInstruction {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nCurrentLineNumberBinaryEndInstruction_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nCurrentLineNumberBinaryEndInstruction_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nTableFileNames {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nTableFileNames_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nTableFileNames_get(swigCPtr);
      return retVal;
    }

  }

  public CExoStringArray m_psTableFileNames {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_psTableFileNames_set(swigCPtr, CExoStringArray.getCPtr(value));
    } 
    get {
        global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_psTableFileNames_get(swigCPtr);;
        CExoStringArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoStringArray(cPtr, false);
        return ret;
    }

  }

  public int m_nLineNumberEntries {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nLineNumberEntries_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nLineNumberEntries_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nFinalLineNumberEntries {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nFinalLineNumberEntries_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nFinalLineNumberEntries_get(swigCPtr);
      return retVal;
    }

  }

  public SWIGTYPE_p_std__vectorT_int_t m_pnTableInstructionFileReference {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_pnTableInstructionFileReference_set(swigCPtr, SWIGTYPE_p_std__vectorT_int_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_pnTableInstructionFileReference_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_int_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_int_t m_pnTableInstructionLineNumber {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_pnTableInstructionLineNumber_set(swigCPtr, SWIGTYPE_p_std__vectorT_int_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_pnTableInstructionLineNumber_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_int_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_int_t m_pnTableInstructionBinaryStart {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_pnTableInstructionBinaryStart_set(swigCPtr, SWIGTYPE_p_std__vectorT_int_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_pnTableInstructionBinaryStart_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_int_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_int_t m_pnTableInstructionBinaryEnd {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_pnTableInstructionBinaryEnd_set(swigCPtr, SWIGTYPE_p_std__vectorT_int_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_pnTableInstructionBinaryEnd_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_int_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_int_t m_pnTableInstructionBinaryFinal {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_pnTableInstructionBinaryFinal_set(swigCPtr, SWIGTYPE_p_std__vectorT_int_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_pnTableInstructionBinaryFinal_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_int_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_int_t m_pnTableInstructionBinarySortedOrder {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_pnTableInstructionBinarySortedOrder_set(swigCPtr, SWIGTYPE_p_std__vectorT_int_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_pnTableInstructionBinarySortedOrder_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_int_t(cPtr, false);
      return ret;
    } 
  }

  public int m_nSymbolTableVariables {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nSymbolTableVariables_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nSymbolTableVariables_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nFinalSymbolTableVariables {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nFinalSymbolTableVariables_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nFinalSymbolTableVariables_get(swigCPtr);
      return retVal;
    }

  }

  public SWIGTYPE_p_std__vectorT_int_t m_pnSymbolTableVarType {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_pnSymbolTableVarType_set(swigCPtr, SWIGTYPE_p_std__vectorT_int_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_pnSymbolTableVarType_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_int_t(cPtr, false);
      return ret;
    } 
  }

  public VectorCExoString m_psSymbolTableVarName {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_psSymbolTableVarName_set(swigCPtr, VectorCExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_psSymbolTableVarName_get(swigCPtr);
      VectorCExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new VectorCExoString(cPtr, false);
      return ret;
    } 
  }

  public VectorCExoString m_psSymbolTableVarStructureName {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_psSymbolTableVarStructureName_set(swigCPtr, VectorCExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_psSymbolTableVarStructureName_get(swigCPtr);
      VectorCExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new VectorCExoString(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_int_t m_pnSymbolTableVarStackLoc {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_pnSymbolTableVarStackLoc_set(swigCPtr, SWIGTYPE_p_std__vectorT_int_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_pnSymbolTableVarStackLoc_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_int_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_int_t m_pnSymbolTableVarBegin {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_pnSymbolTableVarBegin_set(swigCPtr, SWIGTYPE_p_std__vectorT_int_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_pnSymbolTableVarBegin_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_int_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_int_t m_pnSymbolTableVarEnd {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_pnSymbolTableVarEnd_set(swigCPtr, SWIGTYPE_p_std__vectorT_int_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_pnSymbolTableVarEnd_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_int_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_int_t m_pnSymbolTableBinaryFinal {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_pnSymbolTableBinaryFinal_set(swigCPtr, SWIGTYPE_p_std__vectorT_int_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_pnSymbolTableBinaryFinal_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_int_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_int_t m_pnSymbolTableBinarySortedOrder {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_pnSymbolTableBinarySortedOrder_set(swigCPtr, SWIGTYPE_p_std__vectorT_int_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_pnSymbolTableBinarySortedOrder_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_int_t(cPtr, false);
      return ret;
    } 
  }

  public int m_bCompileConditionalFile {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_bCompileConditionalFile_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_bCompileConditionalFile_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bOldCompileConditionalFile {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_bOldCompileConditionalFile_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_bOldCompileConditionalFile_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bCompileConditionalOrMain {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_bCompileConditionalOrMain_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_bCompileConditionalOrMain_get(swigCPtr);
      return retVal;
    }

  }

  public CExoString m_sLanguageSource {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_sLanguageSource_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_sLanguageSource_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public CExoString m_sOutputAlias {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_sOutputAlias_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_sOutputAlias_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public CExoString m_sGraphvizPath {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_sGraphvizPath_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_sGraphvizPath_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public int m_nLines {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nLines_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nLines_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nCharacterOnLine {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nCharacterOnLine_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nCharacterOnLine_get(swigCPtr);
      return retVal;
    }

  }

  public int* m_pnHashString {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_pnHashString_set(swigCPtr, value);
    } 
    get {
      int* retVal = NWNXLibPINVOKE.CScriptCompiler_m_pnHashString_get(swigCPtr);
      return retVal;
    }

  }

  public CScriptCompilerIdentifierHashTableEntry m_pIdentifierHashTable {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_pIdentifierHashTable_set(swigCPtr, CScriptCompilerIdentifierHashTableEntry.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_pIdentifierHashTable_get(swigCPtr);
      CScriptCompilerIdentifierHashTableEntry ret = (cPtr == global::System.IntPtr.Zero) ? null : new CScriptCompilerIdentifierHashTableEntry(cPtr, false);
      return ret;
    } 
  }

  public int m_nTokenStatus {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nTokenStatus_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nTokenStatus_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nTokenCharacters {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nTokenCharacters_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nTokenCharacters_get(swigCPtr);
      return retVal;
    }

  }

  public NativeArray<byte> m_pchToken {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_pchToken_set(swigCPtr, value);
    } 
    get {
      global::System.IntPtr arrayPtr = NWNXLibPINVOKE.CScriptCompiler_m_pchToken_get(swigCPtr);
      NativeArray<byte> retVal = new NativeArray<byte>(arrayPtr, 65536);

      return retVal; // byte[65536]
    }

  }

  public CScriptCompilerStackEntry m_pSRStack {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_pSRStack_set(swigCPtr, CScriptCompilerStackEntry.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_pSRStack_get(swigCPtr);
      CScriptCompilerStackEntry ret = (cPtr == global::System.IntPtr.Zero) ? null : new CScriptCompilerStackEntry(cPtr, false);
      return ret;
    } 
  }

  public int m_nSRStackEntries {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nSRStackEntries_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nSRStackEntries_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nSRStackStates {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nSRStackStates_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nSRStackStates_get(swigCPtr);
      return retVal;
    }

  }

  public CExoString m_sCurrentFunction {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_sCurrentFunction_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_sCurrentFunction_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public int m_bCompileIdentifierList {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_bCompileIdentifierList_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_bCompileIdentifierList_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bCompileIdentifierConstants {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_bCompileIdentifierConstants_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_bCompileIdentifierConstants_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nIdentifierListState {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nIdentifierListState_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nIdentifierListState_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nIdentifierListVector {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nIdentifierListVector_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nIdentifierListVector_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nIdentifierListEngineStructure {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nIdentifierListEngineStructure_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nIdentifierListEngineStructure_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nIdentifierListReturnType {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nIdentifierListReturnType_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nIdentifierListReturnType_get(swigCPtr);
      return retVal;
    }

  }

  public CScriptCompilerIdListEntry m_pcIdentifierList {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_pcIdentifierList_set(swigCPtr, CScriptCompilerIdListEntry.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_pcIdentifierList_get(swigCPtr);
      CScriptCompilerIdListEntry ret = (cPtr == global::System.IntPtr.Zero) ? null : new CScriptCompilerIdListEntry(cPtr, false);
      return ret;
    } 
  }

  public int m_nOccupiedIdentifiers {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nOccupiedIdentifiers_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nOccupiedIdentifiers_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nMaxPredefinedIdentifierId {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nMaxPredefinedIdentifierId_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nMaxPredefinedIdentifierId_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nPredefinedIdentifierOrder {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nPredefinedIdentifierOrder_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nPredefinedIdentifierOrder_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nCompileFileLevel {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nCompileFileLevel_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nCompileFileLevel_get(swigCPtr);
      return retVal;
    }

  }

  public CScriptCompilerIncludeFileStackEntryArray m_pcIncludeFileStack {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_pcIncludeFileStack_set(swigCPtr, CScriptCompilerIncludeFileStackEntryArray.getCPtr(value));
    } 
    get {
        global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_pcIncludeFileStack_get(swigCPtr);;
        CScriptCompilerIncludeFileStackEntryArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new CScriptCompilerIncludeFileStackEntryArray(cPtr, false);
        return ret;
    }

  }

  public int m_nMaxIncludeDepth {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nMaxIncludeDepth_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nMaxIncludeDepth_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nVarStackRecursionLevel {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nVarStackRecursionLevel_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nVarStackRecursionLevel_get(swigCPtr);
      return retVal;
    }

  }

  public CScriptCompilerVarStackEntry m_pcVarStackList {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_pcVarStackList_set(swigCPtr, CScriptCompilerVarStackEntry.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_pcVarStackList_get(swigCPtr);
      CScriptCompilerVarStackEntry ret = (cPtr == global::System.IntPtr.Zero) ? null : new CScriptCompilerVarStackEntry(cPtr, false);
      return ret;
    } 
  }

  public int m_nOccupiedVariables {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nOccupiedVariables_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nOccupiedVariables_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nVarStackVariableType {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nVarStackVariableType_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nVarStackVariableType_get(swigCPtr);
      return retVal;
    }

  }

  public CExoString m_sVarStackVariableTypeName {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_sVarStackVariableTypeName_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_sVarStackVariableTypeName_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public CScriptCompilerStructureEntry m_pcStructList {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_pcStructList_set(swigCPtr, CScriptCompilerStructureEntry.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_pcStructList_get(swigCPtr);
      CScriptCompilerStructureEntry ret = (cPtr == global::System.IntPtr.Zero) ? null : new CScriptCompilerStructureEntry(cPtr, false);
      return ret;
    } 
  }

  public CScriptCompilerStructureFieldEntry m_pcStructFieldList {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_pcStructFieldList_set(swigCPtr, CScriptCompilerStructureFieldEntry.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_pcStructFieldList_get(swigCPtr);
      CScriptCompilerStructureFieldEntry ret = (cPtr == global::System.IntPtr.Zero) ? null : new CScriptCompilerStructureFieldEntry(cPtr, false);
      return ret;
    } 
  }

  public int m_nMaxStructures {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nMaxStructures_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nMaxStructures_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nMaxStructureFields {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nMaxStructureFields_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nMaxStructureFields_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nStructureDefinition {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nStructureDefinition_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nStructureDefinition_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nStructureDefinitionFieldStart {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nStructureDefinitionFieldStart_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nStructureDefinitionFieldStart_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bGlobalVariableDefinition {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_bGlobalVariableDefinition_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_bGlobalVariableDefinition_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nGlobalVariables {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nGlobalVariables_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nGlobalVariables_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nGlobalVariableSize {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nGlobalVariableSize_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nGlobalVariableSize_get(swigCPtr);
      return retVal;
    }

  }

  public CScriptParseTreeNode m_pGlobalVariableParseTree {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_pGlobalVariableParseTree_set(swigCPtr, CScriptParseTreeNode.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_pGlobalVariableParseTree_get(swigCPtr);
      CScriptParseTreeNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CScriptParseTreeNode(cPtr, false);
      return ret;
    } 
  }

  public int m_bConstantVariableDefinition {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_bConstantVariableDefinition_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_bConstantVariableDefinition_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nLoopIdentifier {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nLoopIdentifier_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nLoopIdentifier_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nLoopStackDepth {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nLoopStackDepth_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nLoopStackDepth_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nSwitchLevel {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nSwitchLevel_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nSwitchLevel_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nSwitchIdentifier {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nSwitchIdentifier_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nSwitchIdentifier_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nSwitchStackDepth {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nSwitchStackDepth_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nSwitchStackDepth_get(swigCPtr);
      return retVal;
    }

  }

  public CExoString m_sUndefinedIdentifier {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_sUndefinedIdentifier_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_sUndefinedIdentifier_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public CExoString m_sParserErrorExtraInfo {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_sParserErrorExtraInfo_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_sParserErrorExtraInfo_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public int m_bSwitchLabelDefault {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_bSwitchLabelDefault_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_bSwitchLabelDefault_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nSwitchLabelNumber {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nSwitchLabelNumber_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nSwitchLabelNumber_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nSwitchLabelArraySize {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nSwitchLabelArraySize_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nSwitchLabelArraySize_get(swigCPtr);
      return retVal;
    }

  }

  public int* m_pnSwitchLabelStatements {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_pnSwitchLabelStatements_set(swigCPtr, value);
    } 
    get {
      int* retVal = NWNXLibPINVOKE.CScriptCompiler_m_pnSwitchLabelStatements_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nNumEngineDefinedStructures {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nNumEngineDefinedStructures_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nNumEngineDefinedStructures_get(swigCPtr);
      return retVal;
    }

  }

  public int* m_pbEngineDefinedStructureValid {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_pbEngineDefinedStructureValid_set(swigCPtr, value);
    } 
    get {
      int* retVal = NWNXLibPINVOKE.CScriptCompiler_m_pbEngineDefinedStructureValid_get(swigCPtr);
      return retVal;
    }

  }

  public CExoString m_psEngineDefinedStructureName {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_psEngineDefinedStructureName_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_psEngineDefinedStructureName_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public int m_bAssignmentToVariable {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_bAssignmentToVariable_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_bAssignmentToVariable_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bInStructurePart {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_bInStructurePart_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_bInStructurePart_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bFunctionImp {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_bFunctionImp_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_bFunctionImp_get(swigCPtr);
      return retVal;
    }

  }

  public CExoString m_sFunctionImpName {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_sFunctionImpName_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_sFunctionImpName_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public int m_nFunctionImpReturnType {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nFunctionImpReturnType_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nFunctionImpReturnType_get(swigCPtr);
      return retVal;
    }

  }

  public CExoString m_sFunctionImpReturnStructureName {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_sFunctionImpReturnStructureName_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_sFunctionImpReturnStructureName_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public int m_nFunctionImpAbortStackPointer {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nFunctionImpAbortStackPointer_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nFunctionImpAbortStackPointer_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nStackCurrentDepth {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nStackCurrentDepth_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nStackCurrentDepth_get(swigCPtr);
      return retVal;
    }

  }

  public NativeArray<byte> m_pchStackTypes {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_pchStackTypes_set(swigCPtr, value);
    } 
    get {
      global::System.IntPtr arrayPtr = NWNXLibPINVOKE.CScriptCompiler_m_pchStackTypes_get(swigCPtr);
      NativeArray<byte> retVal = new NativeArray<byte>(arrayPtr, 8192);

      return retVal; // byte[8192]
    }

  }

  public int m_nRunTimeIntegers {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nRunTimeIntegers_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nRunTimeIntegers_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nRunTimeFloats {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nRunTimeFloats_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nRunTimeFloats_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nRunTimeStrings {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nRunTimeStrings_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nRunTimeStrings_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nRunTimeObjects {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nRunTimeObjects_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nRunTimeObjects_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nRunTimeActions {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nRunTimeActions_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nRunTimeActions_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nSymbolQueryListSize {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nSymbolQueryListSize_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nSymbolQueryListSize_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nSymbolQueryList {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nSymbolQueryList_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nSymbolQueryList_get(swigCPtr);
      return retVal;
    }

  }

  public CScriptCompilerSymbolTableEntry m_pSymbolQueryList {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_pSymbolQueryList_set(swigCPtr, CScriptCompilerSymbolTableEntry.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_pSymbolQueryList_get(swigCPtr);
      CScriptCompilerSymbolTableEntry ret = (cPtr == global::System.IntPtr.Zero) ? null : new CScriptCompilerSymbolTableEntry(cPtr, false);
      return ret;
    } 
  }

  public int m_nSymbolLabelListSize {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nSymbolLabelListSize_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nSymbolLabelListSize_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nSymbolLabelList {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nSymbolLabelList_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nSymbolLabelList_get(swigCPtr);
      return retVal;
    }

  }

  public CScriptCompilerSymbolTableEntry m_pSymbolLabelList {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_pSymbolLabelList_set(swigCPtr, CScriptCompilerSymbolTableEntry.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_pSymbolLabelList_get(swigCPtr);
      CScriptCompilerSymbolTableEntry ret = (cPtr == global::System.IntPtr.Zero) ? null : new CScriptCompilerSymbolTableEntry(cPtr, false);
      return ret;
    } 
  }

  public NativeArray<int> m_pSymbolLabelStartEntry {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_pSymbolLabelStartEntry_set(swigCPtr, value);
    } 
    get {
      global::System.IntPtr arrayPtr = NWNXLibPINVOKE.CScriptCompiler_m_pSymbolLabelStartEntry_get(swigCPtr);
      NativeArray<int> retVal = new NativeArray<int>(arrayPtr, 512);

      return retVal; // int[512]
    }

  }

  public int m_nGenerateDebuggerOutput {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nGenerateDebuggerOutput_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nGenerateDebuggerOutput_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bAutomaticCleanUpAfterCompiles {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_bAutomaticCleanUpAfterCompiles_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_bAutomaticCleanUpAfterCompiles_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nOptimizationFlags {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nOptimizationFlags_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CScriptCompiler_m_nOptimizationFlags_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nTotalCompileNodes {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nTotalCompileNodes_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nTotalCompileNodes_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bCompilingConditional {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_bCompilingConditional_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_bCompilingConditional_get(swigCPtr);
      return retVal;
    }

  }

  public byte* m_pchOutputCode {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_pchOutputCode_set(swigCPtr, value);
    } 
    get {
      byte* retVal = NWNXLibPINVOKE.CScriptCompiler_m_pchOutputCode_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nOutputCodeSize {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nOutputCodeSize_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nOutputCodeSize_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nOutputCodeLength {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nOutputCodeLength_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nOutputCodeLength_get(swigCPtr);
      return retVal;
    }

  }

  public SWIGTYPE_p_std__vectorT_int_t m_aOutputCodeInstructionBoundaries {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_aOutputCodeInstructionBoundaries_set(swigCPtr, SWIGTYPE_p_std__vectorT_int_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_aOutputCodeInstructionBoundaries_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_int_t(cPtr, false);
      return ret;
    } 
  }

  public byte* m_pchResolvedOutputBuffer {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_pchResolvedOutputBuffer_set(swigCPtr, value);
    } 
    get {
      byte* retVal = NWNXLibPINVOKE.CScriptCompiler_m_pchResolvedOutputBuffer_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nResolvedOutputBufferSize {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nResolvedOutputBufferSize_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nResolvedOutputBufferSize_get(swigCPtr);
      return retVal;
    }

  }

  public byte* m_pchDebuggerCode {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_pchDebuggerCode_set(swigCPtr, value);
    } 
    get {
      byte* retVal = NWNXLibPINVOKE.CScriptCompiler_m_pchDebuggerCode_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nDebuggerCodeSize {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nDebuggerCodeSize_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nDebuggerCodeSize_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nDebuggerCodeLength {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nDebuggerCodeLength_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nDebuggerCodeLength_get(swigCPtr);
      return retVal;
    }

  }

  public NativeArray<byte> m_pchActionParameters {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_pchActionParameters_set(swigCPtr, value);
    } 
    get {
      global::System.IntPtr arrayPtr = NWNXLibPINVOKE.CScriptCompiler_m_pchActionParameters_get(swigCPtr);
      NativeArray<byte> retVal = new NativeArray<byte>(arrayPtr, 32);

      return retVal; // byte[32]
    }

  }

  public CExoStringArray m_pchActionParameterStructureNames {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_pchActionParameterStructureNames_set(swigCPtr, CExoStringArray.getCPtr(value));
    } 
    get {
        global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_pchActionParameterStructureNames_get(swigCPtr);;
        CExoStringArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoStringArray(cPtr, false);
        return ret;
    }

  }

  public int m_nFinalBinarySize {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nFinalBinarySize_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CScriptCompiler_m_nFinalBinarySize_get(swigCPtr);
      return retVal;
    }

  }

  public CExoString m_sCapturedError {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_sCapturedError_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_m_sCapturedError_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public uint m_nCapturedErrorStrRef {
    set {
      NWNXLibPINVOKE.CScriptCompiler_m_nCapturedErrorStrRef_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CScriptCompiler_m_nCapturedErrorStrRef_get(swigCPtr);
      return retVal;
    }

  }

  public CScriptCompiler(ushort nSource, ushort nCompiled, ushort nDebug, CScriptCompilerAPI api) : this(NWNXLibPINVOKE.new_CScriptCompiler__SWIG_0(nSource, nCompiled, nDebug, CScriptCompilerAPI.getCPtr(api)), true) {
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public CScriptCompiler(ushort nSource, ushort nCompiled, ushort nDebug) : this(NWNXLibPINVOKE.new_CScriptCompiler__SWIG_1(nSource, nCompiled, nDebug), true) {
  }

  public void SetIdentifierSpecification(CExoString sLanguageSource) {
    NWNXLibPINVOKE.CScriptCompiler_SetIdentifierSpecification(swigCPtr, CExoString.getCPtr(sLanguageSource));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetOutputAlias(CExoString sAlias) {
    NWNXLibPINVOKE.CScriptCompiler_SetOutputAlias(swigCPtr, CExoString.getCPtr(sAlias));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetGenerateDebuggerOutput(int nValue) {
    NWNXLibPINVOKE.CScriptCompiler_SetGenerateDebuggerOutput(swigCPtr, nValue);
  }

  public void SetAutomaticCleanUpAfterCompiles(int bValue) {
    NWNXLibPINVOKE.CScriptCompiler_SetAutomaticCleanUpAfterCompiles(swigCPtr, bValue);
  }

  public void CleanUpAfterCompiles() {
    NWNXLibPINVOKE.CScriptCompiler_CleanUpAfterCompiles(swigCPtr);
  }

  public void SetCompileConditionalFile(int nValue) {
    NWNXLibPINVOKE.CScriptCompiler_SetCompileConditionalFile(swigCPtr, nValue);
  }

  public void SetCompileConditionalOrMain(int nValue) {
    NWNXLibPINVOKE.CScriptCompiler_SetCompileConditionalOrMain(swigCPtr, nValue);
  }

  public int CompileFile(CExoString sFileName) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_CompileFile(swigCPtr, CExoString.getCPtr(sFileName));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int CompileScriptChunk(CExoString sScriptChunk, int bWrapIntoMain) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_CompileScriptChunk(swigCPtr, CExoString.getCPtr(sScriptChunk), bWrapIntoMain);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int CompileScriptConditional(CExoString sScriptConditional) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_CompileScriptConditional(swigCPtr, CExoString.getCPtr(sScriptConditional));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int GetCompiledScriptCode(byte** pnCode, int* nCodeSize) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_GetCompiledScriptCode(swigCPtr, (global::System.IntPtr)pnCode, nCodeSize);
    return retVal;
  }

  public void ClearCompiledScriptCode() {
    NWNXLibPINVOKE.CScriptCompiler_ClearCompiledScriptCode(swigCPtr);
  }

  public void Initialize() {
    NWNXLibPINVOKE.CScriptCompiler_Initialize(swigCPtr);
  }

  public void ShutDown() {
    NWNXLibPINVOKE.CScriptCompiler_ShutDown(swigCPtr);
  }

  public uint HashString(CExoString sString) {
    uint retVal = NWNXLibPINVOKE.CScriptCompiler_HashString__SWIG_0(swigCPtr, CExoString.getCPtr(sString));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public uint HashString(byte* pString) {
    uint retVal = NWNXLibPINVOKE.CScriptCompiler_HashString__SWIG_1(swigCPtr, pString);
    return retVal;
  }

  public void InitializePreDefinedStructures() {
    NWNXLibPINVOKE.CScriptCompiler_InitializePreDefinedStructures(swigCPtr);
  }

  public void InitializeIncludeFile(int nCompileFileLevel) {
    NWNXLibPINVOKE.CScriptCompiler_InitializeIncludeFile(swigCPtr, nCompileFileLevel);
  }

  public void ShutdownIncludeFile(int nCompileFileLevel) {
    NWNXLibPINVOKE.CScriptCompiler_ShutdownIncludeFile(swigCPtr, nCompileFileLevel);
  }

  public void TokenInitialize() {
    NWNXLibPINVOKE.CScriptCompiler_TokenInitialize(swigCPtr);
  }

  public void PushSRStack(int nState, int nRule, int nTerm, CScriptParseTreeNode pCurrentTree) {
    NWNXLibPINVOKE.CScriptCompiler_PushSRStack(swigCPtr, nState, nRule, nTerm, CScriptParseTreeNode.getCPtr(pCurrentTree));
  }

  public int PopSRStack(int* nState, int* nRule, int* nTerm, void** pCurrentTree, void** pReturnTree) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_PopSRStack(swigCPtr, nState, nRule, nTerm, (global::System.IntPtr)pCurrentTree, (global::System.IntPtr)pReturnTree);
    return retVal;
  }

  public void ModifySRStackReturnTree(CScriptParseTreeNode pReturnTree) {
    NWNXLibPINVOKE.CScriptCompiler_ModifySRStackReturnTree(swigCPtr, CScriptParseTreeNode.getCPtr(pReturnTree));
  }

  public int GenerateParseTree() {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_GenerateParseTree(swigCPtr);
    return retVal;
  }

  public float ParseFloatFromTokenString() {
    float retVal = NWNXLibPINVOKE.CScriptCompiler_ParseFloatFromTokenString(swigCPtr);
    return retVal;
  }

  public int HandleToken() {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_HandleToken(swigCPtr);
    return retVal;
  }

  public int TestIdentifierToken() {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_TestIdentifierToken(swigCPtr);
    return retVal;
  }

  public int HandleIdentifierToken() {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_HandleIdentifierToken(swigCPtr);
    return retVal;
  }

  public int ParseCharacterNumeric(int ch) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ParseCharacterNumeric(swigCPtr, ch);
    return retVal;
  }

  public int ParseCharacterPeriod(int chNext) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ParseCharacterPeriod(swigCPtr, chNext);
    return retVal;
  }

  public int ParseCharacterSlash(int chNext) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ParseCharacterSlash(swigCPtr, chNext);
    return retVal;
  }

  public int ParseCharacterAsterisk(int chNext) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ParseCharacterAsterisk(swigCPtr, chNext);
    return retVal;
  }

  public int ParseCharacterAmpersand(int chNext) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ParseCharacterAmpersand(swigCPtr, chNext);
    return retVal;
  }

  public int ParseCharacterVerticalBar(int chNext) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ParseCharacterVerticalBar(swigCPtr, chNext);
    return retVal;
  }

  public int ParseCharacterAlphabet(int ch) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ParseCharacterAlphabet(swigCPtr, ch);
    return retVal;
  }

  public int ParseStringCharacter(int ch, int chNext, byte* pScript, int nScriptLength) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ParseStringCharacter(swigCPtr, ch, chNext, pScript, nScriptLength);
    return retVal;
  }

  public int ParseRawStringCharacter(int ch, int chNext) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ParseRawStringCharacter(swigCPtr, ch, chNext);
    return retVal;
  }

  public int ParseCharacterQuotationMark() {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ParseCharacterQuotationMark(swigCPtr);
    return retVal;
  }

  public int ParseCharacterHyphen(int chNext) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ParseCharacterHyphen(swigCPtr, chNext);
    return retVal;
  }

  public int ParseCharacterLeftBrace() {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ParseCharacterLeftBrace(swigCPtr);
    return retVal;
  }

  public int ParseCharacterRightBrace() {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ParseCharacterRightBrace(swigCPtr);
    return retVal;
  }

  public int ParseCharacterLeftBracket() {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ParseCharacterLeftBracket(swigCPtr);
    return retVal;
  }

  public int ParseCharacterRightBracket() {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ParseCharacterRightBracket(swigCPtr);
    return retVal;
  }

  public int ParseCharacterLeftSquareBracket() {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ParseCharacterLeftSquareBracket(swigCPtr);
    return retVal;
  }

  public int ParseCharacterRightSquareBracket() {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ParseCharacterRightSquareBracket(swigCPtr);
    return retVal;
  }

  public int ParseCharacterLeftAngle(int chNext) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ParseCharacterLeftAngle(swigCPtr, chNext);
    return retVal;
  }

  public int ParseCharacterRightAngle(int chNext) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ParseCharacterRightAngle(swigCPtr, chNext);
    return retVal;
  }

  public int ParseCharacterExclamationPoint(int chNext) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ParseCharacterExclamationPoint(swigCPtr, chNext);
    return retVal;
  }

  public int ParseCharacterEqualSign(int chNext) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ParseCharacterEqualSign(swigCPtr, chNext);
    return retVal;
  }

  public int ParseCharacterPlusSign(int chNext) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ParseCharacterPlusSign(swigCPtr, chNext);
    return retVal;
  }

  public int ParseCharacterPercentSign(int chNext) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ParseCharacterPercentSign(swigCPtr, chNext);
    return retVal;
  }

  public int ParseCharacterSemicolon() {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ParseCharacterSemicolon(swigCPtr);
    return retVal;
  }

  public int ParseCharacterComma() {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ParseCharacterComma(swigCPtr);
    return retVal;
  }

  public int ParseCharacterCarat(int chNext) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ParseCharacterCarat(swigCPtr, chNext);
    return retVal;
  }

  public int ParseCharacterTilde() {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ParseCharacterTilde(swigCPtr);
    return retVal;
  }

  public int ParseCharacterEllipsis() {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ParseCharacterEllipsis(swigCPtr);
    return retVal;
  }

  public int ParseCharacterQuestionMark() {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ParseCharacterQuestionMark(swigCPtr);
    return retVal;
  }

  public int ParseCharacterColon() {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ParseCharacterColon(swigCPtr);
    return retVal;
  }

  public int ParseCommentedOutCharacter(int ch) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ParseCommentedOutCharacter(swigCPtr, ch);
    return retVal;
  }

  public int ParseNextCharacter(int ch, int chNext, byte* pScript, int nScriptLength) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ParseNextCharacter(swigCPtr, ch, chNext, pScript, nScriptLength);
    return retVal;
  }

  public int PrintParseSourceError(int nParseCharacterError) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_PrintParseSourceError(swigCPtr, nParseCharacterError);
    return retVal;
  }

  public int ParseSource(byte* pScript, int nScriptLength) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ParseSource(swigCPtr, pScript, nScriptLength);
    return retVal;
  }

  public int OutputError(int nError, CExoString psFileName, int nLineNumber, CExoString sErrorText) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_OutputError(swigCPtr, nError, CExoString.getCPtr(psFileName), nLineNumber, CExoString.getCPtr(sErrorText));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public CScriptParseTreeNode DuplicateScriptParseTree(CScriptParseTreeNode pNode) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_DuplicateScriptParseTree(swigCPtr, CScriptParseTreeNode.getCPtr(pNode));
    CScriptParseTreeNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CScriptParseTreeNode(cPtr, false);
    return ret;
  }

  public CScriptParseTreeNode CreateScriptParseTreeNode(int nNodeOperation, CScriptParseTreeNode pNodeLeft, CScriptParseTreeNode pNodeRight) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_CreateScriptParseTreeNode(swigCPtr, nNodeOperation, CScriptParseTreeNode.getCPtr(pNodeLeft), CScriptParseTreeNode.getCPtr(pNodeRight));
    CScriptParseTreeNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CScriptParseTreeNode(cPtr, false);
    return ret;
  }

  public int CheckForBadLValue(CScriptParseTreeNode pNode) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_CheckForBadLValue(swigCPtr, CScriptParseTreeNode.getCPtr(pNode));
    return retVal;
  }

  public void DeleteScriptParseTreeNode(CScriptParseTreeNode pParseTreeNode) {
    NWNXLibPINVOKE.CScriptCompiler_DeleteScriptParseTreeNode(swigCPtr, CScriptParseTreeNode.getCPtr(pParseTreeNode));
  }

  public CScriptParseTreeNode GetNewScriptParseTreeNode() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_GetNewScriptParseTreeNode(swigCPtr);
    CScriptParseTreeNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CScriptParseTreeNode(cPtr, false);
    return ret;
  }

  public int OutputWalkTreeError(int nError, CScriptParseTreeNode pNode) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_OutputWalkTreeError(swigCPtr, nError, CScriptParseTreeNode.getCPtr(pNode));
    return retVal;
  }

  public int PreVisitGenerateCode(CScriptParseTreeNode pNode) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_PreVisitGenerateCode(swigCPtr, CScriptParseTreeNode.getCPtr(pNode));
    return retVal;
  }

  public int InVisitGenerateCode(CScriptParseTreeNode pNode) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_InVisitGenerateCode(swigCPtr, CScriptParseTreeNode.getCPtr(pNode));
    return retVal;
  }

  public int PostVisitGenerateCode(CScriptParseTreeNode pNode) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_PostVisitGenerateCode(swigCPtr, CScriptParseTreeNode.getCPtr(pNode));
    return retVal;
  }

  public void WriteByteSwap16(byte* buffer, short value) {
    NWNXLibPINVOKE.CScriptCompiler_WriteByteSwap16(swigCPtr, buffer, value);
  }

  public void WriteByteSwap32(byte* buffer, int value) {
    NWNXLibPINVOKE.CScriptCompiler_WriteByteSwap32(swigCPtr, buffer, value);
  }

  public int ReadByteSwap32(byte* buffer) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ReadByteSwap32(swigCPtr, buffer);
    return retVal;
  }

  public short ReadByteSwap16(byte* buffer) {
    short retVal = NWNXLibPINVOKE.CScriptCompiler_ReadByteSwap16(swigCPtr, buffer);
    return retVal;
  }

  public byte* EmitInstruction(byte nOpCode, byte nAuxCode, int nDataSize) {
    byte* retVal = NWNXLibPINVOKE.CScriptCompiler_EmitInstruction__SWIG_0(swigCPtr, nOpCode, nAuxCode, nDataSize);
    return retVal;
  }

  public byte* EmitInstruction(byte nOpCode, byte nAuxCode) {
    byte* retVal = NWNXLibPINVOKE.CScriptCompiler_EmitInstruction__SWIG_1(swigCPtr, nOpCode, nAuxCode);
    return retVal;
  }

  public byte* EmitInstruction(byte nOpCode) {
    byte* retVal = NWNXLibPINVOKE.CScriptCompiler_EmitInstruction__SWIG_2(swigCPtr, nOpCode);
    return retVal;
  }

  public void EmitModifyStackPointer(int nModifyBy) {
    NWNXLibPINVOKE.CScriptCompiler_EmitModifyStackPointer(swigCPtr, nModifyBy);
  }

  public void StartLineNumberAtBinaryInstruction(int nFileReference, int nLineNumber, int nBinaryInstruction) {
    NWNXLibPINVOKE.CScriptCompiler_StartLineNumberAtBinaryInstruction(swigCPtr, nFileReference, nLineNumber, nBinaryInstruction);
  }

  public void EndLineNumberAtBinaryInstruction(int nFileReference, int nLineNumber, int nBinaryInstruction) {
    NWNXLibPINVOKE.CScriptCompiler_EndLineNumberAtBinaryInstruction(swigCPtr, nFileReference, nLineNumber, nBinaryInstruction);
  }

  public void ResolveDebuggingInformation() {
    NWNXLibPINVOKE.CScriptCompiler_ResolveDebuggingInformation(swigCPtr);
  }

  public void ResolveDebuggingInformationForIdentifier(int nIdentifier) {
    NWNXLibPINVOKE.CScriptCompiler_ResolveDebuggingInformationForIdentifier(swigCPtr, nIdentifier);
  }

  public void DeleteCompileStack() {
    NWNXLibPINVOKE.CScriptCompiler_DeleteCompileStack(swigCPtr);
  }

  public void DeleteParseTree(int bStack, CScriptParseTreeNode pNode) {
    NWNXLibPINVOKE.CScriptCompiler_DeleteParseTree(swigCPtr, bStack, CScriptParseTreeNode.getCPtr(pNode));
  }

  public int WalkParseTree(CScriptParseTreeNode pNode) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_WalkParseTree(swigCPtr, CScriptParseTreeNode.getCPtr(pNode));
    return retVal;
  }

  public void InitializeFinalCode() {
    NWNXLibPINVOKE.CScriptCompiler_InitializeFinalCode(swigCPtr);
  }

  public void FinalizeFinalCode() {
    NWNXLibPINVOKE.CScriptCompiler_FinalizeFinalCode(swigCPtr);
  }

  public int GenerateFinalCodeFromParseTree(CExoString sFileName) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_GenerateFinalCodeFromParseTree(swigCPtr, CExoString.getCPtr(sFileName));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int WriteFinalCodeToFile(CExoString sFileName) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_WriteFinalCodeToFile(swigCPtr, CExoString.getCPtr(sFileName));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public CExoString GenerateDebuggerTypeAbbreviation(int nType, CExoString sStructureName) {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CScriptCompiler_GenerateDebuggerTypeAbbreviation(swigCPtr, nType, CExoString.getCPtr(sStructureName)), true);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int WriteDebuggerOutputToFile(CExoString sFileName) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_WriteDebuggerOutputToFile(swigCPtr, CExoString.getCPtr(sFileName));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public uint HashManagerAdd(uint nType, uint nTypeIndice) {
    uint retVal = NWNXLibPINVOKE.CScriptCompiler_HashManagerAdd(swigCPtr, nType, nTypeIndice);
    return retVal;
  }

  public uint HashManagerDelete(uint nType, uint nTypeIndice) {
    uint retVal = NWNXLibPINVOKE.CScriptCompiler_HashManagerDelete(swigCPtr, nType, nTypeIndice);
    return retVal;
  }

  public int GetHashEntryByName(byte* psIdentifierName) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_GetHashEntryByName(swigCPtr, psIdentifierName);
    return retVal;
  }

  public int PrintParseIdentifierFileError(int nParseCharacterError) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_PrintParseIdentifierFileError(swigCPtr, nParseCharacterError);
    return retVal;
  }

  public int ParseIdentifierFile() {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ParseIdentifierFile(swigCPtr);
    return retVal;
  }

  public int GenerateIdentifierList() {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_GenerateIdentifierList(swigCPtr);
    return retVal;
  }

  public int AddUserDefinedIdentifier(CScriptParseTreeNode pFunctionDeclaration, int bFunctionImplementation) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_AddUserDefinedIdentifier(swigCPtr, CScriptParseTreeNode.getCPtr(pFunctionDeclaration), bFunctionImplementation);
    return retVal;
  }

  public void ClearUserDefinedIdentifiers() {
    NWNXLibPINVOKE.CScriptCompiler_ClearUserDefinedIdentifiers(swigCPtr);
  }

  public int GetStructureField(CExoString sStructureName, CExoString sFieldName) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_GetStructureField(swigCPtr, CExoString.getCPtr(sStructureName), CExoString.getCPtr(sFieldName));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int GetStructureSize(CExoString sStructureName) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_GetStructureSize(swigCPtr, CExoString.getCPtr(sStructureName));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int GetIdentifierByName(CExoString sIdentifierName) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_GetIdentifierByName(swigCPtr, CExoString.getCPtr(sIdentifierName));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int AddToGlobalVariableList(CScriptParseTreeNode pGlobalVariableNode) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_AddToGlobalVariableList(swigCPtr, CScriptParseTreeNode.getCPtr(pGlobalVariableNode));
    return retVal;
  }

  public int ConstantFoldNode(CScriptParseTreeNode pNode, int bForce) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ConstantFoldNode__SWIG_0(swigCPtr, CScriptParseTreeNode.getCPtr(pNode), bForce);
    return retVal;
  }

  public int ConstantFoldNode(CScriptParseTreeNode pNode) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ConstantFoldNode__SWIG_1(swigCPtr, CScriptParseTreeNode.getCPtr(pNode));
    return retVal;
  }

  public CScriptParseTreeNode TrimParseTree(CScriptParseTreeNode pNode) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_TrimParseTree(swigCPtr, CScriptParseTreeNode.getCPtr(pNode));
    CScriptParseTreeNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CScriptParseTreeNode(cPtr, false);
    return ret;
  }

  public void InitializeSwitchLabelList() {
    NWNXLibPINVOKE.CScriptCompiler_InitializeSwitchLabelList(swigCPtr);
  }

  public int TraverseTreeForSwitchLabels(CScriptParseTreeNode pNode) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_TraverseTreeForSwitchLabels(swigCPtr, CScriptParseTreeNode.getCPtr(pNode));
    return retVal;
  }

  public void ClearSwitchLabelList() {
    NWNXLibPINVOKE.CScriptCompiler_ClearSwitchLabelList(swigCPtr);
  }

  public int GenerateCodeForSwitchLabels(CScriptParseTreeNode pNode) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_GenerateCodeForSwitchLabels(swigCPtr, CScriptParseTreeNode.getCPtr(pNode));
    return retVal;
  }

  public int GenerateIdentifiersFromConstantVariables(CScriptParseTreeNode pNode) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_GenerateIdentifiersFromConstantVariables(swigCPtr, CScriptParseTreeNode.getCPtr(pNode));
    return retVal;
  }

  public int FoundReturnStatementOnAllBranches(CScriptParseTreeNode pNode) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_FoundReturnStatementOnAllBranches(swigCPtr, CScriptParseTreeNode.getCPtr(pNode));
    return retVal;
  }

  public void AddVariableToStack(int nVariableType, CExoString psVariableTypeName, int bGenerateCode) {
    NWNXLibPINVOKE.CScriptCompiler_AddVariableToStack(swigCPtr, nVariableType, CExoString.getCPtr(psVariableTypeName), bGenerateCode);
  }

  public void AddStructureToStack(CExoString sStructureName, int bGenerateCode) {
    NWNXLibPINVOKE.CScriptCompiler_AddStructureToStack(swigCPtr, CExoString.getCPtr(sStructureName), bGenerateCode);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddToSymbolTableVarStack(int nOccupiedIdentifier, int nStackCurrentDepth, int nGlobalVariableSize) {
    NWNXLibPINVOKE.CScriptCompiler_AddToSymbolTableVarStack(swigCPtr, nOccupiedIdentifier, nStackCurrentDepth, nGlobalVariableSize);
  }

  public void RemoveFromSymbolTableVarStack(int nOccupiedIdentifier, int nStackCurrentDepth, int nGlobalVariableSize) {
    NWNXLibPINVOKE.CScriptCompiler_RemoveFromSymbolTableVarStack(swigCPtr, nOccupiedIdentifier, nStackCurrentDepth, nGlobalVariableSize);
  }

  public CExoString GetFunctionNameFromSymbolSubTypes(int nSubType1, int nSubType2) {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CScriptCompiler_GetFunctionNameFromSymbolSubTypes(swigCPtr, nSubType1, nSubType2), true);
    return ret;
  }

  public int AddSymbolToQueryList(int nLocationPointer, int nSymbolType, int nSymbolSubType1, int nSymbolSubType2) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_AddSymbolToQueryList__SWIG_0(swigCPtr, nLocationPointer, nSymbolType, nSymbolSubType1, nSymbolSubType2);
    return retVal;
  }

  public int AddSymbolToQueryList(int nLocationPointer, int nSymbolType, int nSymbolSubType1) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_AddSymbolToQueryList__SWIG_1(swigCPtr, nLocationPointer, nSymbolType, nSymbolSubType1);
    return retVal;
  }

  public int AddSymbolToLabelList(int nLocationPointer, int nSymbolType, int nSymbolSubType1, int nSymbolSubType2) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_AddSymbolToLabelList__SWIG_0(swigCPtr, nLocationPointer, nSymbolType, nSymbolSubType1, nSymbolSubType2);
    return retVal;
  }

  public int AddSymbolToLabelList(int nLocationPointer, int nSymbolType, int nSymbolSubType1) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_AddSymbolToLabelList__SWIG_1(swigCPtr, nLocationPointer, nSymbolType, nSymbolSubType1);
    return retVal;
  }

  public void ClearAllSymbolLists() {
    NWNXLibPINVOKE.CScriptCompiler_ClearAllSymbolLists(swigCPtr);
  }

  public int CleanUpDuringCompile(int nReturnValue) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_CleanUpDuringCompile(swigCPtr, nReturnValue);
    return retVal;
  }

  public int CleanUpAfterCompile(int nReturnValue, CScriptParseTreeNode pReturnTree) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_CleanUpAfterCompile(swigCPtr, nReturnValue, CScriptParseTreeNode.getCPtr(pReturnTree));
    return retVal;
  }

  public byte* InstructionLookback(uint last) {
    byte* retVal = NWNXLibPINVOKE.CScriptCompiler_InstructionLookback__SWIG_0(swigCPtr, last);
    return retVal;
  }

  public byte* InstructionLookback() {
    byte* retVal = NWNXLibPINVOKE.CScriptCompiler_InstructionLookback__SWIG_1(swigCPtr);
    return retVal;
  }

  public int InstallLoader() {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_InstallLoader(swigCPtr);
    return retVal;
  }

  public CScriptParseTreeNode InsertGlobalVariablesInParseTree(CScriptParseTreeNode pOldTree) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CScriptCompiler_InsertGlobalVariablesInParseTree(swigCPtr, CScriptParseTreeNode.getCPtr(pOldTree));
    CScriptParseTreeNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CScriptParseTreeNode(cPtr, false);
    return ret;
  }

  public int OutputIdentifierError(CExoString sFunctionName, int nError, int nFileStackDrop) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_OutputIdentifierError__SWIG_0(swigCPtr, CExoString.getCPtr(sFunctionName), nError, nFileStackDrop);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int OutputIdentifierError(CExoString sFunctionName, int nError) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_OutputIdentifierError__SWIG_1(swigCPtr, CExoString.getCPtr(sFunctionName), nError);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int ValidateLocationOfIdentifier(CExoString sFunctionName) {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ValidateLocationOfIdentifier(swigCPtr, CExoString.getCPtr(sFunctionName));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int DetermineLocationOfCode() {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_DetermineLocationOfCode(swigCPtr);
    return retVal;
  }

  public int ResolveLabels() {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_ResolveLabels(swigCPtr);
    return retVal;
  }

  public int WriteResolvedOutput() {
    int retVal = NWNXLibPINVOKE.CScriptCompiler_WriteResolvedOutput(swigCPtr);
    return retVal;
  }

  public void SetOptimizationFlags(uint nFlags) {
    NWNXLibPINVOKE.CScriptCompiler_SetOptimizationFlags(swigCPtr, nFlags);
  }

  public uint GetOptimizationFlags() {
    uint retVal = NWNXLibPINVOKE.CScriptCompiler_GetOptimizationFlags(swigCPtr);
    return retVal;
  }

  public void _Destructor() {
    NWNXLibPINVOKE.CScriptCompiler__Destructor(swigCPtr);
  }

}

}

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public unsafe class CNWSAmbientSound : CNWAmbientSound {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CNWSAmbientSound(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NWNXLibPINVOKE.CNWSAmbientSound_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CNWSAmbientSound obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NWNXLibPINVOKE.delete_CNWSAmbientSound(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public global::System.IntPtr Pointer {
    get {
      return swigCPtr.Handle;
    }
  }

  public static unsafe implicit operator void*(CNWSAmbientSound self) {
    return (void*)self.swigCPtr.Handle;
  }

  public static unsafe CNWSAmbientSound FromPointer(void* pointer, bool memoryOwn = false) {
    return pointer != null ? new CNWSAmbientSound((global::System.IntPtr)pointer, memoryOwn) : null;
  }

  public static CNWSAmbientSound FromPointer(global::System.IntPtr pointer, bool memoryOwn = false) {
    return pointer != global::System.IntPtr.Zero ? new CNWSAmbientSound(pointer, memoryOwn) : null;
  }

  public bool Equals(CNWSAmbientSound other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }

    if (ReferenceEquals(this, other)) {
      return true;
    }

    return Pointer.Equals(other.Pointer);
  }

  public override bool Equals(object obj) {
    return ReferenceEquals(this, obj) || obj is CNWSAmbientSound other && Equals(other);
  }

  public override int GetHashCode() {
    return swigCPtr.Handle.GetHashCode();
  }

  public static bool operator ==(CNWSAmbientSound left, CNWSAmbientSound right) {
    return Equals(left, right);
  }

  public static bool operator !=(CNWSAmbientSound left, CNWSAmbientSound right) {
    return !Equals(left, right);
  }

  public uint m_nArea {
    set {
      NWNXLibPINVOKE.CNWSAmbientSound_m_nArea_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSAmbientSound_m_nArea_get(swigCPtr);
      return retVal;
    }

  }

  public CNWSAmbientSound(uint nArea) : this(NWNXLibPINVOKE.new_CNWSAmbientSound(nArea), true) {
  }

  public override void PlayMusic(int bPlay) {
    NWNXLibPINVOKE.CNWSAmbientSound_PlayMusic(swigCPtr, bPlay);
  }

  public override void SetMusicDelay(int nDelay) {
    NWNXLibPINVOKE.CNWSAmbientSound_SetMusicDelay(swigCPtr, nDelay);
  }

  public override void SetMusicDayTrack(int nTrack) {
    NWNXLibPINVOKE.CNWSAmbientSound_SetMusicDayTrack(swigCPtr, nTrack);
  }

  public override void SetMusicNightTrack(int nTrack) {
    NWNXLibPINVOKE.CNWSAmbientSound_SetMusicNightTrack(swigCPtr, nTrack);
  }

  public override void PlayBattleMusic(int bPlay) {
    NWNXLibPINVOKE.CNWSAmbientSound_PlayBattleMusic(swigCPtr, bPlay);
  }

  public override void SetBattleMusicTrack(int nTrack) {
    NWNXLibPINVOKE.CNWSAmbientSound_SetBattleMusicTrack(swigCPtr, nTrack);
  }

  public override void PlayAmbientSound(int bPlay) {
    NWNXLibPINVOKE.CNWSAmbientSound_PlayAmbientSound(swigCPtr, bPlay);
  }

  public override void SetAmbientDayTrack(int nTrack) {
    NWNXLibPINVOKE.CNWSAmbientSound_SetAmbientDayTrack(swigCPtr, nTrack);
  }

  public override void SetAmbientNightTrack(int nTrack) {
    NWNXLibPINVOKE.CNWSAmbientSound_SetAmbientNightTrack(swigCPtr, nTrack);
  }

  public void SetAmbientDayVolume(int nVolume) {
    NWNXLibPINVOKE.CNWSAmbientSound_SetAmbientDayVolume(swigCPtr, nVolume);
  }

  public void SetAmbientNightVolume(int nVolume) {
    NWNXLibPINVOKE.CNWSAmbientSound_SetAmbientNightVolume(swigCPtr, nVolume);
  }

  public int Load(CResGFF pRes, CResStruct pStruct) {
    int retVal = NWNXLibPINVOKE.CNWSAmbientSound_Load(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pStruct));
    return retVal;
  }

  public void Save(CResGFF pRes, CResStruct pStruct) {
    NWNXLibPINVOKE.CNWSAmbientSound_Save(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pStruct));
  }

  public void PackIntoMessage(CNWSMessage pMessage) {
    NWNXLibPINVOKE.CNWSAmbientSound_PackIntoMessage(swigCPtr, CNWSMessage.getCPtr(pMessage));
  }

  public int GetPlayersInArea(CExoArrayListUInt32 pList) {
    int retVal = NWNXLibPINVOKE.CNWSAmbientSound_GetPlayersInArea(swigCPtr, CExoArrayListUInt32.getCPtr(pList));
    return retVal;
  }

  public void _Destructor() {
    NWNXLibPINVOKE.CNWSAmbientSound__Destructor(swigCPtr);
  }

}

}

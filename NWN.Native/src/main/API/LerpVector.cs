//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public unsafe class LerpVector : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal LerpVector(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LerpVector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~LerpVector() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NWNXLibPINVOKE.delete_LerpVector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public global::System.IntPtr Pointer {
    get {
      return swigCPtr.Handle;
    }
  }

  public static unsafe implicit operator void*(LerpVector self) {
    return (void*)self.swigCPtr.Handle;
  }

  public static unsafe LerpVector FromPointer(void* pointer, bool memoryOwn = false) {
    return pointer != null ? new LerpVector((global::System.IntPtr)pointer, memoryOwn) : null;
  }

  public static LerpVector FromPointer(global::System.IntPtr pointer, bool memoryOwn = false) {
    return pointer != global::System.IntPtr.Zero ? new LerpVector(pointer, memoryOwn) : null;
  }

  public bool Equals(LerpVector other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }

    if (ReferenceEquals(this, other)) {
      return true;
    }

    return Pointer.Equals(other.Pointer);
  }

  public override bool Equals(object obj) {
    return ReferenceEquals(this, obj) || obj is LerpVector other && Equals(other);
  }

  public override int GetHashCode() {
    return swigCPtr.Handle.GetHashCode();
  }

  public static bool operator ==(LerpVector left, LerpVector right) {
    return Equals(left, right);
  }

  public static bool operator !=(LerpVector left, LerpVector right) {
    return !Equals(left, right);
  }

  public LerpFloat x {
    set {
      NWNXLibPINVOKE.LerpVector_x_set(swigCPtr, LerpFloat.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.LerpVector_x_get(swigCPtr);
      LerpFloat ret = (cPtr == global::System.IntPtr.Zero) ? null : new LerpFloat(cPtr, false);
      return ret;
    } 
  }

  public LerpFloat y {
    set {
      NWNXLibPINVOKE.LerpVector_y_set(swigCPtr, LerpFloat.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.LerpVector_y_get(swigCPtr);
      LerpFloat ret = (cPtr == global::System.IntPtr.Zero) ? null : new LerpFloat(cPtr, false);
      return ret;
    } 
  }

  public LerpFloat z {
    set {
      NWNXLibPINVOKE.LerpVector_z_set(swigCPtr, LerpFloat.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.LerpVector_z_get(swigCPtr);
      LerpFloat ret = (cPtr == global::System.IntPtr.Zero) ? null : new LerpFloat(cPtr, false);
      return ret;
    } 
  }

  public LerpVector(float vx, float vy, float vz) : this(NWNXLibPINVOKE.new_LerpVector__SWIG_0(vx, vy, vz), true) {
  }

  public LerpVector(LerpVector other) : this(NWNXLibPINVOKE.new_LerpVector__SWIG_1(LerpVector.getCPtr(other)), true) {
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public LerpVector _OpAssign(LerpVector other) {
    LerpVector ret = new LerpVector(NWNXLibPINVOKE.LerpVector__OpAssign__SWIG_0(swigCPtr, LerpVector.getCPtr(other)), false);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public LerpVector _OpAssign(Vector other) {
    LerpVector ret = new LerpVector(NWNXLibPINVOKE.LerpVector__OpAssign__SWIG_1(swigCPtr, Vector.getCPtr(other)), false);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool _OpEquals(LerpVector rhs) {
    bool ret = NWNXLibPINVOKE.LerpVector__OpEquals(swigCPtr, LerpVector.getCPtr(rhs));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector Value() {
    Vector ret = new Vector(NWNXLibPINVOKE.LerpVector_Value(swigCPtr), true);
    return ret;
  }

  public Vector Lerped() {
    Vector ret = new Vector(NWNXLibPINVOKE.LerpVector_Lerped(swigCPtr), true);
    return ret;
  }

}

}

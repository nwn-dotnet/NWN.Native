//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public unsafe class CGameObjectArray : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CGameObjectArray(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CGameObjectArray obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CGameObjectArray() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NWNXLibPINVOKE.delete_CGameObjectArray(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public global::System.IntPtr Pointer {
    get {
      return swigCPtr.Handle;
    }
  }

  public static unsafe implicit operator void*(CGameObjectArray self) {
    return (void*)self.swigCPtr.Handle;
  }

  public static unsafe CGameObjectArray FromPointer(void* pointer, bool memoryOwn = false) {
    return pointer != null ? new CGameObjectArray((global::System.IntPtr)pointer, memoryOwn) : null;
  }

  public static CGameObjectArray FromPointer(global::System.IntPtr pointer, bool memoryOwn = false) {
    return pointer != global::System.IntPtr.Zero ? new CGameObjectArray(pointer, memoryOwn) : null;
  }

  public bool Equals(CGameObjectArray other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }

    if (ReferenceEquals(this, other)) {
      return true;
    }

    return Pointer.Equals(other.Pointer);
  }

  public override bool Equals(object obj) {
    return ReferenceEquals(this, obj) || obj is CGameObjectArray other && Equals(other);
  }

  public override int GetHashCode() {
    return swigCPtr.Handle.GetHashCode();
  }

  public static bool operator ==(CGameObjectArray left, CGameObjectArray right) {
    return Equals(left, right);
  }

  public static bool operator !=(CGameObjectArray left, CGameObjectArray right) {
    return !Equals(left, right);
  }

  public void** m_pArray {
    set {
      NWNXLibPINVOKE.CGameObjectArray_m_pArray_set(swigCPtr, (global::System.IntPtr)value);
    } 
    get {
        global::System.IntPtr retVal = NWNXLibPINVOKE.CGameObjectArray_m_pArray_get(swigCPtr);
        return (void**)retVal;
    }

  }

  public NativeArray<uint> m_nNextObjectArrayID {
    set {
      NWNXLibPINVOKE.CGameObjectArray_m_nNextObjectArrayID_set(swigCPtr, value);
    } 
    get {
      global::System.IntPtr arrayPtr = NWNXLibPINVOKE.CGameObjectArray_m_nNextObjectArrayID_get(swigCPtr);
      NativeArray<uint> retVal = new NativeArray<uint>(arrayPtr, 2);

      return retVal; // uint[2]
    }

  }

  public NativeArray<uint> m_nNextCharArrayID {
    set {
      NWNXLibPINVOKE.CGameObjectArray_m_nNextCharArrayID_set(swigCPtr, value);
    } 
    get {
      global::System.IntPtr arrayPtr = NWNXLibPINVOKE.CGameObjectArray_m_nNextCharArrayID_get(swigCPtr);
      NativeArray<uint> retVal = new NativeArray<uint>(arrayPtr, 2);

      return retVal; // uint[2]
    }

  }

  public uint m_nLogGameObjectCache {
    set {
      NWNXLibPINVOKE.CGameObjectArray_m_nLogGameObjectCache_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CGameObjectArray_m_nLogGameObjectCache_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nGameObjectCache {
    set {
      NWNXLibPINVOKE.CGameObjectArray_m_nGameObjectCache_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CGameObjectArray_m_nGameObjectCache_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bClientMode {
    set {
      NWNXLibPINVOKE.CGameObjectArray_m_bClientMode_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CGameObjectArray_m_bClientMode_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nArraySize {
    set {
      NWNXLibPINVOKE.CGameObjectArray_m_nArraySize_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CGameObjectArray_m_nArraySize_get(swigCPtr);
      return retVal;
    }

  }

  public CGameObjectArray(int clientMode) : this(NWNXLibPINVOKE.new_CGameObjectArray__SWIG_0(clientMode), true) {
  }

  public CGameObjectArray() : this(NWNXLibPINVOKE.new_CGameObjectArray__SWIG_1(), true) {
  }

  public byte AddCharacterObjectAtPos(uint ID, ICGameObject ptr) {
    byte retVal = NWNXLibPINVOKE.CGameObjectArray_AddCharacterObjectAtPos(swigCPtr, ID, ptr == null ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : ptr.GetInterfaceCPtr());
    return retVal;
  }

  public byte AddObjectAtPos(uint ID, ICGameObject ptr) {
    byte retVal = NWNXLibPINVOKE.CGameObjectArray_AddObjectAtPos(swigCPtr, ID, ptr == null ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : ptr.GetInterfaceCPtr());
    return retVal;
  }

  public byte AddExternalObject(uint* ID, ICGameObject ptr, int CharacterObject) {
    byte retVal = NWNXLibPINVOKE.CGameObjectArray_AddExternalObject__SWIG_0(swigCPtr, (global::System.IntPtr)ID, ptr == null ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : ptr.GetInterfaceCPtr(), CharacterObject);
    return retVal;
  }

  public byte AddExternalObject(uint* ID, ICGameObject ptr) {
    byte retVal = NWNXLibPINVOKE.CGameObjectArray_AddExternalObject__SWIG_1(swigCPtr, (global::System.IntPtr)ID, ptr == null ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : ptr.GetInterfaceCPtr());
    return retVal;
  }

  public byte AddInternalObject(uint* ID, ICGameObject ptr, int CharacterObject) {
    byte retVal = NWNXLibPINVOKE.CGameObjectArray_AddInternalObject__SWIG_0(swigCPtr, (global::System.IntPtr)ID, ptr == null ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : ptr.GetInterfaceCPtr(), CharacterObject);
    return retVal;
  }

  public byte AddInternalObject(uint* ID, ICGameObject ptr) {
    byte retVal = NWNXLibPINVOKE.CGameObjectArray_AddInternalObject__SWIG_1(swigCPtr, (global::System.IntPtr)ID, ptr == null ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : ptr.GetInterfaceCPtr());
    return retVal;
  }

  public void Clean(ushort nList) {
    NWNXLibPINVOKE.CGameObjectArray_Clean(swigCPtr, nList);
  }

  public byte Delete(uint ID) {
    byte retVal = NWNXLibPINVOKE.CGameObjectArray_Delete__SWIG_0(swigCPtr, ID);
    return retVal;
  }

  public byte Delete(uint ID, void** ptr) {
    byte retVal = NWNXLibPINVOKE.CGameObjectArray_Delete__SWIG_1(swigCPtr, ID, (global::System.IntPtr)ptr);
    return retVal;
  }

  public byte GetGameObject(uint ID, void** ptr) {
    byte retVal = NWNXLibPINVOKE.CGameObjectArray_GetGameObject(swigCPtr, ID, (global::System.IntPtr)ptr);
    return retVal;
  }

  public void _Destructor() {
    NWNXLibPINVOKE.CGameObjectArray__Destructor(swigCPtr);
  }

}

}

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public unsafe class CNWSJournal : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CNWSJournal(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CNWSJournal obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CNWSJournal() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NWNXLibPINVOKE.delete_CNWSJournal(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public global::System.IntPtr Pointer {
    get {
      return swigCPtr.Handle;
    }
  }

  public static unsafe implicit operator void*(CNWSJournal self) {
    return (void*)self.swigCPtr.Handle;
  }

  public static unsafe CNWSJournal FromPointer(void* pointer, bool memoryOwn = false) {
    return pointer != null ? new CNWSJournal((global::System.IntPtr)pointer, memoryOwn) : null;
  }

  public static CNWSJournal FromPointer(global::System.IntPtr pointer, bool memoryOwn = false) {
    return pointer != global::System.IntPtr.Zero ? new CNWSJournal(pointer, memoryOwn) : null;
  }

  public bool Equals(CNWSJournal other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }

    if (ReferenceEquals(this, other)) {
      return true;
    }

    return Pointer.Equals(other.Pointer);
  }

  public override bool Equals(object obj) {
    return ReferenceEquals(this, obj) || obj is CNWSJournal other && Equals(other);
  }

  public override int GetHashCode() {
    return swigCPtr.Handle.GetHashCode();
  }

  public static bool operator ==(CNWSJournal left, CNWSJournal right) {
    return Equals(left, right);
  }

  public static bool operator !=(CNWSJournal left, CNWSJournal right) {
    return !Equals(left, right);
  }

  public CExoArrayListSJournalEntry m_lstEntries {
    set {
      NWNXLibPINVOKE.CNWSJournal_m_lstEntries_set(swigCPtr, CExoArrayListSJournalEntry.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSJournal_m_lstEntries_get(swigCPtr);
      CExoArrayListSJournalEntry ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoArrayListSJournalEntry(cPtr, false);
      return ret;
    } 
  }

  public CNWSCreature m_pCreature {
    set {
      NWNXLibPINVOKE.CNWSJournal_m_pCreature_set(swigCPtr, CNWSCreature.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSJournal_m_pCreature_get(swigCPtr);
      CNWSCreature ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSCreature(cPtr, false);
      return ret;
    } 
  }

  public CNWSJournal() : this(NWNXLibPINVOKE.new_CNWSJournal(), true) {
  }

  public void SetState(CExoString szPlot_Id, uint nState, int bLoading) {
    NWNXLibPINVOKE.CNWSJournal_SetState__SWIG_0(swigCPtr, CExoString.getCPtr(szPlot_Id), nState, bLoading);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetState(CExoString szPlot_Id, uint nState) {
    NWNXLibPINVOKE.CNWSJournal_SetState__SWIG_1(swigCPtr, CExoString.getCPtr(szPlot_Id), nState);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDate(CExoString szPlot_Id, uint nCalendarDay, int bLoading) {
    NWNXLibPINVOKE.CNWSJournal_SetDate__SWIG_0(swigCPtr, CExoString.getCPtr(szPlot_Id), nCalendarDay, bLoading);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDate(CExoString szPlot_Id, uint nCalendarDay) {
    NWNXLibPINVOKE.CNWSJournal_SetDate__SWIG_1(swigCPtr, CExoString.getCPtr(szPlot_Id), nCalendarDay);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTime(CExoString szPlot_Id, uint nTimeOfDay, int bLoading) {
    NWNXLibPINVOKE.CNWSJournal_SetTime__SWIG_0(swigCPtr, CExoString.getCPtr(szPlot_Id), nTimeOfDay, bLoading);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTime(CExoString szPlot_Id, uint nTimeOfDay) {
    NWNXLibPINVOKE.CNWSJournal_SetTime__SWIG_1(swigCPtr, CExoString.getCPtr(szPlot_Id), nTimeOfDay);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetPicture(CExoString szPlot_Id, int nPictureIndex, int bLoading) {
    NWNXLibPINVOKE.CNWSJournal_SetPicture__SWIG_0(swigCPtr, CExoString.getCPtr(szPlot_Id), nPictureIndex, bLoading);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetPicture(CExoString szPlot_Id, int nPictureIndex) {
    NWNXLibPINVOKE.CNWSJournal_SetPicture__SWIG_1(swigCPtr, CExoString.getCPtr(szPlot_Id), nPictureIndex);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Destroy(CExoString szPlot_Id) {
    NWNXLibPINVOKE.CNWSJournal_Destroy(swigCPtr, CExoString.getCPtr(szPlot_Id));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void _Destructor() {
    NWNXLibPINVOKE.CNWSJournal__Destructor(swigCPtr);
  }

}

}

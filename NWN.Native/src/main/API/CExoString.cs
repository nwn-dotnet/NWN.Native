//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public unsafe class CExoString : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CExoString(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CExoString obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CExoString() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NWNXLibPINVOKE.delete_CExoString(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public global::System.IntPtr Pointer {
    get {
      return swigCPtr.Handle;
    }
  }

  public static unsafe implicit operator void*(CExoString self) {
    return (void*)self.swigCPtr.Handle;
  }

  public static unsafe CExoString FromPointer(void* pointer, bool memoryOwn = false) {
    return pointer != null ? new CExoString((global::System.IntPtr)pointer, memoryOwn) : null;
  }

  public static CExoString FromPointer(global::System.IntPtr pointer, bool memoryOwn = false) {
    return pointer != global::System.IntPtr.Zero ? new CExoString(pointer, memoryOwn) : null;
  }

  public bool Equals(CExoString other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }

    if (ReferenceEquals(this, other)) {
      return true;
    }

    return Pointer.Equals(other.Pointer);
  }

  public override bool Equals(object obj) {
    return ReferenceEquals(this, obj) || obj is CExoString other && Equals(other);
  }

  public override int GetHashCode() {
    return swigCPtr.Handle.GetHashCode();
  }

  public static bool operator ==(CExoString left, CExoString right) {
    return Equals(left, right);
  }

  public static bool operator !=(CExoString left, CExoString right) {
    return !Equals(left, right);
  }


  public CExoString(string source) : this(NWNX.NET.Native.StringUtils.GetNullTerminatedString(source)) {
  }

  /// <summary>
  /// Converts this CExoString to a C# string.
  /// </summary>
  /// <returns>The equivalent C# string for this CExoString.</returns>
  public override string ToString() {
    return NWNX.NET.Native.StringUtils.ReadNullTerminatedString(CStr());
  }
  public byte* m_sString {
    set {
      NWNXLibPINVOKE.CExoString_m_sString_set(swigCPtr, value);
    } 
    get {
      byte* retVal = NWNXLibPINVOKE.CExoString_m_sString_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nStringLength {
    set {
      NWNXLibPINVOKE.CExoString_m_nStringLength_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CExoString_m_nStringLength_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nBufferLength {
    set {
      NWNXLibPINVOKE.CExoString_m_nBufferLength_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CExoString_m_nBufferLength_get(swigCPtr);
      return retVal;
    }

  }

  public CExoString() : this(NWNXLibPINVOKE.new_CExoString__SWIG_0(), true) {
  }

  public CExoString(CExoString other) : this(NWNXLibPINVOKE.new_CExoString__SWIG_1(CExoString.getCPtr(other)), true) {
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public CExoString _OpAssign(CExoString other) {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CExoString__OpAssign__SWIG_0(swigCPtr, CExoString.getCPtr(other)), false);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CExoString(CResRef source) : this(NWNXLibPINVOKE.new_CExoString__SWIG_2(CResRef.getCPtr(source)), true) {
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public CExoString(byte* source) : this(NWNXLibPINVOKE.new_CExoString__SWIG_3(source), true) {
  }

  public CExoString(byte* source, int length) : this(NWNXLibPINVOKE.new_CExoString__SWIG_5(source, length), true) {
  }

  public CExoString _OpAssign(string other) {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CExoString__OpAssign__SWIG_1(swigCPtr, other), false);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint size() {
    uint ret = NWNXLibPINVOKE.CExoString_size(swigCPtr);
    return ret;
  }

  public byte* c_str() {
    byte* retVal = NWNXLibPINVOKE.CExoString_c_str(swigCPtr);
    return retVal;
  }

  public int _OpEquals(CExoString string_) {
    int retVal = NWNXLibPINVOKE.CExoString__OpEquals__SWIG_0(swigCPtr, CExoString.getCPtr(string_));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int _OpEquals(byte* string_) {
    int retVal = NWNXLibPINVOKE.CExoString__OpEquals__SWIG_1(swigCPtr, string_);
    return retVal;
  }

  public int _OpNotEquals(CExoString string_) {
    int retVal = NWNXLibPINVOKE.CExoString__OpNotEquals__SWIG_0(swigCPtr, CExoString.getCPtr(string_));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int _OpNotEquals(byte* string_) {
    int retVal = NWNXLibPINVOKE.CExoString__OpNotEquals__SWIG_1(swigCPtr, string_);
    return retVal;
  }

  public int _OpLessThan(CExoString string_) {
    int retVal = NWNXLibPINVOKE.CExoString__OpLessThan__SWIG_0(swigCPtr, CExoString.getCPtr(string_));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int _OpLessThan(byte* string_) {
    int retVal = NWNXLibPINVOKE.CExoString__OpLessThan__SWIG_1(swigCPtr, string_);
    return retVal;
  }

  public int _OpGreaterThan(CExoString string_) {
    int retVal = NWNXLibPINVOKE.CExoString__OpGreaterThan__SWIG_0(swigCPtr, CExoString.getCPtr(string_));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int _OpGreaterThan(byte* string_) {
    int retVal = NWNXLibPINVOKE.CExoString__OpGreaterThan__SWIG_1(swigCPtr, string_);
    return retVal;
  }

  public int _OpLessThanOrEqual(CExoString string_) {
    int retVal = NWNXLibPINVOKE.CExoString__OpLessThanOrEqual__SWIG_0(swigCPtr, CExoString.getCPtr(string_));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int _OpLessThanOrEqual(byte* string_) {
    int retVal = NWNXLibPINVOKE.CExoString__OpLessThanOrEqual__SWIG_1(swigCPtr, string_);
    return retVal;
  }

  public int _OpGreaterThanOrEqual(CExoString string_) {
    int retVal = NWNXLibPINVOKE.CExoString__OpGreaterThanOrEqual__SWIG_0(swigCPtr, CExoString.getCPtr(string_));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int _OpGreaterThanOrEqual(byte* string_) {
    int retVal = NWNXLibPINVOKE.CExoString__OpGreaterThanOrEqual__SWIG_1(swigCPtr, string_);
    return retVal;
  }

  public byte _OpIndex(uint position) {
    byte retVal = NWNXLibPINVOKE.CExoString__OpIndex(swigCPtr, position);
    return retVal;
  }

  public CExoString _OpAdd(CExoString string_) {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CExoString__OpAdd(swigCPtr, CExoString.getCPtr(string_)), true);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int AsINT() {
    int retVal = NWNXLibPINVOKE.CExoString_AsINT(swigCPtr);
    return retVal;
  }

  public float AsFLOAT() {
    float retVal = NWNXLibPINVOKE.CExoString_AsFLOAT(swigCPtr);
    return retVal;
  }

  public byte* CStr() {
    byte* retVal = NWNXLibPINVOKE.CExoString_CStr(swigCPtr);
    return retVal;
  }

  public int Find(CExoString string_, int position) {
    int retVal = NWNXLibPINVOKE.CExoString_Find__SWIG_0(swigCPtr, CExoString.getCPtr(string_), position);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int Find(CExoString string_) {
    int retVal = NWNXLibPINVOKE.CExoString_Find__SWIG_1(swigCPtr, CExoString.getCPtr(string_));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int Find(byte ch, int position) {
    int retVal = NWNXLibPINVOKE.CExoString_Find__SWIG_2(swigCPtr, ch, position);
    return retVal;
  }

  public int Find(byte ch) {
    int retVal = NWNXLibPINVOKE.CExoString_Find__SWIG_3(swigCPtr, ch);
    return retVal;
  }

  public int FindNot(byte ch, int position) {
    int retVal = NWNXLibPINVOKE.CExoString_FindNot__SWIG_0(swigCPtr, ch, position);
    return retVal;
  }

  public int FindNot(byte ch) {
    int retVal = NWNXLibPINVOKE.CExoString_FindNot__SWIG_1(swigCPtr, ch);
    return retVal;
  }

  public CExoString RemoveAll(byte* c) {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CExoString_RemoveAll(swigCPtr, c), true);
    return ret;
  }

  public CExoString RemoveAllExcept(byte* c) {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CExoString_RemoveAllExcept(swigCPtr, c), true);
    return ret;
  }

  public void Format(byte* format) {
    NWNXLibPINVOKE.CExoString_Format(swigCPtr, format);
  }

  public uint GetLength() {
    uint retVal = NWNXLibPINVOKE.CExoString_GetLength(swigCPtr);
    return retVal;
  }

  public void Insert(CExoString string_, uint position) {
    NWNXLibPINVOKE.CExoString_Insert(swigCPtr, CExoString.getCPtr(string_), position);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int IsEmpty() {
    int retVal = NWNXLibPINVOKE.CExoString_IsEmpty(swigCPtr);
    return retVal;
  }

  public CExoString Left(uint count) {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CExoString_Left(swigCPtr, count), true);
    return ret;
  }

  public CExoString LowerCase() {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CExoString_LowerCase(swigCPtr), true);
    return ret;
  }

  public CExoString Right(uint count) {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CExoString_Right(swigCPtr, count), true);
    return ret;
  }

  public CExoString SubString(uint start, uint count) {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CExoString_SubString__SWIG_0(swigCPtr, start, count), true);
    return ret;
  }

  public CExoString SubString(uint start) {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CExoString_SubString__SWIG_1(swigCPtr, start), true);
    return ret;
  }

  public CExoString UpperCase() {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CExoString_UpperCase(swigCPtr), true);
    return ret;
  }

  public int CompareNoCase(CExoString sString) {
    int retVal = NWNXLibPINVOKE.CExoString_CompareNoCase(swigCPtr, CExoString.getCPtr(sString));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int ComparePrefixNoCase(CExoString sString, int nSize) {
    int retVal = NWNXLibPINVOKE.CExoString_ComparePrefixNoCase(swigCPtr, CExoString.getCPtr(sString), nSize);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int StripNonAlphaNumeric(int bFileName, int bEmail, int bMasterServer) {
    int retVal = NWNXLibPINVOKE.CExoString_StripNonAlphaNumeric__SWIG_0(swigCPtr, bFileName, bEmail, bMasterServer);
    return retVal;
  }

  public int StripNonAlphaNumeric(int bFileName, int bEmail) {
    int retVal = NWNXLibPINVOKE.CExoString_StripNonAlphaNumeric__SWIG_1(swigCPtr, bFileName, bEmail);
    return retVal;
  }

  public int StripNonAlphaNumeric(int bFileName) {
    int retVal = NWNXLibPINVOKE.CExoString_StripNonAlphaNumeric__SWIG_2(swigCPtr, bFileName);
    return retVal;
  }

  public int StripNonAlphaNumeric() {
    int retVal = NWNXLibPINVOKE.CExoString_StripNonAlphaNumeric__SWIG_3(swigCPtr);
    return retVal;
  }

  public CExoString Strip(bool leading, bool trailing, byte* set) {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CExoString_Strip__SWIG_0(swigCPtr, leading, trailing, set), true);
    return ret;
  }

  public CExoString Strip(bool leading, bool trailing) {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CExoString_Strip__SWIG_1(swigCPtr, leading, trailing), true);
    return ret;
  }

  public CExoString Strip(bool leading) {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CExoString_Strip__SWIG_2(swigCPtr, leading), true);
    return ret;
  }

  public CExoString Strip() {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CExoString_Strip__SWIG_3(swigCPtr), true);
    return ret;
  }

  public CExoString AsTAG() {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CExoString_AsTAG(swigCPtr), true);
    return ret;
  }

  public int GetHash() {
    int retVal = NWNXLibPINVOKE.CExoString_GetHash(swigCPtr);
    return retVal;
  }

  public VectorCExoString Split(CExoString delimiter) {
    VectorCExoString ret = new VectorCExoString(NWNXLibPINVOKE.CExoString_Split(swigCPtr, CExoString.getCPtr(delimiter)), true);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CExoString FormatBytes(ulong bytes) {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CExoString_FormatBytes(bytes), true);
    return ret;
  }

  public static CExoString FormatDuration(ulong span, int compact_levels, int min_level, bool label_fields, byte* separator) {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CExoString_FormatDuration__SWIG_0(span, compact_levels, min_level, label_fields, separator), true);
    return ret;
  }

  public static CExoString FormatDuration(ulong span, int compact_levels, int min_level, bool label_fields) {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CExoString_FormatDuration__SWIG_1(span, compact_levels, min_level, label_fields), true);
    return ret;
  }

  public static CExoString FormatDuration(ulong span, int compact_levels, int min_level) {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CExoString_FormatDuration__SWIG_2(span, compact_levels, min_level), true);
    return ret;
  }

  public static CExoString FormatDuration(ulong span, int compact_levels) {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CExoString_FormatDuration__SWIG_3(span, compact_levels), true);
    return ret;
  }

  public static CExoString FormatDuration(ulong span) {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CExoString_FormatDuration__SWIG_4(span), true);
    return ret;
  }

  public void Clear(int bDelete) {
    NWNXLibPINVOKE.CExoString_Clear__SWIG_0(swigCPtr, bDelete);
  }

  public void Clear() {
    NWNXLibPINVOKE.CExoString_Clear__SWIG_1(swigCPtr);
  }

  public void Steal(CExoString other) {
    NWNXLibPINVOKE.CExoString_Steal(swigCPtr, CExoString.getCPtr(other));
  }

  public byte* Relinquish() {
    byte* retVal = NWNXLibPINVOKE.CExoString_Relinquish(swigCPtr);
    return retVal;
  }

  public void Allocate(uint size) {
    NWNXLibPINVOKE.CExoString_Allocate(swigCPtr, size);
  }

  public void SetLength(uint len) {
    NWNXLibPINVOKE.CExoString_SetLength(swigCPtr, len);
  }

  public CExoString InitFromCharArray(byte* str, uint len) {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CExoString_InitFromCharArray__SWIG_0(swigCPtr, str, len), false);
    return ret;
  }

  public CExoString InitFromCharArray(byte* str) {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CExoString_InitFromCharArray__SWIG_1(swigCPtr, str), false);
    return ret;
  }

  public void _Destructor() {
    NWNXLibPINVOKE.CExoString__Destructor(swigCPtr);
  }

}

}

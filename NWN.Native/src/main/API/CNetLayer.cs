//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public unsafe class CNetLayer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CNetLayer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CNetLayer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CNetLayer() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NWNXLibPINVOKE.delete_CNetLayer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public global::System.IntPtr Pointer {
    get {
      return swigCPtr.Handle;
    }
  }

  public static unsafe implicit operator void*(CNetLayer self) {
    return (void*)self.swigCPtr.Handle;
  }

  public static unsafe CNetLayer FromPointer(void* pointer, bool memoryOwn = false) {
    return pointer != null ? new CNetLayer((global::System.IntPtr)pointer, memoryOwn) : null;
  }

  public static CNetLayer FromPointer(global::System.IntPtr pointer, bool memoryOwn = false) {
    return pointer != global::System.IntPtr.Zero ? new CNetLayer(pointer, memoryOwn) : null;
  }

  public bool Equals(CNetLayer other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }

    if (ReferenceEquals(this, other)) {
      return true;
    }

    return Pointer.Equals(other.Pointer);
  }

  public override bool Equals(object obj) {
    return ReferenceEquals(this, obj) || obj is CNetLayer other && Equals(other);
  }

  public override int GetHashCode() {
    return swigCPtr.Handle.GetHashCode();
  }

  public static bool operator ==(CNetLayer left, CNetLayer right) {
    return Equals(left, right);
  }

  public static bool operator !=(CNetLayer left, CNetLayer right) {
    return !Equals(left, right);
  }

  public SWIGTYPE_p_CNetLayerInternal m_pcNetLayerInternal {
    set {
      NWNXLibPINVOKE.CNetLayer_m_pcNetLayerInternal_set(swigCPtr, SWIGTYPE_p_CNetLayerInternal.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNetLayer_m_pcNetLayerInternal_get(swigCPtr);
      SWIGTYPE_p_CNetLayerInternal ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_CNetLayerInternal(cPtr, false);
      return ret;
    } 
  }

  public CNetLayer(CNetInstance arg0) : this(NWNXLibPINVOKE.new_CNetLayer((int)arg0), true) {
  }

  public int Initialize(CBaseExoApp pcExoApp) {
    int retVal = NWNXLibPINVOKE.CNetLayer_Initialize(swigCPtr, CBaseExoApp.getCPtr(pcExoApp));
    return retVal;
  }

  public CBaseExoApp GetExoApp() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNetLayer_GetExoApp(swigCPtr);
    CBaseExoApp ret = (cPtr == global::System.IntPtr.Zero) ? null : new CBaseExoApp(cPtr, false);
    return ret;
  }

  public int ShutDown() {
    int retVal = NWNXLibPINVOKE.CNetLayer_ShutDown(swigCPtr);
    return retVal;
  }

  public int StartUDP(uint nPort) {
    int retVal = NWNXLibPINVOKE.CNetLayer_StartUDP(swigCPtr, nPort);
    return retVal;
  }

  public int EndUDP() {
    int retVal = NWNXLibPINVOKE.CNetLayer_EndUDP(swigCPtr);
    return retVal;
  }

  public void SetServerLanguage(int nLanguage) {
    NWNXLibPINVOKE.CNetLayer_SetServerLanguage(swigCPtr, nLanguage);
  }

  public int StartServerMode(CExoString sSessionName, uint nMaxPlayers) {
    int retVal = NWNXLibPINVOKE.CNetLayer_StartServerMode(swigCPtr, CExoString.getCPtr(sSessionName), nMaxPlayers);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int GetPasswordRequired() {
    int retVal = NWNXLibPINVOKE.CNetLayer_GetPasswordRequired(swigCPtr);
    return retVal;
  }

  public CExoString GetPlayerPassword() {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CNetLayer_GetPlayerPassword(swigCPtr), true);
    return ret;
  }

  public int SetPlayerPassword(CExoString sPlayerPassword) {
    int retVal = NWNXLibPINVOKE.CNetLayer_SetPlayerPassword(swigCPtr, CExoString.getCPtr(sPlayerPassword));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public CExoString GetGameMasterPassword() {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CNetLayer_GetGameMasterPassword(swigCPtr), true);
    return ret;
  }

  public int SetGameMasterPassword(CExoString sGameMasterPassowrd) {
    int retVal = NWNXLibPINVOKE.CNetLayer_SetGameMasterPassword(swigCPtr, CExoString.getCPtr(sGameMasterPassowrd));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public CExoString GetServerAdminPassword() {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CNetLayer_GetServerAdminPassword(swigCPtr), true);
    return ret;
  }

  public int SetServerAdminPassword(CExoString sServerAdminPassword) {
    int retVal = NWNXLibPINVOKE.CNetLayer_SetServerAdminPassword(swigCPtr, CExoString.getCPtr(sServerAdminPassword));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int EndServerMode() {
    int retVal = NWNXLibPINVOKE.CNetLayer_EndServerMode(swigCPtr);
    return retVal;
  }

  public int GetServerConnected() {
    int retVal = NWNXLibPINVOKE.CNetLayer_GetServerConnected(swigCPtr);
    return retVal;
  }

  public CNetLayerPlayerInfo GetPlayerInfo(uint nPlayerId) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNetLayer_GetPlayerInfo(swigCPtr, nPlayerId);
    CNetLayerPlayerInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNetLayerPlayerInfo(cPtr, false);
    return ret;
  }

  public CExoString GetPlayerAddress(uint nPlayerId, int bIncludePort) {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CNetLayer_GetPlayerAddress__SWIG_0(swigCPtr, nPlayerId, bIncludePort), true);
    return ret;
  }

  public CExoString GetPlayerAddress(uint nPlayerId) {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CNetLayer_GetPlayerAddress__SWIG_1(swigCPtr, nPlayerId), true);
    return ret;
  }

  public int GetPlayerAddressRelayed(uint nPlayerId) {
    int retVal = NWNXLibPINVOKE.CNetLayer_GetPlayerAddressRelayed(swigCPtr, nPlayerId);
    return retVal;
  }

  public int DisconnectPlayer(uint nPlayerId, uint nStrRef, int bCDAuthFail, CExoString reason) {
    int retVal = NWNXLibPINVOKE.CNetLayer_DisconnectPlayer__SWIG_0(swigCPtr, nPlayerId, nStrRef, bCDAuthFail, CExoString.getCPtr(reason));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int DisconnectPlayer(uint nPlayerId, uint nStrRef, int bCDAuthFail) {
    int retVal = NWNXLibPINVOKE.CNetLayer_DisconnectPlayer__SWIG_1(swigCPtr, nPlayerId, nStrRef, bCDAuthFail);
    return retVal;
  }

  public int DisconnectPlayer(uint nPlayerId, uint nStrRef) {
    int retVal = NWNXLibPINVOKE.CNetLayer_DisconnectPlayer__SWIG_2(swigCPtr, nPlayerId, nStrRef);
    return retVal;
  }

  public int DisconnectPlayer(uint nPlayerId) {
    int retVal = NWNXLibPINVOKE.CNetLayer_DisconnectPlayer__SWIG_3(swigCPtr, nPlayerId);
    return retVal;
  }

  public uint GetDisconnectStrref() {
    uint retVal = NWNXLibPINVOKE.CNetLayer_GetDisconnectStrref(swigCPtr);
    return retVal;
  }

  public void SetDisconnectStrref(uint nStrref) {
    NWNXLibPINVOKE.CNetLayer_SetDisconnectStrref(swigCPtr, nStrref);
  }

  public CExoString GetDisconnectReason() {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CNetLayer_GetDisconnectReason(swigCPtr), true);
    return ret;
  }

  public void SetDisconnectReason(CExoString sReason) {
    NWNXLibPINVOKE.CNetLayer_SetDisconnectReason(swigCPtr, CExoString.getCPtr(sReason));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void StartAddressTranslation(CExoString sInternetAddress) {
    NWNXLibPINVOKE.CNetLayer_StartAddressTranslation(swigCPtr, CExoString.getCPtr(sInternetAddress));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetAddressTranslationResult(CExoString sInternetAddress, CExoArrayListUInt32 nIPv4) {
    int retVal = NWNXLibPINVOKE.CNetLayer_GetAddressTranslationResult(swigCPtr, CExoString.getCPtr(sInternetAddress), CExoArrayListUInt32.getCPtr(nIPv4));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public void EndAddressTranslation(CExoString sInternetAddress) {
    NWNXLibPINVOKE.CNetLayer_EndAddressTranslation(swigCPtr, CExoString.getCPtr(sInternetAddress));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int StartEnumerateSessionsSection(uint nEnumerateSection, uint nSize, CExoString sServerListToEnumerate) {
    int retVal = NWNXLibPINVOKE.CNetLayer_StartEnumerateSessionsSection(swigCPtr, nEnumerateSection, nSize, CExoString.getCPtr(sServerListToEnumerate));
    return retVal;
  }

  public int GetAnySessionsEnumerated() {
    int retVal = NWNXLibPINVOKE.CNetLayer_GetAnySessionsEnumerated(swigCPtr);
    return retVal;
  }

  public int EndEnumerateSessionsSection(uint nEnumerateSection) {
    int retVal = NWNXLibPINVOKE.CNetLayer_EndEnumerateSessionsSection(swigCPtr, nEnumerateSection);
    return retVal;
  }

  public int EndEnumerateSessions() {
    int retVal = NWNXLibPINVOKE.CNetLayer_EndEnumerateSessions(swigCPtr);
    return retVal;
  }

  public void CleanUpEnumerateSpecific() {
    NWNXLibPINVOKE.CNetLayer_CleanUpEnumerateSpecific(swigCPtr);
  }

  public uint GetSessionSectionStart(uint sectionSectionId) {
    uint retVal = NWNXLibPINVOKE.CNetLayer_GetSessionSectionStart(swigCPtr, sectionSectionId);
    return retVal;
  }

  public void SetupConnectIdentity(CExoString sPlayerName, int nPlayerLanguage, uint nConnectionType, CExoString sCDKey, CExoString sLegacyCDKey) {
    NWNXLibPINVOKE.CNetLayer_SetupConnectIdentity(swigCPtr, CExoString.getCPtr(sPlayerName), nPlayerLanguage, nConnectionType, CExoString.getCPtr(sCDKey), CExoString.getCPtr(sLegacyCDKey));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int StartConnectToSession(uint nSessionId, CExoString sPlayerName, int nPlayerLanguage, CExoString sPassword, uint nTimeOut, uint nConnectionType, CExoString sCDKey, CExoString sLegacyCDKey, CExoString expectCryptoPublicKeyBase64) {
    int retVal = NWNXLibPINVOKE.CNetLayer_StartConnectToSession__SWIG_0(swigCPtr, nSessionId, CExoString.getCPtr(sPlayerName), nPlayerLanguage, CExoString.getCPtr(sPassword), nTimeOut, nConnectionType, CExoString.getCPtr(sCDKey), CExoString.getCPtr(sLegacyCDKey), CExoString.getCPtr(expectCryptoPublicKeyBase64));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int StartConnectToSession(uint nSessionId, CExoString sPlayerName, int nPlayerLanguage, CExoString sPassword, uint nTimeOut, uint nConnectionType, CExoString sCDKey, CExoString sLegacyCDKey) {
    int retVal = NWNXLibPINVOKE.CNetLayer_StartConnectToSession__SWIG_1(swigCPtr, nSessionId, CExoString.getCPtr(sPlayerName), nPlayerLanguage, CExoString.getCPtr(sPassword), nTimeOut, nConnectionType, CExoString.getCPtr(sCDKey), CExoString.getCPtr(sLegacyCDKey));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int RequestExtendedServerInfo(uint nSessionId, int bGetInfo, int bGetPing) {
    int retVal = NWNXLibPINVOKE.CNetLayer_RequestExtendedServerInfo__SWIG_0(swigCPtr, nSessionId, bGetInfo, bGetPing);
    return retVal;
  }

  public int RequestExtendedServerInfo(uint nSessionId, int bGetInfo) {
    int retVal = NWNXLibPINVOKE.CNetLayer_RequestExtendedServerInfo__SWIG_1(swigCPtr, nSessionId, bGetInfo);
    return retVal;
  }

  public int RequestExtendedServerInfo(uint nSessionId) {
    int retVal = NWNXLibPINVOKE.CNetLayer_RequestExtendedServerInfo__SWIG_2(swigCPtr, nSessionId);
    return retVal;
  }

  public int RequestServerDetails(uint nConnectionId) {
    int retVal = NWNXLibPINVOKE.CNetLayer_RequestServerDetails(swigCPtr, nConnectionId);
    return retVal;
  }

  public int StartPing(uint nSessionId) {
    int retVal = NWNXLibPINVOKE.CNetLayer_StartPing(swigCPtr, nSessionId);
    return retVal;
  }

  public int EndPing(uint nSessionId) {
    int retVal = NWNXLibPINVOKE.CNetLayer_EndPing(swigCPtr, nSessionId);
    return retVal;
  }

  public void SetSessionInfoChanged(uint nSessionId, int bHasChanged) {
    NWNXLibPINVOKE.CNetLayer_SetSessionInfoChanged(swigCPtr, nSessionId, bHasChanged);
  }

  public int GetSessionInfoChanged(uint nSessionSection) {
    int retVal = NWNXLibPINVOKE.CNetLayer_GetSessionInfoChanged(swigCPtr, nSessionSection);
    return retVal;
  }

  public void ClearSessionInfoChanged(uint nSessionSection) {
    NWNXLibPINVOKE.CNetLayer_ClearSessionInfoChanged(swigCPtr, nSessionSection);
  }

  public uint GetSessionMaxPlayers() {
    uint retVal = NWNXLibPINVOKE.CNetLayer_GetSessionMaxPlayers(swigCPtr);
    return retVal;
  }

  public void SetSessionMaxPlayers(uint nMaxPlayers) {
    NWNXLibPINVOKE.CNetLayer_SetSessionMaxPlayers(swigCPtr, nMaxPlayers);
  }

  public CExoString GetSessionName() {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CNetLayer_GetSessionName(swigCPtr), true);
    return ret;
  }

  public void SetSessionName(CExoString sSessionName) {
    NWNXLibPINVOKE.CNetLayer_SetSessionName(swigCPtr, CExoString.getCPtr(sSessionName));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint GetUDPPort() {
    uint retVal = NWNXLibPINVOKE.CNetLayer_GetUDPPort(swigCPtr);
    return retVal;
  }

  public CNetLayerSessionInfo GetSessionInfo(uint nSession) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNetLayer_GetSessionInfo(swigCPtr, nSession);
    CNetLayerSessionInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNetLayerSessionInfo(cPtr, false);
    return ret;
  }

  public int EndConnectToSession() {
    int retVal = NWNXLibPINVOKE.CNetLayer_EndConnectToSession(swigCPtr);
    return retVal;
  }

  public uint GetConnectionError() {
    uint retVal = NWNXLibPINVOKE.CNetLayer_GetConnectionError(swigCPtr);
    return retVal;
  }

  public int GetClientConnected() {
    int retVal = NWNXLibPINVOKE.CNetLayer_GetClientConnected(swigCPtr);
    return retVal;
  }

  public uint GetLocalPrivileges(uint nConnectType) {
    uint retVal = NWNXLibPINVOKE.CNetLayer_GetLocalPrivileges(swigCPtr, nConnectType);
    return retVal;
  }

  public int DisconnectFromSession() {
    int retVal = NWNXLibPINVOKE.CNetLayer_DisconnectFromSession(swigCPtr);
    return retVal;
  }

  public int DropConnectionToServer() {
    int retVal = NWNXLibPINVOKE.CNetLayer_DropConnectionToServer(swigCPtr);
    return retVal;
  }

  public int IsConnectedToLocalhost() {
    int retVal = NWNXLibPINVOKE.CNetLayer_IsConnectedToLocalhost(swigCPtr);
    return retVal;
  }

  public void ProcessReceivedFrames(int bProcessReceivedMessage) {
    NWNXLibPINVOKE.CNetLayer_ProcessReceivedFrames__SWIG_0(swigCPtr, bProcessReceivedMessage);
  }

  public void ProcessReceivedFrames() {
    NWNXLibPINVOKE.CNetLayer_ProcessReceivedFrames__SWIG_1(swigCPtr);
  }

  public int SendMessageToPlayer(uint nPlayerId, byte* pData, uint nSize, uint nFlags) {
    int retVal = NWNXLibPINVOKE.CNetLayer_SendMessageToPlayer(swigCPtr, nPlayerId, pData, nSize, nFlags);
    return retVal;
  }

  public int SendMessageToAddress(CNetConnectionId nConnectionId, byte* pData, uint nSize) {
    int retVal = NWNXLibPINVOKE.CNetLayer_SendMessageToAddress(swigCPtr, CNetConnectionId.getCPtr(nConnectionId), pData, nSize);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int UpdateStatusLoop(uint nApplicationType) {
    int retVal = NWNXLibPINVOKE.CNetLayer_UpdateStatusLoop(swigCPtr, nApplicationType);
    return retVal;
  }

  public void StoreMessage(byte* pData, uint nMsgLength) {
    NWNXLibPINVOKE.CNetLayer_StoreMessage(swigCPtr, pData, nMsgLength);
  }

  public int GetGameMasterPermision() {
    int retVal = NWNXLibPINVOKE.CNetLayer_GetGameMasterPermision(swigCPtr);
    return retVal;
  }

  public void SetGameMasterPermission(int state) {
    NWNXLibPINVOKE.CNetLayer_SetGameMasterPermission(swigCPtr, state);
  }

  public SWIGTYPE_p_CExoNet GetExoNet() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNetLayer_GetExoNet(swigCPtr);
    SWIGTYPE_p_CExoNet ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_CExoNet(cPtr, false);
    return ret;
  }

  public CExoString GetServerNetworkAddress() {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CNetLayer_GetServerNetworkAddress(swigCPtr), true);
    return ret;
  }

  public void ShutDownClientInterfaceWithReason(uint nReason, CExoString sReason) {
    NWNXLibPINVOKE.CNetLayer_ShutDownClientInterfaceWithReason__SWIG_0(swigCPtr, nReason, CExoString.getCPtr(sReason));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ShutDownClientInterfaceWithReason(uint nReason) {
    NWNXLibPINVOKE.CNetLayer_ShutDownClientInterfaceWithReason__SWIG_1(swigCPtr, nReason);
  }

  public void SetMstServerPassword(CExoString szTemp) {
    NWNXLibPINVOKE.CNetLayer_SetMstServerPassword(swigCPtr, CExoString.getCPtr(szTemp));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int PlayerIdToConnectionId(uint nPlayerId, CNetConnectionId nConnectionId) {
    int retVal = NWNXLibPINVOKE.CNetLayer_PlayerIdToConnectionId(swigCPtr, nPlayerId, CNetConnectionId.getCPtr(nConnectionId));
    return retVal;
  }

  public int GetAnyWindowBehind() {
    int retVal = NWNXLibPINVOKE.CNetLayer_GetAnyWindowBehind(swigCPtr);
    return retVal;
  }

  public int OpenStandardConnection(int nConnectionToUse, CExoString sHostName, int nPort) {
    int retVal = NWNXLibPINVOKE.CNetLayer_OpenStandardConnection(swigCPtr, nConnectionToUse, CExoString.getCPtr(sHostName), nPort);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int GetMessageFromStandardConnection(int* nConnectionFrom, byte** pMessage, int* nSize) {
    int retVal = NWNXLibPINVOKE.CNetLayer_GetMessageFromStandardConnection(swigCPtr, nConnectionFrom, (global::System.IntPtr)pMessage, nSize);
    return retVal;
  }

  public int SendMessageToStandardConnection(int nConnectionTo, byte* pmessage, int nSize) {
    int retVal = NWNXLibPINVOKE.CNetLayer_SendMessageToStandardConnection(swigCPtr, nConnectionTo, pmessage, nSize);
    return retVal;
  }

  public int CloseStandardConnection(int nConnectonToClose) {
    int retVal = NWNXLibPINVOKE.CNetLayer_CloseStandardConnection(swigCPtr, nConnectonToClose);
    return retVal;
  }

  public void SetConnectionsDisallowed(int bDisallowLoginWhileMasterServerIsDown) {
    NWNXLibPINVOKE.CNetLayer_SetConnectionsDisallowed(swigCPtr, bDisallowLoginWhileMasterServerIsDown);
  }

  public int GetConnectionsMustBeValidated() {
    int retVal = NWNXLibPINVOKE.CNetLayer_GetConnectionsMustBeValidated(swigCPtr);
    return retVal;
  }

  public void SetConnectionsMustBeValidated(int bValidateLoginWhileMasterServerIsNotResponding) {
    NWNXLibPINVOKE.CNetLayer_SetConnectionsMustBeValidated(swigCPtr, bValidateLoginWhileMasterServerIsNotResponding);
  }

  public int GetEnumerateSpecificOverRelay() {
    int retVal = NWNXLibPINVOKE.CNetLayer_GetEnumerateSpecificOverRelay(swigCPtr);
    return retVal;
  }

  public void SetEnumerateSpecificOverRelay(int state, NativeArray<byte> relayToken) {
    NWNXLibPINVOKE.CNetLayer_SetEnumerateSpecificOverRelay(swigCPtr, state, relayToken);
  }

  public CExoString GetRouterPortMapDescription() {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CNetLayer_GetRouterPortMapDescription(swigCPtr), true);
    return ret;
  }

  public int ServerSatisfiesBuild(int nBuild, int nRevision, int nPostfix) {
    int retVal = NWNXLibPINVOKE.CNetLayer_ServerSatisfiesBuild(swigCPtr, nBuild, nRevision, nPostfix);
    return retVal;
  }

  public void _Destructor() {
    NWNXLibPINVOKE.CNetLayer__Destructor(swigCPtr);
  }

}

}

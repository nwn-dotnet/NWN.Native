//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public unsafe class CExoArrayListCFeatUseListEntryPtr : global::System.IDisposable, global::System.Collections.IEnumerable, global::System.Collections.Generic.IList<CFeatUseListEntry>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CExoArrayListCFeatUseListEntryPtr(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CExoArrayListCFeatUseListEntryPtr obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CExoArrayListCFeatUseListEntryPtr() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NWNXLibPINVOKE.delete_CExoArrayListCFeatUseListEntryPtr(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public global::System.IntPtr Pointer {
    get {
      return swigCPtr.Handle;
    }
  }

  public static unsafe implicit operator void*(CExoArrayListCFeatUseListEntryPtr self) {
    return (void*)self.swigCPtr.Handle;
  }

  public static unsafe CExoArrayListCFeatUseListEntryPtr FromPointer(void* pointer, bool memoryOwn = false) {
    return pointer != null ? new CExoArrayListCFeatUseListEntryPtr((global::System.IntPtr)pointer, memoryOwn) : null;
  }

  public static CExoArrayListCFeatUseListEntryPtr FromPointer(global::System.IntPtr pointer, bool memoryOwn = false) {
    return pointer != global::System.IntPtr.Zero ? new CExoArrayListCFeatUseListEntryPtr(pointer, memoryOwn) : null;
  }

  public bool Equals(CExoArrayListCFeatUseListEntryPtr other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }

    if (ReferenceEquals(this, other)) {
      return true;
    }

    return Pointer.Equals(other.Pointer);
  }

  public override bool Equals(object obj) {
    return ReferenceEquals(this, obj) || obj is CExoArrayListCFeatUseListEntryPtr other && Equals(other);
  }

  public override int GetHashCode() {
    return swigCPtr.Handle.GetHashCode();
  }

  public static bool operator ==(CExoArrayListCFeatUseListEntryPtr left, CExoArrayListCFeatUseListEntryPtr right) {
    return Equals(left, right);
  }

  public static bool operator !=(CExoArrayListCFeatUseListEntryPtr left, CExoArrayListCFeatUseListEntryPtr right) {
    return !Equals(left, right);
  }

  public CExoArrayListCFeatUseListEntryPtr(global::System.Collections.IEnumerable c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (CFeatUseListEntry element in c) {
      this.Add(element);
    }
  }

  public CExoArrayListCFeatUseListEntryPtr(global::System.Collections.Generic.IEnumerable<CFeatUseListEntry> c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (CFeatUseListEntry element in c) {
      this.Add(element);
    }
  }

  public bool IsFixedSize {
    get {
      return false;
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public CFeatUseListEntry this[int index] {
    get {
      return InternalGetItem(index);
    }
    set {
      InternalSetItem(index, value);
    }
  }

  public int Capacity {
    get {
      return (int)array_size;
    }
    set {
      if (value < num)
        throw new global::System.ArgumentOutOfRangeException("Capacity");
      SetSize(value);
    }
  }

  public int Count {
    get {
      return (int)num;
    }
  }

  public bool IsSynchronized {
    get {
      return false;
    }
  }

  public void CopyTo(CFeatUseListEntry[] array)
  {
    CopyTo(0, array, 0, this.Count);
  }

  public void CopyTo(CFeatUseListEntry[] array, int arrayIndex)
  {
    CopyTo(0, array, arrayIndex, this.Count);
  }

  public void Clear()
  {
    SetSize(0);
  }

  public void CopyTo(int index, CFeatUseListEntry[] array, int arrayIndex, int count)
  {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (count < 0)
      throw new global::System.ArgumentOutOfRangeException("count", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (index+count > this.Count || arrayIndex+count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");
    for (int i=0; i<count; i++)
      array.SetValue(InternalGetItemCopy(index+i), arrayIndex+i);
  }

  public CFeatUseListEntry[] ToArray() {
    CFeatUseListEntry[] array = new CFeatUseListEntry[this.Count];
    this.CopyTo(array);
    return array;
  }

  global::System.Collections.Generic.IEnumerator<CFeatUseListEntry> global::System.Collections.Generic.IEnumerable<CFeatUseListEntry>.GetEnumerator() {
    return new CExoArrayListCFeatUseListEntryPtrEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new CExoArrayListCFeatUseListEntryPtrEnumerator(this);
  }

  public CExoArrayListCFeatUseListEntryPtrEnumerator GetEnumerator() {
    return new CExoArrayListCFeatUseListEntryPtrEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class CExoArrayListCFeatUseListEntryPtrEnumerator : global::System.Collections.IEnumerator
    , global::System.Collections.Generic.IEnumerator<CFeatUseListEntry>
  {
    private CExoArrayListCFeatUseListEntryPtr collectionRef;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public CExoArrayListCFeatUseListEntryPtrEnumerator(CExoArrayListCFeatUseListEntryPtr collection) {
      collectionRef = collection;
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public CFeatUseListEntry Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (CFeatUseListEntry)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        currentObject = collectionRef[currentIndex];
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
        currentIndex = -1;
        currentObject = null;
    }
  }

  private int num {
    set {
      NWNXLibPINVOKE.CExoArrayListCFeatUseListEntryPtr_num_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CExoArrayListCFeatUseListEntryPtr_num_get(swigCPtr);
      return retVal;
    }

  }

  private int array_size {
    set {
      NWNXLibPINVOKE.CExoArrayListCFeatUseListEntryPtr_array_size_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CExoArrayListCFeatUseListEntryPtr_array_size_get(swigCPtr);
      return retVal;
    }

  }

  public void Add(CFeatUseListEntry t) {
    NWNXLibPINVOKE.CExoArrayListCFeatUseListEntryPtr_Add(swigCPtr, CFeatUseListEntry.getCPtr(t));
  }

  public void Pack() {
    NWNXLibPINVOKE.CExoArrayListCFeatUseListEntryPtr_Pack(swigCPtr);
  }

  private void Allocate(int s) {
    NWNXLibPINVOKE.CExoArrayListCFeatUseListEntryPtr_Allocate(swigCPtr, s);
  }

  public void SetSize(int s) {
    NWNXLibPINVOKE.CExoArrayListCFeatUseListEntryPtr_SetSize(swigCPtr, s);
  }

  public CExoArrayListCFeatUseListEntryPtr(int s) : this(NWNXLibPINVOKE.new_CExoArrayListCFeatUseListEntryPtr__SWIG_0(s), true) {
  }

  public CExoArrayListCFeatUseListEntryPtr() : this(NWNXLibPINVOKE.new_CExoArrayListCFeatUseListEntryPtr__SWIG_1(), true) {
  }

  public CExoArrayListCFeatUseListEntryPtr(CExoArrayListCFeatUseListEntryPtr list) : this(NWNXLibPINVOKE.new_CExoArrayListCFeatUseListEntryPtr__SWIG_2(CExoArrayListCFeatUseListEntryPtr.getCPtr(list)), true) {
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAt(int index) {
    NWNXLibPINVOKE.CExoArrayListCFeatUseListEntryPtr_RemoveAt(swigCPtr, index);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int IndexOf(CFeatUseListEntry t) {
    int retVal = NWNXLibPINVOKE.CExoArrayListCFeatUseListEntryPtr_IndexOf(swigCPtr, CFeatUseListEntry.getCPtr(t));
    return retVal;
  }

  public int AddUnique(CFeatUseListEntry t) {
    int retVal = NWNXLibPINVOKE.CExoArrayListCFeatUseListEntryPtr_AddUnique(swigCPtr, CFeatUseListEntry.getCPtr(t));
    return retVal;
  }

  private CFeatUseListEntry InternalGetItem(int index) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CExoArrayListCFeatUseListEntryPtr_InternalGetItem(swigCPtr, index);
    CFeatUseListEntry ret = (cPtr == global::System.IntPtr.Zero) ? null : new CFeatUseListEntry(cPtr, false);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private CFeatUseListEntry InternalGetItemCopy(int index) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CExoArrayListCFeatUseListEntryPtr_InternalGetItemCopy(swigCPtr, index);
    CFeatUseListEntry ret = (cPtr == global::System.IntPtr.Zero) ? null : new CFeatUseListEntry(cPtr, false);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void InternalSetItem(int index, CFeatUseListEntry val) {
    NWNXLibPINVOKE.CExoArrayListCFeatUseListEntryPtr_InternalSetItem(swigCPtr, index, CFeatUseListEntry.getCPtr(val));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Insert(int index, CFeatUseListEntry x) {
    NWNXLibPINVOKE.CExoArrayListCFeatUseListEntryPtr_Insert(swigCPtr, index, CFeatUseListEntry.getCPtr(x));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Contains(CFeatUseListEntry value) {
    bool ret = NWNXLibPINVOKE.CExoArrayListCFeatUseListEntryPtr_Contains(swigCPtr, CFeatUseListEntry.getCPtr(value));
    return ret;
  }

  public int LastIndexOf(CFeatUseListEntry value) {
    int retVal = NWNXLibPINVOKE.CExoArrayListCFeatUseListEntryPtr_LastIndexOf(swigCPtr, CFeatUseListEntry.getCPtr(value));
    return retVal;
  }

  public bool Remove(CFeatUseListEntry value) {
    bool ret = NWNXLibPINVOKE.CExoArrayListCFeatUseListEntryPtr_Remove(swigCPtr, CFeatUseListEntry.getCPtr(value));
    return ret;
  }

}

}

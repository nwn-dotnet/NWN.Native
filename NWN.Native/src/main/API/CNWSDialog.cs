//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public unsafe class CNWSDialog : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CNWSDialog(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CNWSDialog obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CNWSDialog() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NWNXLibPINVOKE.delete_CNWSDialog(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public global::System.IntPtr Pointer {
    get {
      return swigCPtr.Handle;
    }
  }

  public static unsafe implicit operator void*(CNWSDialog self) {
    return (void*)self.swigCPtr.Handle;
  }

  public static unsafe CNWSDialog FromPointer(void* pointer, bool memoryOwn = false) {
    return pointer != null ? new CNWSDialog((global::System.IntPtr)pointer, memoryOwn) : null;
  }

  public static CNWSDialog FromPointer(global::System.IntPtr pointer, bool memoryOwn = false) {
    return pointer != global::System.IntPtr.Zero ? new CNWSDialog(pointer, memoryOwn) : null;
  }

  public bool Equals(CNWSDialog other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }

    if (ReferenceEquals(this, other)) {
      return true;
    }

    return Pointer.Equals(other.Pointer);
  }

  public override bool Equals(object obj) {
    return ReferenceEquals(this, obj) || obj is CNWSDialog other && Equals(other);
  }

  public override int GetHashCode() {
    return swigCPtr.Handle.GetHashCode();
  }

  public static bool operator ==(CNWSDialog left, CNWSDialog right) {
    return Equals(left, right);
  }

  public static bool operator !=(CNWSDialog left, CNWSDialog right) {
    return !Equals(left, right);
  }

  public uint m_nEntries {
    set {
      NWNXLibPINVOKE.CNWSDialog_m_nEntries_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSDialog_m_nEntries_get(swigCPtr);
      return retVal;
    }

  }

  public CNWSDialogEntry m_pEntries {
    set {
      NWNXLibPINVOKE.CNWSDialog_m_pEntries_set(swigCPtr, CNWSDialogEntry.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSDialog_m_pEntries_get(swigCPtr);
      CNWSDialogEntry ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSDialogEntry(cPtr, false);
      return ret;
    } 
  }

  public uint m_nReplies {
    set {
      NWNXLibPINVOKE.CNWSDialog_m_nReplies_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSDialog_m_nReplies_get(swigCPtr);
      return retVal;
    }

  }

  public CNWSDialogReply m_pReplies {
    set {
      NWNXLibPINVOKE.CNWSDialog_m_pReplies_set(swigCPtr, CNWSDialogReply.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSDialog_m_pReplies_get(swigCPtr);
      CNWSDialogReply ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSDialogReply(cPtr, false);
      return ret;
    } 
  }

  public uint m_nStartingEntries {
    set {
      NWNXLibPINVOKE.CNWSDialog_m_nStartingEntries_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSDialog_m_nStartingEntries_get(swigCPtr);
      return retVal;
    }

  }

  public CNWSDialogLinkEntry m_pStartingEntries {
    set {
      NWNXLibPINVOKE.CNWSDialog_m_pStartingEntries_set(swigCPtr, CNWSDialogLinkEntry.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSDialog_m_pStartingEntries_get(swigCPtr);
      CNWSDialogLinkEntry ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSDialogLinkEntry(cPtr, false);
      return ret;
    } 
  }

  public CResRef m_refEndDialogNormal {
    set {
      NWNXLibPINVOKE.CNWSDialog_m_refEndDialogNormal_set(swigCPtr, CResRef.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSDialog_m_refEndDialogNormal_get(swigCPtr);
      CResRef ret = (cPtr == global::System.IntPtr.Zero) ? null : new CResRef(cPtr, false);
      return ret;
    } 
  }

  public CResRef m_refEndDialogAbort {
    set {
      NWNXLibPINVOKE.CNWSDialog_m_refEndDialogAbort_set(swigCPtr, CResRef.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSDialog_m_refEndDialogAbort_get(swigCPtr);
      CResRef ret = (cPtr == global::System.IntPtr.Zero) ? null : new CResRef(cPtr, false);
      return ret;
    } 
  }

  public CExoLinkedListCNWSDialogPlayer m_lPlayers {
    set {
      NWNXLibPINVOKE.CNWSDialog_m_lPlayers_set(swigCPtr, CExoLinkedListCNWSDialogPlayer.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSDialog_m_lPlayers_get(swigCPtr);
      CExoLinkedListCNWSDialogPlayer ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoLinkedListCNWSDialogPlayer(cPtr, false);
      return ret;
    } 
  }

  public int m_bRepliesSent {
    set {
      NWNXLibPINVOKE.CNWSDialog_m_bRepliesSent_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSDialog_m_bRepliesSent_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bEndOfDialog {
    set {
      NWNXLibPINVOKE.CNWSDialog_m_bEndOfDialog_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSDialog_m_bEndOfDialog_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_currentEntryIndex {
    set {
      NWNXLibPINVOKE.CNWSDialog_m_currentEntryIndex_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSDialog_m_currentEntryIndex_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nReplyIndex {
    set {
      NWNXLibPINVOKE.CNWSDialog_m_nReplyIndex_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSDialog_m_nReplyIndex_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_lastGender {
    set {
      NWNXLibPINVOKE.CNWSDialog_m_lastGender_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSDialog_m_lastGender_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_oidLastObject {
    set {
      NWNXLibPINVOKE.CNWSDialog_m_oidLastObject_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSDialog_m_oidLastObject_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_oidDialogOwner {
    set {
      NWNXLibPINVOKE.CNWSDialog_m_oidDialogOwner_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSDialog_m_oidDialogOwner_get(swigCPtr);
      return retVal;
    }

  }

  public CNWSDialogSpeaker m_pSpeakerMap {
    set {
      NWNXLibPINVOKE.CNWSDialog_m_pSpeakerMap_set(swigCPtr, CNWSDialogSpeaker.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSDialog_m_pSpeakerMap_get(swigCPtr);
      CNWSDialogSpeaker ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSDialogSpeaker(cPtr, false);
      return ret;
    } 
  }

  public uint m_nSpeakerMap {
    set {
      NWNXLibPINVOKE.CNWSDialog_m_nSpeakerMap_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSDialog_m_nSpeakerMap_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bMultiPCDialogViewOnly {
    set {
      NWNXLibPINVOKE.CNWSDialog_m_bMultiPCDialogViewOnly_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSDialog_m_bMultiPCDialogViewOnly_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bPrivate {
    set {
      NWNXLibPINVOKE.CNWSDialog_m_bPrivate_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSDialog_m_bPrivate_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_oidLastEntrySpeaker {
    set {
      NWNXLibPINVOKE.CNWSDialog_m_oidLastEntrySpeaker_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSDialog_m_oidLastEntrySpeaker_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_oidLastReplySpeaker {
    set {
      NWNXLibPINVOKE.CNWSDialog_m_oidLastReplySpeaker_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSDialog_m_oidLastReplySpeaker_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bDisableCameraZoom {
    set {
      NWNXLibPINVOKE.CNWSDialog_m_bDisableCameraZoom_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSDialog_m_bDisableCameraZoom_get(swigCPtr);
      return retVal;
    }

  }

  public CNWSDialog() : this(NWNXLibPINVOKE.new_CNWSDialog(), true) {
  }

  public void ClearDialogOwnerInObject(uint oidObject) {
    NWNXLibPINVOKE.CNWSDialog_ClearDialogOwnerInObject(swigCPtr, oidObject);
  }

  public void Cleanup() {
    NWNXLibPINVOKE.CNWSDialog_Cleanup(swigCPtr);
  }

  public int LoadDialog(CResGFF pRes, int bLoadReplies) {
    int retVal = NWNXLibPINVOKE.CNWSDialog_LoadDialog(swigCPtr, CResGFF.getCPtr(pRes), bLoadReplies);
    return retVal;
  }

  public CNWSObject GetSpeaker(CNWSObject pNWSObjectOwner, CExoString sSpeaker) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSDialog_GetSpeaker(swigCPtr, CNWSObject.getCPtr(pNWSObjectOwner), CExoString.getCPtr(sSpeaker));
    CNWSObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSObject(cPtr, false);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int CheckScript(CNWSObject pNWSObjectSpeaker, CResRef sActive, CExoArrayListScriptParam scriptParams) {
    int retVal = NWNXLibPINVOKE.CNWSDialog_CheckScript(swigCPtr, CNWSObject.getCPtr(pNWSObjectSpeaker), CResRef.getCPtr(sActive), CExoArrayListScriptParam.getCPtr(scriptParams));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public void RunScript(CNWSObject pNWSObjectSpeaker, CResRef sScript, CExoArrayListScriptParam scriptParams) {
    NWNXLibPINVOKE.CNWSDialog_RunScript(swigCPtr, CNWSObject.getCPtr(pNWSObjectSpeaker), CResRef.getCPtr(sScript), CExoArrayListScriptParam.getCPtr(scriptParams));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint GetStartEntry(CNWSObject pNWSObjectOwner) {
    uint retVal = NWNXLibPINVOKE.CNWSDialog_GetStartEntry(swigCPtr, CNWSObject.getCPtr(pNWSObjectOwner));
    return retVal;
  }

  public int GetStartEntryOneLiner(CNWSObject pNWSObjectOwner, CExoLocString sOneLiner, CResRef sSound, CResRef sScript, CExoArrayListScriptParam scriptParams) {
    int retVal = NWNXLibPINVOKE.CNWSDialog_GetStartEntryOneLiner(swigCPtr, CNWSObject.getCPtr(pNWSObjectOwner), CExoLocString.getCPtr(sOneLiner), CResRef.getCPtr(sSound), CResRef.getCPtr(sScript), CExoArrayListScriptParam.getCPtr(scriptParams));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public float SetDialogDelay(CNWSObject pNWSObjectOwner, CExoLocString sLocText, uint nMinSeconds, int bEnableNPCTiming) {
    float retVal = NWNXLibPINVOKE.CNWSDialog_SetDialogDelay(swigCPtr, CNWSObject.getCPtr(pNWSObjectOwner), CExoLocString.getCPtr(sLocText), nMinSeconds, bEnableNPCTiming);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public void AddJournalEntry(CExoString szPlotID, uint nState, uint nPlayerId) {
    NWNXLibPINVOKE.CNWSDialog_AddJournalEntry(swigCPtr, CExoString.getCPtr(szPlotID), nState, nPlayerId);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int SendDialogEntry(CNWSObject pNWSObjectOwner, uint nPlayerIdGUIOnly, uint iEntry, int bPlayHelloSound) {
    int retVal = NWNXLibPINVOKE.CNWSDialog_SendDialogEntry(swigCPtr, CNWSObject.getCPtr(pNWSObjectOwner), nPlayerIdGUIOnly, iEntry, bPlayHelloSound);
    return retVal;
  }

  public int SendDialogReplies(CNWSObject pNWSObjectOwner, uint nPlayerIdGUIOnly) {
    int retVal = NWNXLibPINVOKE.CNWSDialog_SendDialogReplies(swigCPtr, CNWSObject.getCPtr(pNWSObjectOwner), nPlayerIdGUIOnly);
    return retVal;
  }

  public int HandleReply(uint nPlayerID, CNWSObject pNWSObjectOwner, uint nReplyIndex, int bEscapeDialog, uint currentEntryIndex) {
    int retVal = NWNXLibPINVOKE.CNWSDialog_HandleReply(swigCPtr, nPlayerID, CNWSObject.getCPtr(pNWSObjectOwner), nReplyIndex, bEscapeDialog, currentEntryIndex);
    return retVal;
  }

  public int RemovePlayer(uint oidRemove) {
    int retVal = NWNXLibPINVOKE.CNWSDialog_RemovePlayer(swigCPtr, oidRemove);
    return retVal;
  }

  public int IsPlayerInDialog(uint oidPlayer) {
    int retVal = NWNXLibPINVOKE.CNWSDialog_IsPlayerInDialog(swigCPtr, oidPlayer);
    return retVal;
  }

  public void LoadScriptParams(CResGFF pRes, CExoArrayListScriptParam paramsList, CResStruct pStructure, byte* szFieldID) {
    NWNXLibPINVOKE.CNWSDialog_LoadScriptParams(swigCPtr, CResGFF.getCPtr(pRes), CExoArrayListScriptParam.getCPtr(paramsList), CResStruct.getCPtr(pStructure), szFieldID);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void _Destructor() {
    NWNXLibPINVOKE.CNWSDialog__Destructor(swigCPtr);
  }

}

}

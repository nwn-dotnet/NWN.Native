//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public unsafe class CNWArea : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CNWArea(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CNWArea obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CNWArea() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NWNXLibPINVOKE.delete_CNWArea(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public global::System.IntPtr Pointer {
    get {
      return swigCPtr.Handle;
    }
  }

  public static unsafe implicit operator void*(CNWArea self) {
    return (void*)self.swigCPtr.Handle;
  }

  public static unsafe CNWArea FromPointer(void* pointer, bool memoryOwn = false) {
    return pointer != null ? new CNWArea((global::System.IntPtr)pointer, memoryOwn) : null;
  }

  public static CNWArea FromPointer(global::System.IntPtr pointer, bool memoryOwn = false) {
    return pointer != global::System.IntPtr.Zero ? new CNWArea(pointer, memoryOwn) : null;
  }

  public bool Equals(CNWArea other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }

    if (ReferenceEquals(this, other)) {
      return true;
    }

    return Pointer.Equals(other.Pointer);
  }

  public override bool Equals(object obj) {
    return ReferenceEquals(this, obj) || obj is CNWArea other && Equals(other);
  }

  public override int GetHashCode() {
    return swigCPtr.Handle.GetHashCode();
  }

  public static bool operator ==(CNWArea left, CNWArea right) {
    return Equals(left, right);
  }

  public static bool operator !=(CNWArea left, CNWArea right) {
    return !Equals(left, right);
  }

  public uint m_nFlags {
    set {
      NWNXLibPINVOKE.CNWArea_m_nFlags_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWArea_m_nFlags_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nWidth {
    set {
      NWNXLibPINVOKE.CNWArea_m_nWidth_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWArea_m_nWidth_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nHeight {
    set {
      NWNXLibPINVOKE.CNWArea_m_nHeight_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWArea_m_nHeight_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nStaticObjects {
    set {
      NWNXLibPINVOKE.CNWArea_m_nStaticObjects_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWArea_m_nStaticObjects_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nStaticObjectsFilled {
    set {
      NWNXLibPINVOKE.CNWArea_m_nStaticObjectsFilled_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWArea_m_nStaticObjectsFilled_get(swigCPtr);
      return retVal;
    }

  }

  public uint* m_poidStaticObjectsObjectIds {
    set {
      NWNXLibPINVOKE.CNWArea_m_poidStaticObjectsObjectIds_set(swigCPtr, value);
    } 
    get {
      uint* retVal = NWNXLibPINVOKE.CNWArea_m_poidStaticObjectsObjectIds_get(swigCPtr);
      return retVal;
    }

  }

  public int* m_pnStaticObjectsTriangleStart {
    set {
      NWNXLibPINVOKE.CNWArea_m_pnStaticObjectsTriangleStart_set(swigCPtr, value);
    } 
    get {
      int* retVal = NWNXLibPINVOKE.CNWArea_m_pnStaticObjectsTriangleStart_get(swigCPtr);
      return retVal;
    }

  }

  public int* m_pnStaticObjectsTriangleCount {
    set {
      NWNXLibPINVOKE.CNWArea_m_pnStaticObjectsTriangleCount_set(swigCPtr, value);
    } 
    get {
      int* retVal = NWNXLibPINVOKE.CNWArea_m_pnStaticObjectsTriangleCount_get(swigCPtr);
      return retVal;
    }

  }

  public int* m_pnStaticObjectsVertexStart {
    set {
      NWNXLibPINVOKE.CNWArea_m_pnStaticObjectsVertexStart_set(swigCPtr, value);
    } 
    get {
      int* retVal = NWNXLibPINVOKE.CNWArea_m_pnStaticObjectsVertexStart_get(swigCPtr);
      return retVal;
    }

  }

  public int* m_pnStaticObjectsVertexCount {
    set {
      NWNXLibPINVOKE.CNWArea_m_pnStaticObjectsVertexCount_set(swigCPtr, value);
    } 
    get {
      int* retVal = NWNXLibPINVOKE.CNWArea_m_pnStaticObjectsVertexCount_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nStaticObjectTriangleArraySize {
    set {
      NWNXLibPINVOKE.CNWArea_m_nStaticObjectTriangleArraySize_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWArea_m_nStaticObjectTriangleArraySize_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nStaticObjectTriangles {
    set {
      NWNXLibPINVOKE.CNWArea_m_nStaticObjectTriangles_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWArea_m_nStaticObjectTriangles_get(swigCPtr);
      return retVal;
    }

  }

  public int* m_pnStaticObjectTriangles {
    set {
      NWNXLibPINVOKE.CNWArea_m_pnStaticObjectTriangles_set(swigCPtr, value);
    } 
    get {
      int* retVal = NWNXLibPINVOKE.CNWArea_m_pnStaticObjectTriangles_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nStaticObjectVertexArraySize {
    set {
      NWNXLibPINVOKE.CNWArea_m_nStaticObjectVertexArraySize_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWArea_m_nStaticObjectVertexArraySize_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nStaticObjectVertices {
    set {
      NWNXLibPINVOKE.CNWArea_m_nStaticObjectVertices_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWArea_m_nStaticObjectVertices_get(swigCPtr);
      return retVal;
    }

  }

  public Vector m_pvStaticObjectVertices {
    set {
      NWNXLibPINVOKE.CNWArea_m_pvStaticObjectVertices_set(swigCPtr, Vector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWArea_m_pvStaticObjectVertices_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, false);
      return ret;
    } 
  }

  public Vector m_pvStaticObjectBoundingBoxes {
    set {
      NWNXLibPINVOKE.CNWArea_m_pvStaticObjectBoundingBoxes_set(swigCPtr, Vector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWArea_m_pvStaticObjectBoundingBoxes_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, false);
      return ret;
    } 
  }

  public int m_nStaticBoundingBoxes {
    set {
      NWNXLibPINVOKE.CNWArea_m_nStaticBoundingBoxes_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWArea_m_nStaticBoundingBoxes_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nStaticBoundingBoxesFilled {
    set {
      NWNXLibPINVOKE.CNWArea_m_nStaticBoundingBoxesFilled_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWArea_m_nStaticBoundingBoxesFilled_get(swigCPtr);
      return retVal;
    }

  }

  public Vector m_pvStaticBoundingBoxes {
    set {
      NWNXLibPINVOKE.CNWArea_m_pvStaticBoundingBoxes_set(swigCPtr, Vector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWArea_m_pvStaticBoundingBoxes_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, false);
      return ret;
    } 
  }

  public uint* m_poidStaticBBObjectIds {
    set {
      NWNXLibPINVOKE.CNWArea_m_poidStaticBBObjectIds_set(swigCPtr, value);
    } 
    get {
      uint* retVal = NWNXLibPINVOKE.CNWArea_m_poidStaticBBObjectIds_get(swigCPtr);
      return retVal;
    }

  }

  public Vector m_vFogColor {
    set {
      NWNXLibPINVOKE.CNWArea_m_vFogColor_set(swigCPtr, Vector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWArea_m_vFogColor_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, false);
      return ret;
    } 
  }

  public byte m_nFogValue {
    set {
      NWNXLibPINVOKE.CNWArea_m_nFogValue_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWArea_m_nFogValue_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nMoonAmbientColor {
    set {
      NWNXLibPINVOKE.CNWArea_m_nMoonAmbientColor_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWArea_m_nMoonAmbientColor_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nMoonDiffuseColor {
    set {
      NWNXLibPINVOKE.CNWArea_m_nMoonDiffuseColor_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWArea_m_nMoonDiffuseColor_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nMoonFogColor {
    set {
      NWNXLibPINVOKE.CNWArea_m_nMoonFogColor_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWArea_m_nMoonFogColor_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nMoonFogAmount {
    set {
      NWNXLibPINVOKE.CNWArea_m_nMoonFogAmount_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWArea_m_nMoonFogAmount_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bMoonShadows {
    set {
      NWNXLibPINVOKE.CNWArea_m_bMoonShadows_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWArea_m_bMoonShadows_get(swigCPtr);
      return retVal;
    }

  }

  public Vector m_vMoonDirection {
    set {
      NWNXLibPINVOKE.CNWArea_m_vMoonDirection_set(swigCPtr, Vector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWArea_m_vMoonDirection_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, false);
      return ret;
    } 
  }

  public uint m_nSunAmbientColor {
    set {
      NWNXLibPINVOKE.CNWArea_m_nSunAmbientColor_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWArea_m_nSunAmbientColor_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nSunDiffuseColor {
    set {
      NWNXLibPINVOKE.CNWArea_m_nSunDiffuseColor_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWArea_m_nSunDiffuseColor_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nSunFogColor {
    set {
      NWNXLibPINVOKE.CNWArea_m_nSunFogColor_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWArea_m_nSunFogColor_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nSunFogAmount {
    set {
      NWNXLibPINVOKE.CNWArea_m_nSunFogAmount_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWArea_m_nSunFogAmount_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bSunShadows {
    set {
      NWNXLibPINVOKE.CNWArea_m_bSunShadows_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWArea_m_bSunShadows_get(swigCPtr);
      return retVal;
    }

  }

  public Vector m_vSunDirection {
    set {
      NWNXLibPINVOKE.CNWArea_m_vSunDirection_set(swigCPtr, Vector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWArea_m_vSunDirection_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, false);
      return ret;
    } 
  }

  public int m_bUseDayNightCycle {
    set {
      NWNXLibPINVOKE.CNWArea_m_bUseDayNightCycle_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWArea_m_bUseDayNightCycle_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bIsNight {
    set {
      NWNXLibPINVOKE.CNWArea_m_bIsNight_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWArea_m_bIsNight_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nSkyBox {
    set {
      NWNXLibPINVOKE.CNWArea_m_nSkyBox_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWArea_m_nSkyBox_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nChanceOfRain {
    set {
      NWNXLibPINVOKE.CNWArea_m_nChanceOfRain_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWArea_m_nChanceOfRain_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nChanceOfSnow {
    set {
      NWNXLibPINVOKE.CNWArea_m_nChanceOfSnow_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWArea_m_nChanceOfSnow_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nChanceOfLightning {
    set {
      NWNXLibPINVOKE.CNWArea_m_nChanceOfLightning_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWArea_m_nChanceOfLightning_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nWindAmount {
    set {
      NWNXLibPINVOKE.CNWArea_m_nWindAmount_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWArea_m_nWindAmount_get(swigCPtr);
      return retVal;
    }

  }

  public Vector m_vWindDirection {
    set {
      NWNXLibPINVOKE.CNWArea_m_vWindDirection_set(swigCPtr, Vector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWArea_m_vWindDirection_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, false);
      return ret;
    } 
  }

  public float m_fWindMagnitude {
    set {
      NWNXLibPINVOKE.CNWArea_m_fWindMagnitude_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CNWArea_m_fWindMagnitude_get(swigCPtr);
      return retVal;
    }

  }

  public float m_fWindYaw {
    set {
      NWNXLibPINVOKE.CNWArea_m_fWindYaw_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CNWArea_m_fWindYaw_get(swigCPtr);
      return retVal;
    }

  }

  public float m_fWindPitch {
    set {
      NWNXLibPINVOKE.CNWArea_m_fWindPitch_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CNWArea_m_fWindPitch_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bNoRestingAllowed {
    set {
      NWNXLibPINVOKE.CNWArea_m_bNoRestingAllowed_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWArea_m_bNoRestingAllowed_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nShadowOpacity {
    set {
      NWNXLibPINVOKE.CNWArea_m_nShadowOpacity_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWArea_m_nShadowOpacity_get(swigCPtr);
      return retVal;
    }

  }

  public float m_fFogClipDistance {
    set {
      NWNXLibPINVOKE.CNWArea_m_fFogClipDistance_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CNWArea_m_fFogClipDistance_get(swigCPtr);
      return retVal;
    }

  }

  public CNWArea() : this(NWNXLibPINVOKE.new_CNWArea(), true) {
  }

  public int AddStaticObject(uint oidObject, Vector vOrientation, Vector vPosition, int nVertices, Vector pvVertices, int nTriangles, int* pnTriangles) {
    int retVal = NWNXLibPINVOKE.CNWArea_AddStaticObject(swigCPtr, oidObject, Vector.getCPtr(vOrientation), Vector.getCPtr(vPosition), nVertices, Vector.getCPtr(pvVertices), nTriangles, pnTriangles);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public void ReplaceStaticObject(int nObjectPosition, uint oidObject, Vector vOrientation, Vector vPosition, int nVertices, Vector pvVertices, int nTriangles, int* pnTriangles) {
    NWNXLibPINVOKE.CNWArea_ReplaceStaticObject(swigCPtr, nObjectPosition, oidObject, Vector.getCPtr(vOrientation), Vector.getCPtr(vPosition), nVertices, Vector.getCPtr(pvVertices), nTriangles, pnTriangles);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetStaticObjectBoundingBox(int nStaticObjectIndex, Vector vMinimum, Vector vMaximum) {
    NWNXLibPINVOKE.CNWArea_GetStaticObjectBoundingBox(swigCPtr, nStaticObjectIndex, Vector.getCPtr(vMinimum), Vector.getCPtr(vMaximum));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int AddStaticBoundingBox(uint oidObject, Vector vMinimum, Vector vMaximum) {
    int retVal = NWNXLibPINVOKE.CNWArea_AddStaticBoundingBox(swigCPtr, oidObject, Vector.getCPtr(vMinimum), Vector.getCPtr(vMaximum));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public int RemoveStaticBoundingBox(uint oidObject) {
    int retVal = NWNXLibPINVOKE.CNWArea_RemoveStaticBoundingBox(swigCPtr, oidObject);
    return retVal;
  }

  public virtual int NoCreaturesOnLine(float fSourceX, float fSourceY, float fTargetX, float fTargetY, CPathfindInformation pPathfindInfo, int bCheckSourceOccluded, int bIgnoreAssociates, uint* poidBlockingCreature, int bEvaluateOverlappingTarget) {
    int retVal = NWNXLibPINVOKE.CNWArea_NoCreaturesOnLine__SWIG_0(swigCPtr, fSourceX, fSourceY, fTargetX, fTargetY, CPathfindInformation.getCPtr(pPathfindInfo), bCheckSourceOccluded, bIgnoreAssociates, poidBlockingCreature, bEvaluateOverlappingTarget);
    return retVal;
  }

  public virtual int NoCreaturesOnLine(float fSourceX, float fSourceY, float fTargetX, float fTargetY, CPathfindInformation pPathfindInfo, int bCheckSourceOccluded, int bIgnoreAssociates, uint* poidBlockingCreature) {
    int retVal = NWNXLibPINVOKE.CNWArea_NoCreaturesOnLine__SWIG_1(swigCPtr, fSourceX, fSourceY, fTargetX, fTargetY, CPathfindInformation.getCPtr(pPathfindInfo), bCheckSourceOccluded, bIgnoreAssociates, poidBlockingCreature);
    return retVal;
  }

  public virtual int NoCreaturesOnLine(float fSourceX, float fSourceY, float fTargetX, float fTargetY, CPathfindInformation pPathfindInfo, int bCheckSourceOccluded, int bIgnoreAssociates) {
    int retVal = NWNXLibPINVOKE.CNWArea_NoCreaturesOnLine__SWIG_2(swigCPtr, fSourceX, fSourceY, fTargetX, fTargetY, CPathfindInformation.getCPtr(pPathfindInfo), bCheckSourceOccluded, bIgnoreAssociates);
    return retVal;
  }

  public virtual int NoCreaturesOnLine(float fSourceX, float fSourceY, float fTargetX, float fTargetY, CPathfindInformation pPathfindInfo, int bCheckSourceOccluded) {
    int retVal = NWNXLibPINVOKE.CNWArea_NoCreaturesOnLine__SWIG_3(swigCPtr, fSourceX, fSourceY, fTargetX, fTargetY, CPathfindInformation.getCPtr(pPathfindInfo), bCheckSourceOccluded);
    return retVal;
  }

  public virtual int NoCreaturesOnLine(float fSourceX, float fSourceY, float fTargetX, float fTargetY, CPathfindInformation pPathfindInfo) {
    int retVal = NWNXLibPINVOKE.CNWArea_NoCreaturesOnLine__SWIG_4(swigCPtr, fSourceX, fSourceY, fTargetX, fTargetY, CPathfindInformation.getCPtr(pPathfindInfo));
    return retVal;
  }

  public void GrowStaticObjectArray() {
    NWNXLibPINVOKE.CNWArea_GrowStaticObjectArray(swigCPtr);
  }

  public void GrowStaticObjectVertices(int nNewVertices) {
    NWNXLibPINVOKE.CNWArea_GrowStaticObjectVertices(swigCPtr, nNewVertices);
  }

  public void GrowStaticObjectTriangles(int nNewTriangles) {
    NWNXLibPINVOKE.CNWArea_GrowStaticObjectTriangles(swigCPtr, nNewTriangles);
  }

  public void InitializeStaticObjects() {
    NWNXLibPINVOKE.CNWArea_InitializeStaticObjects(swigCPtr);
  }

  public int IntersectLineSegments(float fX1, float fY1, float fX2, float fY2, float fX3, float fY3, float fX4, float fY4, float* fXIntersect, float* fYIntersect) {
    int retVal = NWNXLibPINVOKE.CNWArea_IntersectLineSegments(swigCPtr, fX1, fY1, fX2, fY2, fX3, fY3, fX4, fY4, fXIntersect, fYIntersect);
    return retVal;
  }

  public int NoNonWalkPolys(float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, uint oidDeniedDoor) {
    int retVal = NWNXLibPINVOKE.CNWArea_NoNonWalkPolys__SWIG_0(swigCPtr, fSourceX, fSourceY, fTargetX, fTargetY, fMinZ, fMaxZ, fPersonalSpace, oidDeniedDoor);
    return retVal;
  }

  public int NoNonWalkPolys(float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace) {
    int retVal = NWNXLibPINVOKE.CNWArea_NoNonWalkPolys__SWIG_1(swigCPtr, fSourceX, fSourceY, fTargetX, fTargetY, fMinZ, fMaxZ, fPersonalSpace);
    return retVal;
  }

  public int NoNonWalkPolysDetailed(float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, uint oidDeniedDoor, uint* oidBlockingDoor, int bWalking, CExoArrayListCGameObjectPtr pExcludeList, int bIgnoreTransDoors) {
    int retVal = NWNXLibPINVOKE.CNWArea_NoNonWalkPolysDetailed__SWIG_0(swigCPtr, fSourceX, fSourceY, fTargetX, fTargetY, fMinZ, fMaxZ, fPersonalSpace, oidDeniedDoor, (global::System.IntPtr)oidBlockingDoor, bWalking, CExoArrayListCGameObjectPtr.getCPtr(pExcludeList), bIgnoreTransDoors);
    return retVal;
  }

  public int NoNonWalkPolysDetailed(float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, uint oidDeniedDoor, uint* oidBlockingDoor, int bWalking, CExoArrayListCGameObjectPtr pExcludeList) {
    int retVal = NWNXLibPINVOKE.CNWArea_NoNonWalkPolysDetailed__SWIG_1(swigCPtr, fSourceX, fSourceY, fTargetX, fTargetY, fMinZ, fMaxZ, fPersonalSpace, oidDeniedDoor, (global::System.IntPtr)oidBlockingDoor, bWalking, CExoArrayListCGameObjectPtr.getCPtr(pExcludeList));
    return retVal;
  }

  public int NoNonWalkPolysDetailed(float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, uint oidDeniedDoor, uint* oidBlockingDoor, int bWalking) {
    int retVal = NWNXLibPINVOKE.CNWArea_NoNonWalkPolysDetailed__SWIG_2(swigCPtr, fSourceX, fSourceY, fTargetX, fTargetY, fMinZ, fMaxZ, fPersonalSpace, oidDeniedDoor, (global::System.IntPtr)oidBlockingDoor, bWalking);
    return retVal;
  }

  public int NoNonWalkPolysInDoors(float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, uint oidDeniedDoor, uint* oidBlockingDoor, int bWalking, CExoArrayListCGameObjectPtr pExcludeList, int bIgnoreTransDoors) {
    int retVal = NWNXLibPINVOKE.CNWArea_NoNonWalkPolysInDoors__SWIG_0(swigCPtr, fSourceX, fSourceY, fTargetX, fTargetY, fMinZ, fMaxZ, fPersonalSpace, oidDeniedDoor, (global::System.IntPtr)oidBlockingDoor, bWalking, CExoArrayListCGameObjectPtr.getCPtr(pExcludeList), bIgnoreTransDoors);
    return retVal;
  }

  public int NoNonWalkPolysInDoors(float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, uint oidDeniedDoor, uint* oidBlockingDoor, int bWalking, CExoArrayListCGameObjectPtr pExcludeList) {
    int retVal = NWNXLibPINVOKE.CNWArea_NoNonWalkPolysInDoors__SWIG_1(swigCPtr, fSourceX, fSourceY, fTargetX, fTargetY, fMinZ, fMaxZ, fPersonalSpace, oidDeniedDoor, (global::System.IntPtr)oidBlockingDoor, bWalking, CExoArrayListCGameObjectPtr.getCPtr(pExcludeList));
    return retVal;
  }

  public int NoNonWalkPolysInDoors(float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, uint oidDeniedDoor, uint* oidBlockingDoor, int bWalking) {
    int retVal = NWNXLibPINVOKE.CNWArea_NoNonWalkPolysInDoors__SWIG_2(swigCPtr, fSourceX, fSourceY, fTargetX, fTargetY, fMinZ, fMaxZ, fPersonalSpace, oidDeniedDoor, (global::System.IntPtr)oidBlockingDoor, bWalking);
    return retVal;
  }

  public virtual int HandleTransparentDoors(float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, uint oidDeniedDoor, uint* oidBlockingDoor, int bWalking, CExoArrayListCGameObjectPtr pExcludeList, int bIgnoreTransDoors) {
    int retVal = NWNXLibPINVOKE.CNWArea_HandleTransparentDoors__SWIG_0(swigCPtr, fSourceX, fSourceY, fTargetX, fTargetY, fMinZ, fMaxZ, fPersonalSpace, oidDeniedDoor, (global::System.IntPtr)oidBlockingDoor, bWalking, CExoArrayListCGameObjectPtr.getCPtr(pExcludeList), bIgnoreTransDoors);
    return retVal;
  }

  public virtual int HandleTransparentDoors(float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, uint oidDeniedDoor, uint* oidBlockingDoor, int bWalking, CExoArrayListCGameObjectPtr pExcludeList) {
    int retVal = NWNXLibPINVOKE.CNWArea_HandleTransparentDoors__SWIG_1(swigCPtr, fSourceX, fSourceY, fTargetX, fTargetY, fMinZ, fMaxZ, fPersonalSpace, oidDeniedDoor, (global::System.IntPtr)oidBlockingDoor, bWalking, CExoArrayListCGameObjectPtr.getCPtr(pExcludeList));
    return retVal;
  }

  public virtual int HandleTransparentDoors(float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, uint oidDeniedDoor, uint* oidBlockingDoor, int bWalking) {
    int retVal = NWNXLibPINVOKE.CNWArea_HandleTransparentDoors__SWIG_2(swigCPtr, fSourceX, fSourceY, fTargetX, fTargetY, fMinZ, fMaxZ, fPersonalSpace, oidDeniedDoor, (global::System.IntPtr)oidBlockingDoor, bWalking);
    return retVal;
  }

  public virtual int GetIsIDInExcludeList(uint oidID, CExoArrayListCGameObjectPtr pExcludeList) {
    int retVal = NWNXLibPINVOKE.CNWArea_GetIsIDInExcludeList__SWIG_0(swigCPtr, oidID, CExoArrayListCGameObjectPtr.getCPtr(pExcludeList));
    return retVal;
  }

  public virtual int GetIsIDInExcludeList(uint oidID) {
    int retVal = NWNXLibPINVOKE.CNWArea_GetIsIDInExcludeList__SWIG_1(swigCPtr, oidID);
    return retVal;
  }

  public virtual int NoNoneWalkPolysInStaticObject(uint oidObject, float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, uint oidDeniedDoor, int bWalking) {
    int retVal = NWNXLibPINVOKE.CNWArea_NoNoneWalkPolysInStaticObject__SWIG_0(swigCPtr, oidObject, fSourceX, fSourceY, fTargetX, fTargetY, fMinZ, fMaxZ, fPersonalSpace, oidDeniedDoor, bWalking);
    return retVal;
  }

  public virtual int NoNoneWalkPolysInStaticObject(uint oidObject, float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, uint oidDeniedDoor) {
    int retVal = NWNXLibPINVOKE.CNWArea_NoNoneWalkPolysInStaticObject__SWIG_1(swigCPtr, oidObject, fSourceX, fSourceY, fTargetX, fTargetY, fMinZ, fMaxZ, fPersonalSpace, oidDeniedDoor);
    return retVal;
  }

  public void RemoveStaticObject(int nObjectIndex) {
    NWNXLibPINVOKE.CNWArea_RemoveStaticObject(swigCPtr, nObjectIndex);
  }

  public void GetFog(int* pFogValue, Vector pColor) {
    NWNXLibPINVOKE.CNWArea_GetFog(swigCPtr, pFogValue, Vector.getCPtr(pColor));
  }

  public int GetIsNight() {
    int retVal = NWNXLibPINVOKE.CNWArea_GetIsNight(swigCPtr);
    return retVal;
  }

  public virtual int SetFog(int nFogValue, Vector vColor) {
    int retVal = NWNXLibPINVOKE.CNWArea_SetFog(swigCPtr, nFogValue, Vector.getCPtr(vColor));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return retVal;
  }

  public virtual int SetIsNight(int bIsNight) {
    int retVal = NWNXLibPINVOKE.CNWArea_SetIsNight(swigCPtr, bIsNight);
    return retVal;
  }

  public virtual int SetWind(byte nAmount) {
    int retVal = NWNXLibPINVOKE.CNWArea_SetWind(swigCPtr, nAmount);
    return retVal;
  }

  public void SetCustomWind(Vector vDirection, float fMagnitude, float fYaw, float fPitch) {
    NWNXLibPINVOKE.CNWArea_SetCustomWind(swigCPtr, Vector.getCPtr(vDirection), fMagnitude, fYaw, fPitch);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void _Destructor() {
    NWNXLibPINVOKE.CNWArea__Destructor(swigCPtr);
  }

}

}

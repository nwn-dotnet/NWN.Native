//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public unsafe class Definition : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Definition(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Definition obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Definition() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NWNXLibPINVOKE.delete_Definition(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public global::System.IntPtr Pointer {
    get {
      return swigCPtr.Handle;
    }
  }

  public static unsafe implicit operator void*(Definition self) {
    return (void*)self.swigCPtr.Handle;
  }

  public static unsafe Definition FromPointer(void* pointer, bool memoryOwn = false) {
    return pointer != null ? new Definition((global::System.IntPtr)pointer, memoryOwn) : null;
  }

  public static Definition FromPointer(global::System.IntPtr pointer, bool memoryOwn = false) {
    return pointer != global::System.IntPtr.Zero ? new Definition(pointer, memoryOwn) : null;
  }

  public bool Equals(Definition other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }

    if (ReferenceEquals(this, other)) {
      return true;
    }

    return Pointer.Equals(other.Pointer);
  }

  public override bool Equals(object obj) {
    return ReferenceEquals(this, obj) || obj is Definition other && Equals(other);
  }

  public override int GetHashCode() {
    return swigCPtr.Handle.GetHashCode();
  }

  public static bool operator ==(Definition left, Definition right) {
    return Equals(left, right);
  }

  public static bool operator !=(Definition left, Definition right) {
    return !Equals(left, right);
  }

  public unsafe class MigrationDef : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal MigrationDef(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MigrationDef obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~MigrationDef() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            NWNXLibPINVOKE.delete_Definition_MigrationDef(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public global::System.IntPtr Pointer {
      get {
        return swigCPtr.Handle;
      }
    }
  
    public static unsafe implicit operator void*(MigrationDef self) {
      return (void*)self.swigCPtr.Handle;
    }
  
    public static unsafe MigrationDef FromPointer(void* pointer, bool memoryOwn = false) {
      return pointer != null ? new MigrationDef((global::System.IntPtr)pointer, memoryOwn) : null;
    }
  
    public static MigrationDef FromPointer(global::System.IntPtr pointer, bool memoryOwn = false) {
      return pointer != global::System.IntPtr.Zero ? new MigrationDef(pointer, memoryOwn) : null;
    }
  
    public bool Equals(MigrationDef other) {
      if (ReferenceEquals(null, other)) {
        return false;
      }
  
      if (ReferenceEquals(this, other)) {
        return true;
      }
  
      return Pointer.Equals(other.Pointer);
    }
  
    public override bool Equals(object obj) {
      return ReferenceEquals(this, obj) || obj is MigrationDef other && Equals(other);
    }
  
    public override int GetHashCode() {
      return swigCPtr.Handle.GetHashCode();
    }
  
    public static bool operator ==(MigrationDef left, MigrationDef right) {
      return Equals(left, right);
    }
  
    public static bool operator !=(MigrationDef left, MigrationDef right) {
      return !Equals(left, right);
    }
  
    public byte* m_label {
      set {
        NWNXLibPINVOKE.Definition_MigrationDef_m_label_set(swigCPtr, value);
      } 
      get {
        byte* retVal = NWNXLibPINVOKE.Definition_MigrationDef_m_label_get(swigCPtr);
        return retVal;
      }
  
    }
  
    public byte* m_sql {
      set {
        NWNXLibPINVOKE.Definition_MigrationDef_m_sql_set(swigCPtr, value);
      } 
      get {
        byte* retVal = NWNXLibPINVOKE.Definition_MigrationDef_m_sql_get(swigCPtr);
        return retVal;
      }
  
    }
  
    public MigrationDef() : this(NWNXLibPINVOKE.new_Definition_MigrationDef(), true) {
    }
  
  }

  public Definition() : this(NWNXLibPINVOKE.new_Definition__SWIG_0(), true) {
  }

  public Definition(long user_version, byte* schema, VectorNWSQLiteMigrationsDefinitionMigrationDef migrations) : this(NWNXLibPINVOKE.new_Definition__SWIG_1(user_version, schema, VectorNWSQLiteMigrationsDefinitionMigrationDef.getCPtr(migrations)), true) {
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public long m_user_version {
    set {
      NWNXLibPINVOKE.Definition_m_user_version_set(swigCPtr, value);
    } 
    get {
      long retVal = NWNXLibPINVOKE.Definition_m_user_version_get(swigCPtr);
      return retVal;
    }

  }

  public byte* m_schema {
    set {
      NWNXLibPINVOKE.Definition_m_schema_set(swigCPtr, value);
    } 
    get {
      byte* retVal = NWNXLibPINVOKE.Definition_m_schema_get(swigCPtr);
      return retVal;
    }

  }

  public VectorNWSQLiteMigrationsDefinitionMigrationDef m_migrations {
    set {
      NWNXLibPINVOKE.Definition_m_migrations_set(swigCPtr, VectorNWSQLiteMigrationsDefinitionMigrationDef.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.Definition_m_migrations_get(swigCPtr);
      VectorNWSQLiteMigrationsDefinitionMigrationDef ret = (cPtr == global::System.IntPtr.Zero) ? null : new VectorNWSQLiteMigrationsDefinitionMigrationDef(cPtr, false);
      return ret;
    } 
  }

}

}

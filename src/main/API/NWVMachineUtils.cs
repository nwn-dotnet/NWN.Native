//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public unsafe class NWVMachineUtils : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal NWVMachineUtils(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(NWVMachineUtils obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~NWVMachineUtils() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NWNXLibPINVOKE.delete_NWVMachineUtils(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public global::System.IntPtr Pointer {
    get {
      return swigCPtr.Handle;
    }
  }

  public static unsafe implicit operator void*(NWVMachineUtils self) {
    return (void*)self.swigCPtr.Handle;
  }

  public static unsafe NWVMachineUtils FromPointer(void* pointer, bool memoryOwn = false) {
    return pointer != null ? new NWVMachineUtils((global::System.IntPtr)pointer, memoryOwn) : null;
  }

  public static NWVMachineUtils FromPointer(global::System.IntPtr pointer, bool memoryOwn = false) {
    return pointer != global::System.IntPtr.Zero ? new NWVMachineUtils(pointer, memoryOwn) : null;
  }

  public bool Equals(NWVMachineUtils other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }

    if (ReferenceEquals(this, other)) {
      return true;
    }

    return Pointer.Equals(other.Pointer);
  }

  public override bool Equals(object obj) {
    return ReferenceEquals(this, obj) || obj is NWVMachineUtils other && Equals(other);
  }

  public override int GetHashCode() {
    return swigCPtr.Handle.GetHashCode();
  }

  public static bool operator ==(NWVMachineUtils left, NWVMachineUtils right) {
    return Equals(left, right);
  }

  public static bool operator !=(NWVMachineUtils left, NWVMachineUtils right) {
    return !Equals(left, right);
  }

  public static SWIGTYPE_p_std__shared_ptrT_DataBlock_t SerializeToGff(ICGameObject o, int bSaveObjectState) {
    SWIGTYPE_p_std__shared_ptrT_DataBlock_t ret = new SWIGTYPE_p_std__shared_ptrT_DataBlock_t(NWNXLibPINVOKE.NWVMachineUtils_SerializeToGff(o == null ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : o.GetInterfaceCPtr(), bSaveObjectState), true);
    return ret;
  }

  public static ICGameObject DeserializeFromGff(SWIGTYPE_p_std__shared_ptrT_DataView_t d, int bLoadObjectState, CScriptLocation loc, uint owner, CExoString sNewTag, int bObjectCopy) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.NWVMachineUtils_DeserializeFromGff__SWIG_0(SWIGTYPE_p_std__shared_ptrT_DataView_t.getCPtr(d), bLoadObjectState, CScriptLocation.getCPtr(loc), owner, CExoString.getCPtr(sNewTag), bObjectCopy);
    CGameObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new CGameObject(cPtr, false);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return (ICGameObject)ret;
  }

  public static ICGameObject DeserializeFromGff(SWIGTYPE_p_std__shared_ptrT_DataView_t d, int bLoadObjectState, CScriptLocation loc, uint owner, CExoString sNewTag) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.NWVMachineUtils_DeserializeFromGff__SWIG_1(SWIGTYPE_p_std__shared_ptrT_DataView_t.getCPtr(d), bLoadObjectState, CScriptLocation.getCPtr(loc), owner, CExoString.getCPtr(sNewTag));
    CGameObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new CGameObject(cPtr, false);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return (ICGameObject)ret;
  }

  public static JsonEngineStructure SerializeToJson(ICGameObject o, int bSaveObjectState) {
    JsonEngineStructure ret = new JsonEngineStructure(NWNXLibPINVOKE.NWVMachineUtils_SerializeToJson__SWIG_0(o == null ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : o.GetInterfaceCPtr(), bSaveObjectState), true);
    return ret;
  }

  public static ICGameObject DeserializeFromJson(JsonEngineStructure ob, int bLoadObjectState, CScriptLocation loc, uint owner, CExoString sNewTag, int bObjectCopy) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.NWVMachineUtils_DeserializeFromJson__SWIG_0(JsonEngineStructure.getCPtr(ob), bLoadObjectState, CScriptLocation.getCPtr(loc), owner, CExoString.getCPtr(sNewTag), bObjectCopy);
    CGameObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new CGameObject(cPtr, false);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return (ICGameObject)ret;
  }

  public static ICGameObject DeserializeFromJson(JsonEngineStructure ob, int bLoadObjectState, CScriptLocation loc, uint owner, CExoString sNewTag) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.NWVMachineUtils_DeserializeFromJson__SWIG_1(JsonEngineStructure.getCPtr(ob), bLoadObjectState, CScriptLocation.getCPtr(loc), owner, CExoString.getCPtr(sNewTag));
    CGameObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new CGameObject(cPtr, false);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return (ICGameObject)ret;
  }

  public static SWIGTYPE_p_nlohmann__json StructToJson(CResGFF gff, CResStruct str, uint nType) {
    SWIGTYPE_p_nlohmann__json ret = new SWIGTYPE_p_nlohmann__json(NWNXLibPINVOKE.NWVMachineUtils_StructToJson(CResGFF.getCPtr(gff), CResStruct.getCPtr(str), nType), true);
    return ret;
  }

  public static void JsonToStruct(SWIGTYPE_p_nlohmann__json ob, CResGFF gff, CResStruct str) {
    NWNXLibPINVOKE.NWVMachineUtils_JsonToStruct(SWIGTYPE_p_nlohmann__json.getCPtr(ob), CResGFF.getCPtr(gff), CResStruct.getCPtr(str));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static JsonEngineStructure SerializeToJson(CResRef r, ushort t) {
    JsonEngineStructure ret = new JsonEngineStructure(NWNXLibPINVOKE.NWVMachineUtils_SerializeToJson__SWIG_1(CResRef.getCPtr(r), t), true);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNWSArea SpawnScriptArea(CResGFF areRoot, CResGFF gitRoot, CExoString newTag, CExoString newName) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.NWVMachineUtils_SpawnScriptArea__SWIG_0(CResGFF.getCPtr(areRoot), CResGFF.getCPtr(gitRoot), CExoString.getCPtr(newTag), CExoString.getCPtr(newName));
    CNWSArea ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSArea(cPtr, false);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNWSArea SpawnScriptArea(CResGFF areRoot, CResGFF gitRoot, CExoString newTag) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.NWVMachineUtils_SpawnScriptArea__SWIG_1(CResGFF.getCPtr(areRoot), CResGFF.getCPtr(gitRoot), CExoString.getCPtr(newTag));
    CNWSArea ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSArea(cPtr, false);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNWSArea SpawnScriptArea(CResGFF areRoot, CResGFF gitRoot) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.NWVMachineUtils_SpawnScriptArea__SWIG_2(CResGFF.getCPtr(areRoot), CResGFF.getCPtr(gitRoot));
    CNWSArea ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSArea(cPtr, false);
    return ret;
  }

  public NWVMachineUtils() : this(NWNXLibPINVOKE.new_NWVMachineUtils(), true) {
  }

}

}

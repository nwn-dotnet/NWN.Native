//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public unsafe class CNWSCreatureStats : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CNWSCreatureStats(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CNWSCreatureStats obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CNWSCreatureStats() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NWNXLibPINVOKE.delete_CNWSCreatureStats(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public global::System.IntPtr Pointer {
    get {
      return swigCPtr.Handle;
    }
  }

  public static unsafe implicit operator void*(CNWSCreatureStats self) {
    return (void*)self.swigCPtr.Handle;
  }

  public static unsafe CNWSCreatureStats FromPointer(void* pointer, bool memoryOwn = false) {
    return pointer != null ? new CNWSCreatureStats((global::System.IntPtr)pointer, memoryOwn) : null;
  }

  public static CNWSCreatureStats FromPointer(global::System.IntPtr pointer, bool memoryOwn = false) {
    return pointer != global::System.IntPtr.Zero ? new CNWSCreatureStats(pointer, memoryOwn) : null;
  }

  public bool Equals(CNWSCreatureStats other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }

    if (ReferenceEquals(this, other)) {
      return true;
    }

    return Pointer.Equals(other.Pointer);
  }

  public override bool Equals(object obj) {
    return ReferenceEquals(this, obj) || obj is CNWSCreatureStats other && Equals(other);
  }

  public override int GetHashCode() {
    return swigCPtr.Handle.GetHashCode();
  }

  public static bool operator ==(CNWSCreatureStats left, CNWSCreatureStats right) {
    return Equals(left, right);
  }

  public static bool operator !=(CNWSCreatureStats left, CNWSCreatureStats right) {
    return !Equals(left, right);
  }

  public CExoArrayListUInt16 m_lstFeats {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_lstFeats_set(swigCPtr, CExoArrayListUInt16.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreatureStats_m_lstFeats_get(swigCPtr);
      CExoArrayListUInt16 ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoArrayListUInt16(cPtr, false);
      return ret;
    } 
  }

  public CExoArrayListCFeatUseListEntryPtr m_lstFeatUses {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_lstFeatUses_set(swigCPtr, CExoArrayListCFeatUseListEntryPtr.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreatureStats_m_lstFeatUses_get(swigCPtr);
      CExoArrayListCFeatUseListEntryPtr ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoArrayListCFeatUseListEntryPtr(cPtr, false);
      return ret;
    } 
  }

  public CExoArrayListUInt16 m_lstBonusFeats {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_lstBonusFeats_set(swigCPtr, CExoArrayListUInt16.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreatureStats_m_lstBonusFeats_get(swigCPtr);
      CExoArrayListUInt16 ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoArrayListUInt16(cPtr, false);
      return ret;
    } 
  }

  public CNWSCreature m_pBaseCreature {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_pBaseCreature_set(swigCPtr, CNWSCreature.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreatureStats_m_pBaseCreature_get(swigCPtr);
      CNWSCreature ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSCreature(cPtr, false);
      return ret;
    } 
  }

  public CExoArrayListCNWLevelStatsPtr m_lstLevelStats {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_lstLevelStats_set(swigCPtr, CExoArrayListCNWLevelStatsPtr.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreatureStats_m_lstLevelStats_get(swigCPtr);
      CExoArrayListCNWLevelStatsPtr ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoArrayListCNWLevelStatsPtr(cPtr, false);
      return ret;
    } 
  }

  public CExoLocString m_lsFirstName {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_lsFirstName_set(swigCPtr, CExoLocString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreatureStats_m_lsFirstName_get(swigCPtr);
      CExoLocString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoLocString(cPtr, false);
      return ret;
    } 
  }

  public CExoLocString m_lsLastName {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_lsLastName_set(swigCPtr, CExoLocString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreatureStats_m_lsLastName_get(swigCPtr);
      CExoLocString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoLocString(cPtr, false);
      return ret;
    } 
  }

  public CResRef m_cDialog {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_cDialog_set(swigCPtr, CResRef.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreatureStats_m_cDialog_get(swigCPtr);
      CResRef ret = (cPtr == global::System.IntPtr.Zero) ? null : new CResRef(cPtr, false);
      return ret;
    } 
  }

  public int m_bDialogInterruptable {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_bDialogInterruptable_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_bDialogInterruptable_get(swigCPtr);
      return retVal;
    }

  }

  public CExoLocString m_sDescription {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_sDescription_set(swigCPtr, CExoLocString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreatureStats_m_sDescription_get(swigCPtr);
      CExoLocString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoLocString(cPtr, false);
      return ret;
    } 
  }

  public CExoString m_sDescriptionOverride {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_sDescriptionOverride_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreatureStats_m_sDescriptionOverride_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public int m_nAge {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nAge_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nAge_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nGender {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nGender_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nGender_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nExperience {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nExperience_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nExperience_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bIsDMCharacterFile {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_bIsDMCharacterFile_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_bIsDMCharacterFile_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bIsPC {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_bIsPC_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_bIsPC_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bIsAIDisabledPossess {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_bIsAIDisabledPossess_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_bIsAIDisabledPossess_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bIsAIDisabledOverride {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_bIsAIDisabledOverride_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_bIsAIDisabledOverride_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bDMManifested {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_bDMManifested_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_bDMManifested_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nMultiClassLeveledUpIn {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nMultiClassLeveledUpIn_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nMultiClassLeveledUpIn_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nFactionId {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nFactionId_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nFactionId_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nOriginalFactionId {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nOriginalFactionId_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nOriginalFactionId_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nPreDominationFactionId {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nPreDominationFactionId_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nPreDominationFactionId_get(swigCPtr);
      return retVal;
    }

  }

  public float m_fChallengeRating {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_fChallengeRating_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_fChallengeRating_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nStartingPackage {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nStartingPackage_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nStartingPackage_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nNumMultiClasses {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nNumMultiClasses_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nNumMultiClasses_get(swigCPtr);
      return retVal;
    }

  }

  public CNWSCreatureStats_ClassInfoArray m_ClassInfo {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_ClassInfo_set(swigCPtr, CNWSCreatureStats_ClassInfoArray.getCPtr(value));
    } 
    get {
        global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreatureStats_m_ClassInfo_get(swigCPtr);;
        CNWSCreatureStats_ClassInfoArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSCreatureStats_ClassInfoArray(cPtr, false);
        return ret;
    }

  }

  public ushort m_nRace {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nRace_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nRace_get(swigCPtr);
      return retVal;
    }

  }

  public CExoString m_sSubRace {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_sSubRace_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreatureStats_m_sSubRace_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public byte m_nStrengthBase {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nStrengthBase_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nStrengthBase_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nStrengthModifier {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nStrengthModifier_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nStrengthModifier_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nDexterityBase {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nDexterityBase_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nDexterityBase_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nDexterityModifier {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nDexterityModifier_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nDexterityModifier_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nConstitutionBase {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nConstitutionBase_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nConstitutionBase_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nConstitutionModifier {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nConstitutionModifier_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nConstitutionModifier_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nIntelligenceBase {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nIntelligenceBase_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nIntelligenceBase_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nIntelligenceModifier {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nIntelligenceModifier_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nIntelligenceModifier_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nWisdomBase {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nWisdomBase_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nWisdomBase_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nWisdomModifier {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nWisdomModifier_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nWisdomModifier_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nCharismaBase {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nCharismaBase_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nCharismaBase_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nCharismaModifier {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nCharismaModifier_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nCharismaModifier_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nACNaturalBase {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nACNaturalBase_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nACNaturalBase_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nACArmorBase {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nACArmorBase_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nACArmorBase_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nACShieldBase {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nACShieldBase_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nACShieldBase_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nACArmorMod {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nACArmorMod_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nACArmorMod_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nACArmorNeg {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nACArmorNeg_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nACArmorNeg_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nACDeflectionMod {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nACDeflectionMod_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nACDeflectionMod_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nACDeflectionNeg {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nACDeflectionNeg_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nACDeflectionNeg_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nACShieldMod {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nACShieldMod_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nACShieldMod_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nACShieldNeg {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nACShieldNeg_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nACShieldNeg_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nACNaturalMod {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nACNaturalMod_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nACNaturalMod_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nACNaturalNeg {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nACNaturalNeg_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nACNaturalNeg_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nACDodgeMod {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nACDodgeMod_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nACDodgeMod_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nACDodgeNeg {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nACDodgeNeg_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nACDodgeNeg_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nACPolymorph {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nACPolymorph_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nACPolymorph_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nBaseAttackBonus {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nBaseAttackBonus_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nBaseAttackBonus_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nOverrideBaseAttackBonus {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nOverrideBaseAttackBonus_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nOverrideBaseAttackBonus_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nEnemyAttackBonus {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nEnemyAttackBonus_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nEnemyAttackBonus_get(swigCPtr);
      return retVal;
    }

  }

  public byte* m_nDamageImmunity {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nDamageImmunity_set(swigCPtr, value);
    } 
    get {
      byte* retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nDamageImmunity_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nDamageRoll {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nDamageRoll_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nDamageRoll_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nCriticalHitRoll {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nCriticalHitRoll_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nCriticalHitRoll_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nCriticalHitMultiplier {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nCriticalHitMultiplier_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nCriticalHitMultiplier_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nAttacksPerRound {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nAttacksPerRound_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nAttacksPerRound_get(swigCPtr);
      return retVal;
    }

  }

  public CCombatInformation m_pCombatInformation {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_pCombatInformation_set(swigCPtr, CCombatInformation.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreatureStats_m_pCombatInformation_get(swigCPtr);
      CCombatInformation ret = (cPtr == global::System.IntPtr.Zero) ? null : new CCombatInformation(cPtr, false);
      return ret;
    } 
  }

  public byte m_nArcaneSpellFailure {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nArcaneSpellFailure_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nArcaneSpellFailure_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nBaseArmorArcaneSpellFailure {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nBaseArmorArcaneSpellFailure_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nBaseArmorArcaneSpellFailure_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nBaseShieldArcaneSpellFailure {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nBaseShieldArcaneSpellFailure_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nBaseShieldArcaneSpellFailure_get(swigCPtr);
      return retVal;
    }

  }

  public NativeArray<byte> m_pSpellFailure {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_pSpellFailure_set(swigCPtr, value);
    } 
    get {
      global::System.IntPtr arrayPtr = NWNXLibPINVOKE.CNWSCreatureStats_m_pSpellFailure_get(swigCPtr);
      NativeArray<byte> retVal = new NativeArray<byte>(arrayPtr, 9);

      return retVal; // byte[9]
    }

  }

  public byte m_nSpellResistance {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nSpellResistance_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nSpellResistance_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nSpellResistancePenalty {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nSpellResistancePenalty_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nSpellResistancePenalty_get(swigCPtr);
      return retVal;
    }

  }

  public CExoArrayListCNWSStatsSpellLikeAbility m_pSpellLikeAbilityList {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_pSpellLikeAbilityList_set(swigCPtr, CExoArrayListCNWSStatsSpellLikeAbility.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreatureStats_m_pSpellLikeAbilityList_get(swigCPtr);
      CExoArrayListCNWSStatsSpellLikeAbility ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoArrayListCNWSStatsSpellLikeAbility(cPtr, false);
      return ret;
    } 
  }

  public ushort m_nTempHitpointsPtr {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nTempHitpointsPtr_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nTempHitpointsPtr_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nACVersusPtr {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nACVersusPtr_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nACVersusPtr_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nAttackBonusPtr {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nAttackBonusPtr_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nAttackBonusPtr_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nDamageReductionPtr {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nDamageReductionPtr_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nDamageReductionPtr_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nDamageResistancePtr {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nDamageResistancePtr_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nDamageResistancePtr_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nDamageBonusPtr {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nDamageBonusPtr_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nDamageBonusPtr_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nAIStatePtr {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nAIStatePtr_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nAIStatePtr_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nEffectIconPtr {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nEffectIconPtr_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nEffectIconPtr_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nSanctuaryPtr {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nSanctuaryPtr_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nSanctuaryPtr_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nInvisibilityPtr {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nInvisibilityPtr_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nInvisibilityPtr_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nSpellResistancePtr {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nSpellResistancePtr_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nSpellResistancePtr_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nAbilityPtr {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nAbilityPtr_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nAbilityPtr_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nSeeInvisiblePtr {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nSeeInvisiblePtr_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nSeeInvisiblePtr_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nUltraVisionPtr {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nUltraVisionPtr_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nUltraVisionPtr_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nMissChancePtr {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nMissChancePtr_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nMissChancePtr_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nConcealmentPtr {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nConcealmentPtr_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nConcealmentPtr_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nBlindnessPtr {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nBlindnessPtr_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nBlindnessPtr_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nWalkAnimationPtr {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nWalkAnimationPtr_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nWalkAnimationPtr_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nSpellLevelAbsorptionPtr {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nSpellLevelAbsorptionPtr_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nSpellLevelAbsorptionPtr_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nSpellImmunityPtr {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nSpellImmunityPtr_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nSpellImmunityPtr_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nDamageShieldPtr {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nDamageShieldPtr_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nDamageShieldPtr_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nSkillBonusPtr {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nSkillBonusPtr_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nSkillBonusPtr_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nSavingThrowBonusPtr {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nSavingThrowBonusPtr_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nSavingThrowBonusPtr_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nHastePtr {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nHastePtr_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nHastePtr_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nEffectImmunityPtr {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nEffectImmunityPtr_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nEffectImmunityPtr_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nLimitMovementSpeedPtr {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nLimitMovementSpeedPtr_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nLimitMovementSpeedPtr_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nMovementSpeedDecreasePtr {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nMovementSpeedDecreasePtr_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nMovementSpeedDecreasePtr_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nSkillPointsRemaining {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nSkillPointsRemaining_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nSkillPointsRemaining_get(swigCPtr);
      return retVal;
    }

  }

  public byte* m_lstSkillRanks {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_lstSkillRanks_set(swigCPtr, value);
    } 
    get {
      byte* retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_lstSkillRanks_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nArmorCheckPenalty {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nArmorCheckPenalty_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nArmorCheckPenalty_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nShieldCheckPenalty {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nShieldCheckPenalty_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nShieldCheckPenalty_get(swigCPtr);
      return retVal;
    }

  }

  public CResRef m_cPortrait {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_cPortrait_set(swigCPtr, CResRef.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreatureStats_m_cPortrait_get(swigCPtr);
      CResRef ret = (cPtr == global::System.IntPtr.Zero) ? null : new CResRef(cPtr, false);
      return ret;
    } 
  }

  public short m_nAlignmentGoodEvil {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nAlignmentGoodEvil_set(swigCPtr, value);
    } 
    get {
      short retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nAlignmentGoodEvil_get(swigCPtr);
      return retVal;
    }

  }

  public short m_nAlignmentLawChaos {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nAlignmentLawChaos_set(swigCPtr, value);
    } 
    get {
      short retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nAlignmentLawChaos_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nSkinColor {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nSkinColor_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nSkinColor_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nHairColor {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nHairColor_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nHairColor_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nTattoo1Color {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nTattoo1Color_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nTattoo1Color_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nTattoo2Color {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nTattoo2Color_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nTattoo2Color_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nAppearanceType {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nAppearanceType_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nAppearanceType_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nPhenoType {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nPhenoType_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nPhenoType_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nHeadVariation {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nHeadVariation_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nHeadVariation_get(swigCPtr);
      return retVal;
    }

  }

  public NativeArray<ushort> m_pPartVariation {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_pPartVariation_set(swigCPtr, value);
    } 
    get {
      global::System.IntPtr arrayPtr = NWNXLibPINVOKE.CNWSCreatureStats_m_pPartVariation_get(swigCPtr);
      NativeArray<ushort> retVal = new NativeArray<ushort>(arrayPtr, 19);

      return retVal; // ushort[19]
    }

  }

  public uint m_nTailVariation {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nTailVariation_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nTailVariation_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nWingVariation {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nWingVariation_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nWingVariation_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nMovementRate {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nMovementRate_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nMovementRate_get(swigCPtr);
      return retVal;
    }

  }

  public float m_fMovementRunSpeed {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_fMovementRunSpeed_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_fMovementRunSpeed_get(swigCPtr);
      return retVal;
    }

  }

  public float m_fMovementWalkSpeed {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_fMovementWalkSpeed_set(swigCPtr, value);
    } 
    get {
      float retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_fMovementWalkSpeed_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nFortSavingThrowMisc {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nFortSavingThrowMisc_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nFortSavingThrowMisc_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nWillSavingThrowMisc {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nWillSavingThrowMisc_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nWillSavingThrowMisc_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nReflexSavingThrowMisc {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nReflexSavingThrowMisc_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nReflexSavingThrowMisc_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nAnimalCompanionCreatureType {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nAnimalCompanionCreatureType_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nAnimalCompanionCreatureType_get(swigCPtr);
      return retVal;
    }

  }

  public int m_nFamiliarCreatureType {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nFamiliarCreatureType_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nFamiliarCreatureType_get(swigCPtr);
      return retVal;
    }

  }

  public CExoString m_sAnimalCompanionName {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_sAnimalCompanionName_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreatureStats_m_sAnimalCompanionName_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public CExoString m_sFamiliarName {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_sFamiliarName_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreatureStats_m_sFamiliarName_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public CExoString m_sDeity {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_sDeity_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreatureStats_m_sDeity_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public uint m_nLatestDataMigration {
    set {
      NWNXLibPINVOKE.CNWSCreatureStats_m_nLatestDataMigration_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreatureStats_m_nLatestDataMigration_get(swigCPtr);
      return retVal;
    }

  }

  public CNWSCreatureStats(CNWSCreature pCreature) : this(NWNXLibPINVOKE.new_CNWSCreatureStats(CNWSCreature.getCPtr(pCreature)), true) {
  }

  public void UpdateLastStatsObject(ulong nUpdatesRequired, CNWCreatureStatsUpdate updateObject) {
    NWNXLibPINVOKE.CNWSCreatureStats_UpdateLastStatsObject(swigCPtr, nUpdatesRequired, CNWCreatureStatsUpdate.getCPtr(updateObject));
  }

  public CNWLevelStats GetLevelStats(byte nLevel) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreatureStats_GetLevelStats(swigCPtr, nLevel);
    CNWLevelStats ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWLevelStats(cPtr, false);
    return ret;
  }

  public uint ReadStatsFromGff(CResGFF pRes, CResStruct pGffStructWithCreatureStats, CNWSCreatureAppearanceInfo pAppInfo, int bIsSaveGame, int bIsPlayerCharacter, int bCopyObject, int bLoadOID) {
    uint retVal = NWNXLibPINVOKE.CNWSCreatureStats_ReadStatsFromGff__SWIG_0(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pGffStructWithCreatureStats), CNWSCreatureAppearanceInfo.getCPtr(pAppInfo), bIsSaveGame, bIsPlayerCharacter, bCopyObject, bLoadOID);
    return retVal;
  }

  public uint ReadStatsFromGff(CResGFF pRes, CResStruct pGffStructWithCreatureStats, CNWSCreatureAppearanceInfo pAppInfo, int bIsSaveGame, int bIsPlayerCharacter, int bCopyObject) {
    uint retVal = NWNXLibPINVOKE.CNWSCreatureStats_ReadStatsFromGff__SWIG_1(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pGffStructWithCreatureStats), CNWSCreatureAppearanceInfo.getCPtr(pAppInfo), bIsSaveGame, bIsPlayerCharacter, bCopyObject);
    return retVal;
  }

  public uint ReadStatsFromGff(CResGFF pRes, CResStruct pGffStructWithCreatureStats, CNWSCreatureAppearanceInfo pAppInfo, int bIsSaveGame, int bIsPlayerCharacter) {
    uint retVal = NWNXLibPINVOKE.CNWSCreatureStats_ReadStatsFromGff__SWIG_2(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pGffStructWithCreatureStats), CNWSCreatureAppearanceInfo.getCPtr(pAppInfo), bIsSaveGame, bIsPlayerCharacter);
    return retVal;
  }

  public uint ReadStatsFromGff(CResGFF pRes, CResStruct pGffStructWithCreatureStats, CNWSCreatureAppearanceInfo pAppInfo, int bIsSaveGame) {
    uint retVal = NWNXLibPINVOKE.CNWSCreatureStats_ReadStatsFromGff__SWIG_3(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pGffStructWithCreatureStats), CNWSCreatureAppearanceInfo.getCPtr(pAppInfo), bIsSaveGame);
    return retVal;
  }

  public uint ReadStatsFromGff(CResGFF pRes, CResStruct pGffStructWithCreatureStats, CNWSCreatureAppearanceInfo pAppInfo) {
    uint retVal = NWNXLibPINVOKE.CNWSCreatureStats_ReadStatsFromGff__SWIG_4(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pGffStructWithCreatureStats), CNWSCreatureAppearanceInfo.getCPtr(pAppInfo));
    return retVal;
  }

  public void ReadSpellsFromGff(CResGFF pRes, CResStruct pGffStructWithCreatureStats, int bDefaultUnsavedSpellsAsReadied) {
    NWNXLibPINVOKE.CNWSCreatureStats_ReadSpellsFromGff__SWIG_0(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pGffStructWithCreatureStats), bDefaultUnsavedSpellsAsReadied);
  }

  public void ReadSpellsFromGff(CResGFF pRes, CResStruct pGffStructWithCreatureStats) {
    NWNXLibPINVOKE.CNWSCreatureStats_ReadSpellsFromGff__SWIG_1(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pGffStructWithCreatureStats));
  }

  public void SaveStats(CResGFF pRes, CResStruct pStruct) {
    NWNXLibPINVOKE.CNWSCreatureStats_SaveStats(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pStruct));
  }

  public void SaveClassInfo(CResGFF pRes, CResStruct pStruct) {
    NWNXLibPINVOKE.CNWSCreatureStats_SaveClassInfo(swigCPtr, CResGFF.getCPtr(pRes), CResStruct.getCPtr(pStruct));
  }

  public uint ValidateLevelUp(CNWLevelStats pLevelUpStats, byte nDomain1, byte nDomain2, byte nSchool) {
    uint retVal = NWNXLibPINVOKE.CNWSCreatureStats_ValidateLevelUp(swigCPtr, CNWLevelStats.getCPtr(pLevelUpStats), nDomain1, nDomain2, nSchool);
    return retVal;
  }

  public int CanLevelUp() {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_CanLevelUp(swigCPtr);
    return retVal;
  }

  public void LevelUp(CNWLevelStats pLevelUpStats, byte nDomain1, byte nDomain2, byte nSchool, int bAddStatsToList) {
    NWNXLibPINVOKE.CNWSCreatureStats_LevelUp(swigCPtr, CNWLevelStats.getCPtr(pLevelUpStats), nDomain1, nDomain2, nSchool, bAddStatsToList);
  }

  public void LevelDown(CNWLevelStats pLevelUpStats) {
    NWNXLibPINVOKE.CNWSCreatureStats_LevelDown(swigCPtr, CNWLevelStats.getCPtr(pLevelUpStats));
  }

  public int LevelUpAutomatic(byte nClass, int bReadyAllSpells, uint nPackage) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_LevelUpAutomatic(swigCPtr, nClass, bReadyAllSpells, nPackage);
    return retVal;
  }

  public int CanChooseFeat(ushort nFeatID, byte nNumberNormalFeats, byte nNumberBonusFeats, CExoArrayListUInt16 pChosenFeats) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_CanChooseFeat(swigCPtr, nFeatID, nNumberNormalFeats, nNumberBonusFeats, CExoArrayListUInt16.getCPtr(pChosenFeats));
    return retVal;
  }

  public int FeatRequirementsMet(ushort nFeatID, CExoArrayListUInt16 pChosenFeats) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_FeatRequirementsMet(swigCPtr, nFeatID, CExoArrayListUInt16.getCPtr(pChosenFeats));
    return retVal;
  }

  public void SetNormalBonusFlags(ushort nFeatID, int* bNormalListFeat, int* bBonusListFeat) {
    NWNXLibPINVOKE.CNWSCreatureStats_SetNormalBonusFlags(swigCPtr, nFeatID, (global::System.IntPtr)bNormalListFeat, (global::System.IntPtr)bBonusListFeat);
  }

  public int FeatAcquired(ushort nFeat, CExoArrayListUInt16 pChosenFeats, int bCheckBonusFeats) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_FeatAcquired(swigCPtr, nFeat, CExoArrayListUInt16.getCPtr(pChosenFeats), bCheckBonusFeats);
    return retVal;
  }

  public int AutoMemorizeSpells(int bReadyAllSpells) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_AutoMemorizeSpells__SWIG_0(swigCPtr, bReadyAllSpells);
    return retVal;
  }

  public int AutoMemorizeSpells() {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_AutoMemorizeSpells__SWIG_1(swigCPtr);
    return retVal;
  }

  public int GetIsClassAvailable(byte nClass) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetIsClassAvailable(swigCPtr, nClass);
    return retVal;
  }

  public int GetMeetsPrestigeClassRequirements(CNWClass pClass) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetMeetsPrestigeClassRequirements(swigCPtr, CNWClass.getCPtr(pClass));
    return retVal;
  }

  public byte GetHitDie(byte nMultiClass, byte nDefaultClass) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetHitDie(swigCPtr, nMultiClass, nDefaultClass);
    return retVal;
  }

  public int GetIsDM() {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetIsDM(swigCPtr);
    return retVal;
  }

  public int GetIsPlayerDM() {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetIsPlayerDM(swigCPtr);
    return retVal;
  }

  public CExoString GetFullName() {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CNWSCreatureStats_GetFullName(swigCPtr), true);
    return ret;
  }

  public CExoString GetTag() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreatureStats_GetTag(swigCPtr);
    CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
    return ret;
  }

  public byte GetLevel(int bUseNegativeLevels) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetLevel__SWIG_0(swigCPtr, bUseNegativeLevels);
    return retVal;
  }

  public byte GetLevel() {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetLevel__SWIG_1(swigCPtr);
    return retVal;
  }

  public byte GetEffectiveCRForPotentialLevel() {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetEffectiveCRForPotentialLevel(swigCPtr);
    return retVal;
  }

  public byte GetPotentialLevel() {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetPotentialLevel(swigCPtr);
    return retVal;
  }

  public uint GetExpNeededForLevelUp() {
    uint retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetExpNeededForLevelUp(swigCPtr);
    return retVal;
  }

  public void SetTag(CExoString sTag) {
    NWNXLibPINVOKE.CNWSCreatureStats_SetTag(swigCPtr, CExoString.getCPtr(sTag));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetExperience(uint nValue, int bDoLevel) {
    NWNXLibPINVOKE.CNWSCreatureStats_SetExperience__SWIG_0(swigCPtr, nValue, bDoLevel);
  }

  public void SetExperience(uint nValue) {
    NWNXLibPINVOKE.CNWSCreatureStats_SetExperience__SWIG_1(swigCPtr, nValue);
  }

  public void AddExperience(uint nValue) {
    NWNXLibPINVOKE.CNWSCreatureStats_AddExperience(swigCPtr, nValue);
  }

  public CExoString GetClassString(byte nMultiClass) {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CNWSCreatureStats_GetClassString(swigCPtr, nMultiClass), true);
    return ret;
  }

  public byte GetClassLevel(byte nMultiClass, int bUseNegativeLevel, int bIncludeCasterMultiplier) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetClassLevel__SWIG_0(swigCPtr, nMultiClass, bUseNegativeLevel, bIncludeCasterMultiplier);
    return retVal;
  }

  public byte GetClassLevel(byte nMultiClass, int bUseNegativeLevel) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetClassLevel__SWIG_1(swigCPtr, nMultiClass, bUseNegativeLevel);
    return retVal;
  }

  public byte GetClassLevel(byte nMultiClass) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetClassLevel__SWIG_2(swigCPtr, nMultiClass);
    return retVal;
  }

  public byte GetClassNegativeLevels(byte nMultiClass) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetClassNegativeLevels(swigCPtr, nMultiClass);
    return retVal;
  }

  public byte GetClass(byte nMultiClass) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetClass(swigCPtr, nMultiClass);
    return retVal;
  }

  public CNWSCreatureStats_ClassInfo GetClassInfo(byte nMultiClass) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreatureStats_GetClassInfo(swigCPtr, nMultiClass);
    CNWSCreatureStats_ClassInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSCreatureStats_ClassInfo(cPtr, false);
    return ret;
  }

  public byte GetIsClass(byte nClass) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetIsClass(swigCPtr, nClass);
    return retVal;
  }

  public void SetClassLevel(byte nMultiClass, byte nValue) {
    NWNXLibPINVOKE.CNWSCreatureStats_SetClassLevel(swigCPtr, nMultiClass, nValue);
  }

  public void SetClassNegativeLevels(byte nMultiClass, byte nValue) {
    NWNXLibPINVOKE.CNWSCreatureStats_SetClassNegativeLevels(swigCPtr, nMultiClass, nValue);
  }

  public void SetClass(byte nMultiClass, byte nValue) {
    NWNXLibPINVOKE.CNWSCreatureStats_SetClass(swigCPtr, nMultiClass, nValue);
  }

  public int GetTotalNegativeLevels() {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetTotalNegativeLevels(swigCPtr);
    return retVal;
  }

  public int GetNumLevelsOfClass(byte nClass, int bEpic) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetNumLevelsOfClass__SWIG_0(swigCPtr, nClass, bEpic);
    return retVal;
  }

  public int GetNumLevelsOfClass(byte nClass) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetNumLevelsOfClass__SWIG_1(swigCPtr, nClass);
    return retVal;
  }

  public CExoString GetRaceString() {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CNWSCreatureStats_GetRaceString(swigCPtr), true);
    return ret;
  }

  public CResRef GetSmallPortrait() {
    CResRef ret = new CResRef(NWNXLibPINVOKE.CNWSCreatureStats_GetSmallPortrait(swigCPtr), true);
    return ret;
  }

  public CResRef GetLargePortrait() {
    CResRef ret = new CResRef(NWNXLibPINVOKE.CNWSCreatureStats_GetLargePortrait(swigCPtr), true);
    return ret;
  }

  public void SetMovementRate(int nValue) {
    NWNXLibPINVOKE.CNWSCreatureStats_SetMovementRate(swigCPtr, nValue);
  }

  public byte GetFortSavingThrow(int bExcludeEffectBonus) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetFortSavingThrow__SWIG_0(swigCPtr, bExcludeEffectBonus);
    return retVal;
  }

  public byte GetFortSavingThrow() {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetFortSavingThrow__SWIG_1(swigCPtr);
    return retVal;
  }

  public byte GetBaseFortSavingThrow() {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetBaseFortSavingThrow(swigCPtr);
    return retVal;
  }

  public byte GetWillSavingThrow(int bExcludeEffectBonus) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetWillSavingThrow__SWIG_0(swigCPtr, bExcludeEffectBonus);
    return retVal;
  }

  public byte GetWillSavingThrow() {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetWillSavingThrow__SWIG_1(swigCPtr);
    return retVal;
  }

  public byte GetBaseWillSavingThrow() {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetBaseWillSavingThrow(swigCPtr);
    return retVal;
  }

  public byte GetReflexSavingThrow(int bExcludeEffectBonus) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetReflexSavingThrow__SWIG_0(swigCPtr, bExcludeEffectBonus);
    return retVal;
  }

  public byte GetReflexSavingThrow() {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetReflexSavingThrow__SWIG_1(swigCPtr);
    return retVal;
  }

  public byte GetBaseReflexSavingThrow() {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetBaseReflexSavingThrow(swigCPtr);
    return retVal;
  }

  public byte GetAbilityMod(byte nAbility) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetAbilityMod(swigCPtr, nAbility);
    return retVal;
  }

  public byte GetPrimaryMod(byte nMultiClass) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetPrimaryMod(swigCPtr, nMultiClass);
    return retVal;
  }

  public byte GetSpellcastingMod(byte nMultiClass) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetSpellcastingMod(swigCPtr, nMultiClass);
    return retVal;
  }

  public byte GetSTRStat() {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetSTRStat(swigCPtr);
    return retVal;
  }

  public byte GetTotalSTRBonus() {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetTotalSTRBonus(swigCPtr);
    return retVal;
  }

  public byte GetDEXStat() {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetDEXStat(swigCPtr);
    return retVal;
  }

  public byte GetDEXMod(int bUseArmourPenalty) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetDEXMod__SWIG_0(swigCPtr, bUseArmourPenalty);
    return retVal;
  }

  public byte GetDEXMod() {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetDEXMod__SWIG_1(swigCPtr);
    return retVal;
  }

  public byte GetTotalDEXBonus() {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetTotalDEXBonus(swigCPtr);
    return retVal;
  }

  public byte GetCONStat() {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetCONStat(swigCPtr);
    return retVal;
  }

  public byte GetTotalCONBonus() {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetTotalCONBonus(swigCPtr);
    return retVal;
  }

  public byte GetINTStat() {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetINTStat(swigCPtr);
    return retVal;
  }

  public byte GetTotalINTBonus() {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetTotalINTBonus(swigCPtr);
    return retVal;
  }

  public byte GetWISStat() {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetWISStat(swigCPtr);
    return retVal;
  }

  public byte GetTotalWISBonus() {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetTotalWISBonus(swigCPtr);
    return retVal;
  }

  public byte GetCHAStat() {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetCHAStat(swigCPtr);
    return retVal;
  }

  public byte GetTotalCHABonus() {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetTotalCHABonus(swigCPtr);
    return retVal;
  }

  public sbyte GetClassesAbilityAdjust(int ability) {
    sbyte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetClassesAbilityAdjust(swigCPtr, ability);
    return retVal;
  }

  public void SetSTRBase(byte nValue) {
    NWNXLibPINVOKE.CNWSCreatureStats_SetSTRBase(swigCPtr, nValue);
  }

  public void SetDEXBase(byte nValue) {
    NWNXLibPINVOKE.CNWSCreatureStats_SetDEXBase(swigCPtr, nValue);
  }

  public void SetCONBase(byte nValue, int bRecalculateHP) {
    NWNXLibPINVOKE.CNWSCreatureStats_SetCONBase__SWIG_0(swigCPtr, nValue, bRecalculateHP);
  }

  public void SetCONBase(byte nValue) {
    NWNXLibPINVOKE.CNWSCreatureStats_SetCONBase__SWIG_1(swigCPtr, nValue);
  }

  public void SetINTBase(byte nValue) {
    NWNXLibPINVOKE.CNWSCreatureStats_SetINTBase(swigCPtr, nValue);
  }

  public void SetWISBase(byte nValue) {
    NWNXLibPINVOKE.CNWSCreatureStats_SetWISBase(swigCPtr, nValue);
  }

  public void SetCHABase(byte nValue) {
    NWNXLibPINVOKE.CNWSCreatureStats_SetCHABase(swigCPtr, nValue);
  }

  public byte CalcStatModifier(byte nValue) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_CalcStatModifier(swigCPtr, nValue);
    return retVal;
  }

  public void GetAbilityInfo(byte nAbilityId, byte* pStat, byte* pMod, byte* pBase, byte* pTotalBonus) {
    NWNXLibPINVOKE.CNWSCreatureStats_GetAbilityInfo__SWIG_0(swigCPtr, nAbilityId, pStat, pMod, pBase, pTotalBonus);
  }

  public void GetAbilityInfo(byte nAbilityId, byte* pStat, byte* pMod, byte* pBase) {
    NWNXLibPINVOKE.CNWSCreatureStats_GetAbilityInfo__SWIG_1(swigCPtr, nAbilityId, pStat, pMod, pBase);
  }

  public void GetAbilityInfo(byte nAbilityId, byte* pStat, byte* pMod) {
    NWNXLibPINVOKE.CNWSCreatureStats_GetAbilityInfo__SWIG_2(swigCPtr, nAbilityId, pStat, pMod);
  }

  public void GetAbilityInfo(byte nAbilityId, byte* pStat) {
    NWNXLibPINVOKE.CNWSCreatureStats_GetAbilityInfo__SWIG_3(swigCPtr, nAbilityId, pStat);
  }

  public byte GetSkillRank(byte nSkill, CNWSObject pVersus, int bBaseOnly) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetSkillRank__SWIG_0(swigCPtr, nSkill, CNWSObject.getCPtr(pVersus), bBaseOnly);
    return retVal;
  }

  public byte GetSkillRank(byte nSkill, CNWSObject pVersus) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetSkillRank__SWIG_1(swigCPtr, nSkill, CNWSObject.getCPtr(pVersus));
    return retVal;
  }

  public int GetCanUseSkill(byte nSkill) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetCanUseSkill(swigCPtr, nSkill);
    return retVal;
  }

  public int GetCanUseSkillAfterLevelUp(ushort nSkill, CNWLevelStats pLevelUpStats) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetCanUseSkillAfterLevelUp(swigCPtr, nSkill, CNWLevelStats.getCPtr(pLevelUpStats));
    return retVal;
  }

  public void SetSkillRank(byte nSkill, byte nRank) {
    NWNXLibPINVOKE.CNWSCreatureStats_SetSkillRank(swigCPtr, nSkill, nRank);
  }

  public void AddFeat(ushort nFeat) {
    NWNXLibPINVOKE.CNWSCreatureStats_AddFeat(swigCPtr, nFeat);
  }

  public int HasFeat(ushort nFeat) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_HasFeat(swigCPtr, nFeat);
    return retVal;
  }

  public byte GetFeatRemainingUses(ushort nFeat) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetFeatRemainingUses(swigCPtr, nFeat);
    return retVal;
  }

  public byte GetFeatTotalUses(ushort nFeat) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetFeatTotalUses(swigCPtr, nFeat);
    return retVal;
  }

  public void SetFeatRemainingUses(ushort nFeat, byte nRemainingUses) {
    NWNXLibPINVOKE.CNWSCreatureStats_SetFeatRemainingUses(swigCPtr, nFeat, nRemainingUses);
  }

  public void ResetFeatRemainingUses() {
    NWNXLibPINVOKE.CNWSCreatureStats_ResetFeatRemainingUses(swigCPtr);
  }

  public void DecrementFeatRemainingUses(ushort nFeat) {
    NWNXLibPINVOKE.CNWSCreatureStats_DecrementFeatRemainingUses(swigCPtr, nFeat);
  }

  public void IncrementFeatRemainingUses(ushort nFeat) {
    NWNXLibPINVOKE.CNWSCreatureStats_IncrementFeatRemainingUses(swigCPtr, nFeat);
  }

  public ushort GetFeat(ushort nIndex) {
    ushort retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetFeat(swigCPtr, nIndex);
    return retVal;
  }

  public ushort GetHighestLevelOfFeat(ushort nFeat) {
    ushort retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetHighestLevelOfFeat(swigCPtr, nFeat);
    return retVal;
  }

  public int FeatRequirementsMetAfterLevelUp(ushort nFeatID, CNWLevelStats pLevelUpStats, byte nSchool) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_FeatRequirementsMetAfterLevelUp(swigCPtr, nFeatID, CNWLevelStats.getCPtr(pLevelUpStats), nSchool);
    return retVal;
  }

  public byte GetFeatSourceClass(ushort nFeat) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetFeatSourceClass(swigCPtr, nFeat);
    return retVal;
  }

  public static void GetStatBonusesFromFeats(CExoArrayListUInt16 m_pFeats, int* pMods, int bSubtractBonuses) {
    NWNXLibPINVOKE.CNWSCreatureStats_GetStatBonusesFromFeats__SWIG_0(CExoArrayListUInt16.getCPtr(m_pFeats), pMods, bSubtractBonuses);
  }

  public static void GetStatBonusesFromFeats(CExoArrayListUInt16 m_pFeats, int* pMods) {
    NWNXLibPINVOKE.CNWSCreatureStats_GetStatBonusesFromFeats__SWIG_1(CExoArrayListUInt16.getCPtr(m_pFeats), pMods);
  }

  public void ComputeFeatBonuses(CExoArrayListUInt16 m_pFeats, int bSubtractBonuses) {
    NWNXLibPINVOKE.CNWSCreatureStats_ComputeFeatBonuses__SWIG_0(swigCPtr, CExoArrayListUInt16.getCPtr(m_pFeats), bSubtractBonuses);
  }

  public void ComputeFeatBonuses(CExoArrayListUInt16 m_pFeats) {
    NWNXLibPINVOKE.CNWSCreatureStats_ComputeFeatBonuses__SWIG_1(swigCPtr, CExoArrayListUInt16.getCPtr(m_pFeats));
  }

  public void RemoveFeat(ushort nFeat) {
    NWNXLibPINVOKE.CNWSCreatureStats_RemoveFeat(swigCPtr, nFeat);
  }

  public void ClearFeats() {
    NWNXLibPINVOKE.CNWSCreatureStats_ClearFeats(swigCPtr);
  }

  public ushort GetBonusFeat(ushort nIndex) {
    ushort retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetBonusFeat(swigCPtr, nIndex);
    return retVal;
  }

  public void CalcLevelUpNumberFeats(byte nLeveledUpLevel, byte nLeveledUpClass, byte* nNumberNormalFeats, byte* nNumberBonusFeats) {
    NWNXLibPINVOKE.CNWSCreatureStats_CalcLevelUpNumberFeats(swigCPtr, nLeveledUpLevel, nLeveledUpClass, (global::System.IntPtr)nNumberNormalFeats, (global::System.IntPtr)nNumberBonusFeats);
  }

  public int GetCreatureHasTalent(int nType, int nID, byte nMetaType) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetCreatureHasTalent__SWIG_0(swigCPtr, nType, nID, nMetaType);
    return retVal;
  }

  public int GetCreatureHasTalent(int nType, int nID) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetCreatureHasTalent__SWIG_1(swigCPtr, nType, nID);
    return retVal;
  }

  public int GetCreatureTalentRandom(int nCategory, int nMaxCR, int* nType, int* nID, byte* nMultiClass, uint* oidItem, int* nItemPropertyIndex, byte* nCasterLevel, byte* nMetaType) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetCreatureTalentRandom(swigCPtr, nCategory, nMaxCR, (global::System.IntPtr)nType, (global::System.IntPtr)nID, (global::System.IntPtr)nMultiClass, (global::System.IntPtr)oidItem, (global::System.IntPtr)nItemPropertyIndex, (global::System.IntPtr)nCasterLevel, (global::System.IntPtr)nMetaType);
    return retVal;
  }

  public int GetCreatureTalentRandomSpell(int nCategory, int nMaxCR, int* nType, int* nID, byte* nMultiClass, byte* nMetaType) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetCreatureTalentRandomSpell(swigCPtr, nCategory, nMaxCR, (global::System.IntPtr)nType, (global::System.IntPtr)nID, (global::System.IntPtr)nMultiClass, (global::System.IntPtr)nMetaType);
    return retVal;
  }

  public int GetCreatureTalentRandomSpellFromItem(int nCategory, int nMaxCR, int* nType, int* nID, byte* nMultiClass, uint* oidItem, int* nItemPropertyIndex) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetCreatureTalentRandomSpellFromItem(swigCPtr, nCategory, nMaxCR, (global::System.IntPtr)nType, (global::System.IntPtr)nID, (global::System.IntPtr)nMultiClass, (global::System.IntPtr)oidItem, (global::System.IntPtr)nItemPropertyIndex);
    return retVal;
  }

  public int GetCreatureTalentRandomSpellLikeAbility(int nCategory, int nMaxCR, int* nType, int* nID, byte* nMultiClass, byte* nCasterLevel) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetCreatureTalentRandomSpellLikeAbility(swigCPtr, nCategory, nMaxCR, (global::System.IntPtr)nType, (global::System.IntPtr)nID, (global::System.IntPtr)nMultiClass, (global::System.IntPtr)nCasterLevel);
    return retVal;
  }

  public int GetCreatureTalentRandomFeat(int nCategory, int nMaxCR, int* nType, int* nID, byte* nMultiClass) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetCreatureTalentRandomFeat(swigCPtr, nCategory, nMaxCR, (global::System.IntPtr)nType, (global::System.IntPtr)nID, (global::System.IntPtr)nMultiClass);
    return retVal;
  }

  public int GetCreatureTalentRandomSkill(int nCategory, int nMaxCR, int* nType, int* nID, byte* nMultiClass) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetCreatureTalentRandomSkill(swigCPtr, nCategory, nMaxCR, (global::System.IntPtr)nType, (global::System.IntPtr)nID, (global::System.IntPtr)nMultiClass);
    return retVal;
  }

  public int GetCreatureTalentRandomKnownSpell(int nCategory, int nMaxCR, int* nType, int* nID, byte* nMultiClass, int nClass) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetCreatureTalentRandomKnownSpell(swigCPtr, nCategory, nMaxCR, (global::System.IntPtr)nType, (global::System.IntPtr)nID, (global::System.IntPtr)nMultiClass, nClass);
    return retVal;
  }

  public int GetCreatureTalentRandomMemorisedSpell(int nCategory, int nMaxCR, int* nType, int* nID, byte* nMultiClass, int nClass, byte* nMetaType) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetCreatureTalentRandomMemorisedSpell(swigCPtr, nCategory, nMaxCR, (global::System.IntPtr)nType, (global::System.IntPtr)nID, (global::System.IntPtr)nMultiClass, nClass, (global::System.IntPtr)nMetaType);
    return retVal;
  }

  public int GetCanUseRelatedCategory(int nTalentCategory, int nDesiredCategory) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetCanUseRelatedCategory(swigCPtr, nTalentCategory, nDesiredCategory);
    return retVal;
  }

  public short GetArmorClassVersus(CNWSCreature pCreature, int bVsTouchAttack) {
    short retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetArmorClassVersus__SWIG_0(swigCPtr, CNWSCreature.getCPtr(pCreature), bVsTouchAttack);
    return retVal;
  }

  public short GetArmorClassVersus(CNWSCreature pCreature) {
    short retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetArmorClassVersus__SWIG_1(swigCPtr, CNWSCreature.getCPtr(pCreature));
    return retVal;
  }

  public short GetArmorClassVersus() {
    short retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetArmorClassVersus__SWIG_2(swigCPtr);
    return retVal;
  }

  public byte GetACNaturalBase(int bVsTouchAttack) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetACNaturalBase__SWIG_0(swigCPtr, bVsTouchAttack);
    return retVal;
  }

  public byte GetACNaturalBase() {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetACNaturalBase__SWIG_1(swigCPtr);
    return retVal;
  }

  public byte GetTotalACSkillMod() {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetTotalACSkillMod(swigCPtr);
    return retVal;
  }

  public byte GetSimpleAlignmentGoodEvil() {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetSimpleAlignmentGoodEvil(swigCPtr);
    return retVal;
  }

  public byte GetSimpleAlignmentLawChaos() {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetSimpleAlignmentLawChaos(swigCPtr);
    return retVal;
  }

  public CExoString GetAlignmentString() {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CNWSCreatureStats_GetAlignmentString(swigCPtr), true);
    return ret;
  }

  public int GetIsEpitomeOfAlignment() {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetIsEpitomeOfAlignment(swigCPtr);
    return retVal;
  }

  public int GetHasLostClassAbilities(byte nMultiClass) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetHasLostClassAbilities(swigCPtr, nMultiClass);
    return retVal;
  }

  public int ModifyAlignment(short nGoodEvilBonus, short nLawChaosBonus) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_ModifyAlignment(swigCPtr, nGoodEvilBonus, nLawChaosBonus);
    return retVal;
  }

  public void AdjustAlignment(byte nAlignment, short nShift, uint oidInitiator) {
    NWNXLibPINVOKE.CNWSCreatureStats_AdjustAlignment__SWIG_0(swigCPtr, nAlignment, nShift, oidInitiator);
  }

  public void AdjustAlignment(byte nAlignment, short nShift) {
    NWNXLibPINVOKE.CNWSCreatureStats_AdjustAlignment__SWIG_1(swigCPtr, nAlignment, nShift);
  }

  public void SetHasLostClassAbilities(byte nMultiClass, int bLostAbilities) {
    NWNXLibPINVOKE.CNWSCreatureStats_SetHasLostClassAbilities(swigCPtr, nMultiClass, bLostAbilities);
  }

  public int GetEffectImmunity(byte nType, CNWSCreature pVersus, int bConsiderFeats) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetEffectImmunity__SWIG_0(swigCPtr, nType, CNWSCreature.getCPtr(pVersus), bConsiderFeats);
    return retVal;
  }

  public int GetEffectImmunity(byte nType, CNWSCreature pVersus) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetEffectImmunity__SWIG_1(swigCPtr, nType, CNWSCreature.getCPtr(pVersus));
    return retVal;
  }

  public int GetUseMonkAttackTables(int bForceUnarmed) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetUseMonkAttackTables(swigCPtr, bForceUnarmed);
    return retVal;
  }

  public int GetUnarmedDamageRoll(CNWSObject pTarget) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetUnarmedDamageRoll(swigCPtr, CNWSObject.getCPtr(pTarget));
    return retVal;
  }

  public byte GetUnarmedDamageDice() {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetUnarmedDamageDice(swigCPtr);
    return retVal;
  }

  public byte GetUnarmedDamageDie() {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetUnarmedDamageDie(swigCPtr);
    return retVal;
  }

  public byte GetCreatureDamageDice(byte nIndex) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetCreatureDamageDice(swigCPtr, nIndex);
    return retVal;
  }

  public byte GetCreatureDamageDie(byte nIndex) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetCreatureDamageDie(swigCPtr, nIndex);
    return retVal;
  }

  public int GetWeaponFinesse(CNWSItem pItem) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetWeaponFinesse(swigCPtr, CNWSItem.getCPtr(pItem));
    return retVal;
  }

  public int GetWeaponFocus(CNWSItem pItem) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetWeaponFocus(swigCPtr, CNWSItem.getCPtr(pItem));
    return retVal;
  }

  public int GetEpicWeaponFocus(CNWSItem pItem) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetEpicWeaponFocus(swigCPtr, CNWSItem.getCPtr(pItem));
    return retVal;
  }

  public int GetWeaponSpecialization(CNWSItem pItem) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetWeaponSpecialization(swigCPtr, CNWSItem.getCPtr(pItem));
    return retVal;
  }

  public int GetEpicWeaponSpecialization(CNWSItem pItem) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetEpicWeaponSpecialization(swigCPtr, CNWSItem.getCPtr(pItem));
    return retVal;
  }

  public int GetWeaponImprovedCritical(CNWSItem pItem) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetWeaponImprovedCritical(swigCPtr, CNWSItem.getCPtr(pItem));
    return retVal;
  }

  public int GetEpicWeaponOverwhelmingCritical(CNWSItem pItem) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetEpicWeaponOverwhelmingCritical(swigCPtr, CNWSItem.getCPtr(pItem));
    return retVal;
  }

  public int GetEpicWeaponDevastatingCritical(CNWSItem pItem) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetEpicWeaponDevastatingCritical(swigCPtr, CNWSItem.getCPtr(pItem));
    return retVal;
  }

  public int GetFavoredEnemyBonus(CNWSCreature pTargetCreature) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetFavoredEnemyBonus(swigCPtr, CNWSCreature.getCPtr(pTargetCreature));
    return retVal;
  }

  public void UpdateCombatInformation() {
    NWNXLibPINVOKE.CNWSCreatureStats_UpdateCombatInformation(swigCPtr);
  }

  public int GetBaseAttackBonus(int bExcludeEpic) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetBaseAttackBonus__SWIG_0(swigCPtr, bExcludeEpic);
    return retVal;
  }

  public int GetBaseAttackBonus() {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetBaseAttackBonus__SWIG_1(swigCPtr);
    return retVal;
  }

  public int GetMeleeAttackBonus(int bOffHand, int bIncludeBase, int bTouchAttack) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetMeleeAttackBonus__SWIG_0(swigCPtr, bOffHand, bIncludeBase, bTouchAttack);
    return retVal;
  }

  public int GetMeleeAttackBonus(int bOffHand, int bIncludeBase) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetMeleeAttackBonus__SWIG_1(swigCPtr, bOffHand, bIncludeBase);
    return retVal;
  }

  public int GetMeleeAttackBonus(int bOffHand) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetMeleeAttackBonus__SWIG_2(swigCPtr, bOffHand);
    return retVal;
  }

  public int GetMeleeAttackBonus() {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetMeleeAttackBonus__SWIG_3(swigCPtr);
    return retVal;
  }

  public int GetMeleeDamageBonus(int bOffHand, byte nCreatureWeapon) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetMeleeDamageBonus__SWIG_0(swigCPtr, bOffHand, nCreatureWeapon);
    return retVal;
  }

  public int GetMeleeDamageBonus(int bOffHand) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetMeleeDamageBonus__SWIG_1(swigCPtr, bOffHand);
    return retVal;
  }

  public int GetMeleeDamageBonus() {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetMeleeDamageBonus__SWIG_2(swigCPtr);
    return retVal;
  }

  public int GetRangedAttackBonus(int bIncludeBase, int bTouchAttack) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetRangedAttackBonus__SWIG_0(swigCPtr, bIncludeBase, bTouchAttack);
    return retVal;
  }

  public int GetRangedAttackBonus(int bIncludeBase) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetRangedAttackBonus__SWIG_1(swigCPtr, bIncludeBase);
    return retVal;
  }

  public int GetRangedAttackBonus() {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetRangedAttackBonus__SWIG_2(swigCPtr);
    return retVal;
  }

  public int GetRangedDamageBonus() {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetRangedDamageBonus(swigCPtr);
    return retVal;
  }

  public int GetAttackModifierVersus(CNWSCreature pTargetCreature) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetAttackModifierVersus__SWIG_0(swigCPtr, CNWSCreature.getCPtr(pTargetCreature));
    return retVal;
  }

  public int GetAttackModifierVersus() {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetAttackModifierVersus__SWIG_1(swigCPtr);
    return retVal;
  }

  public int GetDamageBonus(CNWSCreature pCreature, int bOffHand) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetDamageBonus__SWIG_0(swigCPtr, CNWSCreature.getCPtr(pCreature), bOffHand);
    return retVal;
  }

  public int GetDamageBonus(CNWSCreature pCreature) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetDamageBonus__SWIG_1(swigCPtr, CNWSCreature.getCPtr(pCreature));
    return retVal;
  }

  public int GetDamageBonus() {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetDamageBonus__SWIG_2(swigCPtr);
    return retVal;
  }

  public int GetDamageRoll(CNWSObject pTarget, int bOffHand, int bCritical, int bSneakAttack, int bDeathAttack, int bForceMax) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetDamageRoll__SWIG_0(swigCPtr, CNWSObject.getCPtr(pTarget), bOffHand, bCritical, bSneakAttack, bDeathAttack, bForceMax);
    return retVal;
  }

  public int GetDamageRoll(CNWSObject pTarget, int bOffHand, int bCritical, int bSneakAttack, int bDeathAttack) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetDamageRoll__SWIG_1(swigCPtr, CNWSObject.getCPtr(pTarget), bOffHand, bCritical, bSneakAttack, bDeathAttack);
    return retVal;
  }

  public int GetCriticalHitRoll(int bOffHand) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetCriticalHitRoll__SWIG_0(swigCPtr, bOffHand);
    return retVal;
  }

  public int GetCriticalHitRoll() {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetCriticalHitRoll__SWIG_1(swigCPtr);
    return retVal;
  }

  public int GetCriticalHitMultiplier(int bOffHand) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetCriticalHitMultiplier__SWIG_0(swigCPtr, bOffHand);
    return retVal;
  }

  public int GetCriticalHitMultiplier() {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetCriticalHitMultiplier__SWIG_1(swigCPtr);
    return retVal;
  }

  public byte GetAttacksPerRound() {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetAttacksPerRound(swigCPtr);
    return retVal;
  }

  public int ResolveSpecialAttackAttackBonus(CNWSCreature pTarget) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_ResolveSpecialAttackAttackBonus__SWIG_0(swigCPtr, CNWSCreature.getCPtr(pTarget));
    return retVal;
  }

  public int ResolveSpecialAttackAttackBonus() {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_ResolveSpecialAttackAttackBonus__SWIG_1(swigCPtr);
    return retVal;
  }

  public int ResolveSpecialAttackDamageBonus(CNWSCreature pTarget) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_ResolveSpecialAttackDamageBonus__SWIG_0(swigCPtr, CNWSCreature.getCPtr(pTarget));
    return retVal;
  }

  public int ResolveSpecialAttackDamageBonus() {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_ResolveSpecialAttackDamageBonus__SWIG_1(swigCPtr);
    return retVal;
  }

  public ushort GetCasterLevel(byte nMultiClass) {
    ushort retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetCasterLevel(swigCPtr, nMultiClass);
    return retVal;
  }

  public byte GetSpellFailure(byte nSpellSchool) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetSpellFailure(swigCPtr, nSpellSchool);
    return retVal;
  }

  public byte GetSpellResistance() {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetSpellResistance(swigCPtr);
    return retVal;
  }

  public byte GetSpellsPerDayLeft(byte nMultiClass, byte nSpellLevel) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetSpellsPerDayLeft(swigCPtr, nMultiClass, nSpellLevel);
    return retVal;
  }

  public byte GetSpellGainWithBonus(byte nMultiClass, byte nSpellLevel) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetSpellGainWithBonus(swigCPtr, nMultiClass, nSpellLevel);
    return retVal;
  }

  public byte GetSpellGainWithBonusAfterLevelUp(byte nMultiClass, byte nSpellLevel, CNWLevelStats pLevelUpStats, byte nSchool, int bNewClass) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetSpellGainWithBonusAfterLevelUp__SWIG_0(swigCPtr, nMultiClass, nSpellLevel, CNWLevelStats.getCPtr(pLevelUpStats), nSchool, bNewClass);
    return retVal;
  }

  public byte GetSpellGainWithBonusAfterLevelUp(byte nMultiClass, byte nSpellLevel, CNWLevelStats pLevelUpStats, byte nSchool) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetSpellGainWithBonusAfterLevelUp__SWIG_1(swigCPtr, nMultiClass, nSpellLevel, CNWLevelStats.getCPtr(pLevelUpStats), nSchool);
    return retVal;
  }

  public int ConfirmDomainSpell(byte nMultiClass, byte nSpellLevel, uint nSpellID) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_ConfirmDomainSpell(swigCPtr, nMultiClass, nSpellLevel, nSpellID);
    return retVal;
  }

  public int GetSpellMinAbilityMet(byte nMultiClass, byte nSpellLevel) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetSpellMinAbilityMet(swigCPtr, nMultiClass, nSpellLevel);
    return retVal;
  }

  public int GetMetamagicPrerequisitesMet(byte nMetaType) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetMetamagicPrerequisitesMet(swigCPtr, nMetaType);
    return retVal;
  }

  public ushort GetNumberKnownSpells(byte nMultiClass, byte nSpellLevel) {
    ushort retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetNumberKnownSpells(swigCPtr, nMultiClass, nSpellLevel);
    return retVal;
  }

  public uint GetHighestLevelKnown() {
    uint retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetHighestLevelKnown(swigCPtr);
    return retVal;
  }

  public byte GetNumberMemorizedSpellSlots(byte nMultiClass, byte nSpellLevel) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetNumberMemorizedSpellSlots(swigCPtr, nMultiClass, nSpellLevel);
    return retVal;
  }

  public uint GetKnownSpell(byte nMultiClass, byte nSpellLevel, byte nSpellListIndex) {
    uint retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetKnownSpell(swigCPtr, nMultiClass, nSpellLevel, nSpellListIndex);
    return retVal;
  }

  public uint GetMemorizedSpellInSlot(byte nMultiClass, byte nSpellLevel, byte nSpellSlot) {
    uint retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetMemorizedSpellInSlot(swigCPtr, nMultiClass, nSpellLevel, nSpellSlot);
    return retVal;
  }

  public int GetIsDomainSpell(byte nMultiClass, byte nSpellLevel, byte nSpellSlot) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetIsDomainSpell(swigCPtr, nMultiClass, nSpellLevel, nSpellSlot);
    return retVal;
  }

  public byte ComputeNumberKnownSpellsLeft(byte nMultiClass, byte nSpellLevel) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_ComputeNumberKnownSpellsLeft(swigCPtr, nMultiClass, nSpellLevel);
    return retVal;
  }

  public byte GetMemorizedSpellInSlotReady(byte nMultiClass, byte nSpellLevel, byte nSpellSlot) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetMemorizedSpellInSlotReady(swigCPtr, nMultiClass, nSpellLevel, nSpellSlot);
    return retVal;
  }

  public void SetMemorizedSpellInSlotReady(byte nMultiClass, byte nSpellLevel, byte nSpellSlot, int bReady) {
    NWNXLibPINVOKE.CNWSCreatureStats_SetMemorizedSpellInSlotReady(swigCPtr, nMultiClass, nSpellLevel, nSpellSlot, bReady);
  }

  public byte GetMemorizedSpellInSlotMetaType(byte nMultiClass, byte nSpellLevel, byte nSpellSlot) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetMemorizedSpellInSlotMetaType(swigCPtr, nMultiClass, nSpellLevel, nSpellSlot);
    return retVal;
  }

  public int GetHasSilencedSpell(uint nSpellID) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetHasSilencedSpell(swigCPtr, nSpellID);
    return retVal;
  }

  public int GetHasStilledSpell(uint nSpellID) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetHasStilledSpell(swigCPtr, nSpellID);
    return retVal;
  }

  public byte GetSpellUsesLeft(uint nSpellID, byte nMultiClass, byte nDomainLevel, byte nMetaType) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetSpellUsesLeft(swigCPtr, nSpellID, nMultiClass, nDomainLevel, nMetaType);
    return retVal;
  }

  public byte GetMemorizedSpellReadyCount(uint nSpellID) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetMemorizedSpellReadyCount__SWIG_0(swigCPtr, nSpellID);
    return retVal;
  }

  public byte GetMemorizedSpellReadyCount(byte nMultiClass, uint nSpellID, byte nMetaType) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetMemorizedSpellReadyCount__SWIG_1(swigCPtr, nMultiClass, nSpellID, nMetaType);
    return retVal;
  }

  public byte GetMemorizedSpellReadyCount(byte nMultiClass, uint nSpellID) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetMemorizedSpellReadyCount__SWIG_2(swigCPtr, nMultiClass, nSpellID);
    return retVal;
  }

  public byte GetMemorizedSpellReadyCount(byte nMultiClass, uint nSpellID, byte* nMinSpellLevel, byte* nMinSpellSlot) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetMemorizedSpellReadyCount__SWIG_3(swigCPtr, nMultiClass, nSpellID, nMinSpellLevel, nMinSpellSlot);
    return retVal;
  }

  public byte GetSchool(byte nMultiClass) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetSchool(swigCPtr, nMultiClass);
    return retVal;
  }

  public byte GetDomain1(byte nMultiClass) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetDomain1(swigCPtr, nMultiClass);
    return retVal;
  }

  public byte GetDomain2(byte nMultiClass) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetDomain2(swigCPtr, nMultiClass);
    return retVal;
  }

  public uint GetNumberOfBonusSpells(byte nMultiClass, byte nSpellLevel) {
    uint retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetNumberOfBonusSpells(swigCPtr, nMultiClass, nSpellLevel);
    return retVal;
  }

  public void ModifyNumberBonusSpells(byte nMultiClass, byte nSpellLevel, int nDelta) {
    NWNXLibPINVOKE.CNWSCreatureStats_ModifyNumberBonusSpells(swigCPtr, nMultiClass, nSpellLevel, nDelta);
  }

  public void SetArcaneSpellFailure(byte nValue) {
    NWNXLibPINVOKE.CNWSCreatureStats_SetArcaneSpellFailure(swigCPtr, nValue);
  }

  public void SetSpellFailure(byte nSpellSchool, byte nValue) {
    NWNXLibPINVOKE.CNWSCreatureStats_SetSpellFailure(swigCPtr, nSpellSchool, nValue);
  }

  public void SetSpellResistance(byte nValue) {
    NWNXLibPINVOKE.CNWSCreatureStats_SetSpellResistance(swigCPtr, nValue);
  }

  public void SetSpellResistancePenalty(byte nValue) {
    NWNXLibPINVOKE.CNWSCreatureStats_SetSpellResistancePenalty(swigCPtr, nValue);
  }

  public void DecrementSpellsPerDayLeft(byte nMultiClass, byte nSpellLevel) {
    NWNXLibPINVOKE.CNWSCreatureStats_DecrementSpellsPerDayLeft(swigCPtr, nMultiClass, nSpellLevel);
  }

  public void IncrementSpellsPerDayLeft(byte nMultiClass, byte nSpellLevel) {
    NWNXLibPINVOKE.CNWSCreatureStats_IncrementSpellsPerDayLeft(swigCPtr, nMultiClass, nSpellLevel);
  }

  public void ResetSpellsPerDayLeft(byte nMultiClass, byte nSpellLevel) {
    NWNXLibPINVOKE.CNWSCreatureStats_ResetSpellsPerDayLeft(swigCPtr, nMultiClass, nSpellLevel);
  }

  public void AdjustSpellUsesPerDay() {
    NWNXLibPINVOKE.CNWSCreatureStats_AdjustSpellUsesPerDay(swigCPtr);
  }

  public void UpdateNumberMemorizedSpellSlots() {
    NWNXLibPINVOKE.CNWSCreatureStats_UpdateNumberMemorizedSpellSlots(swigCPtr);
  }

  public int SetMemorizedSpellSlot(byte nMultiClass, byte nSpellSlot, uint nSpellID, byte nDomainLevel, byte nMetaType, int bFromClient) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_SetMemorizedSpellSlot__SWIG_0(swigCPtr, nMultiClass, nSpellSlot, nSpellID, nDomainLevel, nMetaType, bFromClient);
    return retVal;
  }

  public int SetMemorizedSpellSlot(byte nMultiClass, byte nSpellSlot, uint nSpellID, byte nDomainLevel, byte nMetaType) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_SetMemorizedSpellSlot__SWIG_1(swigCPtr, nMultiClass, nSpellSlot, nSpellID, nDomainLevel, nMetaType);
    return retVal;
  }

  public void SetNumberMemorizedSpellSlots(byte nMultiClass, byte nSpellLevel, byte nNumSlots) {
    NWNXLibPINVOKE.CNWSCreatureStats_SetNumberMemorizedSpellSlots(swigCPtr, nMultiClass, nSpellLevel, nNumSlots);
  }

  public void ClearMemorizedSpellSlot(byte nMultiClass, byte nSpellLevel, byte nSpellSlot) {
    NWNXLibPINVOKE.CNWSCreatureStats_ClearMemorizedSpellSlot(swigCPtr, nMultiClass, nSpellLevel, nSpellSlot);
  }

  public void AddKnownSpell(byte nMultiClass, uint nSpellID) {
    NWNXLibPINVOKE.CNWSCreatureStats_AddKnownSpell(swigCPtr, nMultiClass, nSpellID);
  }

  public void RemoveKnownSpell(byte nMultiClass, uint nSpellID) {
    NWNXLibPINVOKE.CNWSCreatureStats_RemoveKnownSpell(swigCPtr, nMultiClass, nSpellID);
  }

  public byte GetSpellsOfLevelReady(byte nMultiClass, byte nSpellLevel) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetSpellsOfLevelReady(swigCPtr, nMultiClass, nSpellLevel);
    return retVal;
  }

  public void ReadySpellLevel(byte nSpellLevel) {
    NWNXLibPINVOKE.CNWSCreatureStats_ReadySpellLevel(swigCPtr, nSpellLevel);
  }

  public int UnReadySpell(uint nSpellID, byte nMultiClass, byte nDomainLevel, byte nMetaType) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_UnReadySpell(swigCPtr, nSpellID, nMultiClass, nDomainLevel, nMetaType);
    return retVal;
  }

  public void SetSchool(byte nMultiClass, byte nSchool) {
    NWNXLibPINVOKE.CNWSCreatureStats_SetSchool(swigCPtr, nMultiClass, nSchool);
  }

  public void SetDomain1(byte nMultiClass, byte nDomain) {
    NWNXLibPINVOKE.CNWSCreatureStats_SetDomain1(swigCPtr, nMultiClass, nDomain);
  }

  public void SetDomain2(byte nMultiClass, byte nDomain) {
    NWNXLibPINVOKE.CNWSCreatureStats_SetDomain2(swigCPtr, nMultiClass, nDomain);
  }

  public void AddSpellLikeAbilityToList(uint nSpellId, int bReadied, byte nCasterLevel) {
    NWNXLibPINVOKE.CNWSCreatureStats_AddSpellLikeAbilityToList(swigCPtr, nSpellId, bReadied, nCasterLevel);
  }

  public int SetSpellLikeAbilityReady(uint nSpellId, int bReadied, byte nCasterLevel) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_SetSpellLikeAbilityReady__SWIG_0(swigCPtr, nSpellId, bReadied, nCasterLevel);
    return retVal;
  }

  public int SetSpellLikeAbilityReady(uint nSpellId, int bReadied) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_SetSpellLikeAbilityReady__SWIG_1(swigCPtr, nSpellId, bReadied);
    return retVal;
  }

  public void ResetSpellLikeAbilities() {
    NWNXLibPINVOKE.CNWSCreatureStats_ResetSpellLikeAbilities(swigCPtr);
  }

  public int GetIsInSpellLikeAbilityList(uint nSpellId) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetIsInSpellLikeAbilityList(swigCPtr, nSpellId);
    return retVal;
  }

  public byte GetSpellLikeAbilityCasterLevel(uint nSpellId) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetSpellLikeAbilityCasterLevel(swigCPtr, nSpellId);
    return retVal;
  }

  public int GetSpellLikeAbilityCount() {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetSpellLikeAbilityCount(swigCPtr);
    return retVal;
  }

  public uint GetSpellLikeAbilitySlotSpellId(uint nSlot) {
    uint retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetSpellLikeAbilitySlotSpellId(swigCPtr, nSlot);
    return retVal;
  }

  public byte GetSpellLikeAbilitySlotCasterLevel(uint nSlot) {
    byte retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetSpellLikeAbilitySlotCasterLevel(swigCPtr, nSlot);
    return retVal;
  }

  public int GetSpellLikeAbilitySlotReady(uint nSlot) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetSpellLikeAbilitySlotReady(swigCPtr, nSlot);
    return retVal;
  }

  public void SetSpellLikeAbilitySlotReady(uint nSlot, int bReady) {
    NWNXLibPINVOKE.CNWSCreatureStats_SetSpellLikeAbilitySlotReady(swigCPtr, nSlot, bReady);
  }

  public float GetStatById(int nId) {
    float retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetStatById(swigCPtr, nId);
    return retVal;
  }

  public void SetStatById(int nId, float nStat) {
    NWNXLibPINVOKE.CNWSCreatureStats_SetStatById(swigCPtr, nId, nStat);
  }

  public int GetIsWeaponOfChoice(uint nBaseItemType) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetIsWeaponOfChoice(swigCPtr, nBaseItemType);
    return retVal;
  }

  public void RunDataMigrations() {
    NWNXLibPINVOKE.CNWSCreatureStats_RunDataMigrations(swigCPtr);
  }

  public int GetIsInKnownSpellList(byte nMultiClass, uint nSpellID) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_GetIsInKnownSpellList(swigCPtr, nMultiClass, nSpellID);
    return retVal;
  }

  public int CheckSpellSuitability(int nSpellId, CNWSpell pSpell, int nCategory, int nMaxCR, int nSpellLevel, int nSpellSlot, int nClass, int bCheckMetamagic, byte* nMetaType, int nMasterSpellId) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_CheckSpellSuitability__SWIG_0(swigCPtr, nSpellId, CNWSpell.getCPtr(pSpell), nCategory, nMaxCR, nSpellLevel, nSpellSlot, nClass, bCheckMetamagic, (global::System.IntPtr)nMetaType, nMasterSpellId);
    return retVal;
  }

  public int CheckSpellSuitability(int nSpellId, CNWSpell pSpell, int nCategory, int nMaxCR, int nSpellLevel, int nSpellSlot, int nClass, int bCheckMetamagic, byte* nMetaType) {
    int retVal = NWNXLibPINVOKE.CNWSCreatureStats_CheckSpellSuitability__SWIG_1(swigCPtr, nSpellId, CNWSpell.getCPtr(pSpell), nCategory, nMaxCR, nSpellLevel, nSpellSlot, nClass, bCheckMetamagic, (global::System.IntPtr)nMetaType);
    return retVal;
  }

  public void _Destructor() {
    NWNXLibPINVOKE.CNWSCreatureStats__Destructor(swigCPtr);
  }

}

}

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public unsafe class CNWSCreatureAppearanceInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CNWSCreatureAppearanceInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CNWSCreatureAppearanceInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CNWSCreatureAppearanceInfo() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NWNXLibPINVOKE.delete_CNWSCreatureAppearanceInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public global::System.IntPtr Pointer {
    get {
      return swigCPtr.Handle;
    }
  }

  public static unsafe implicit operator void*(CNWSCreatureAppearanceInfo self) {
    return (void*)self.swigCPtr.Handle;
  }

  public static unsafe CNWSCreatureAppearanceInfo FromPointer(void* pointer, bool memoryOwn = false) {
    return pointer != null ? new CNWSCreatureAppearanceInfo((global::System.IntPtr)pointer, memoryOwn) : null;
  }

  public static CNWSCreatureAppearanceInfo FromPointer(global::System.IntPtr pointer, bool memoryOwn = false) {
    return pointer != global::System.IntPtr.Zero ? new CNWSCreatureAppearanceInfo(pointer, memoryOwn) : null;
  }

  public bool Equals(CNWSCreatureAppearanceInfo other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }

    if (ReferenceEquals(this, other)) {
      return true;
    }

    return Pointer.Equals(other.Pointer);
  }

  public override bool Equals(object obj) {
    return ReferenceEquals(this, obj) || obj is CNWSCreatureAppearanceInfo other && Equals(other);
  }

  public override int GetHashCode() {
    return swigCPtr.Handle.GetHashCode();
  }

  public static bool operator ==(CNWSCreatureAppearanceInfo left, CNWSCreatureAppearanceInfo right) {
    return Equals(left, right);
  }

  public static bool operator !=(CNWSCreatureAppearanceInfo left, CNWSCreatureAppearanceInfo right) {
    return !Equals(left, right);
  }

  public uint m_oidLeftHandItem {
    set {
      NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_oidLeftHandItem_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_oidLeftHandItem_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_oidRightHandItem {
    set {
      NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_oidRightHandItem_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_oidRightHandItem_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nRightHandItemVFX {
    set {
      NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_nRightHandItemVFX_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_nRightHandItemVFX_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nLeftHandItemVFX {
    set {
      NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_nLeftHandItemVFX_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_nLeftHandItemVFX_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_oidChestItem {
    set {
      NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_oidChestItem_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_oidChestItem_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_oidHeadItem {
    set {
      NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_oidHeadItem_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_oidHeadItem_get(swigCPtr);
      return retVal;
    }

  }

  public ushort m_nAppearanceType {
    set {
      NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_nAppearanceType_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_nAppearanceType_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nPhenoType {
    set {
      NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_nPhenoType_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_nPhenoType_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nGender {
    set {
      NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_nGender_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_nGender_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nSkinColor {
    set {
      NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_nSkinColor_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_nSkinColor_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nHairColor {
    set {
      NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_nHairColor_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_nHairColor_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nTattooColor1 {
    set {
      NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_nTattooColor1_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_nTattooColor1_get(swigCPtr);
      return retVal;
    }

  }

  public byte m_nTattooColor2 {
    set {
      NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_nTattooColor2_set(swigCPtr, value);
    } 
    get {
      byte retVal = NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_nTattooColor2_get(swigCPtr);
      return retVal;
    }

  }

  public NativeArray<ushort> m_pPartVariation {
    set {
      NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_pPartVariation_set(swigCPtr, value);
    } 
    get {
      global::System.IntPtr arrayPtr = NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_pPartVariation_get(swigCPtr);
      NativeArray<ushort> retVal = new NativeArray<ushort>(arrayPtr, 19);

      return retVal; // ushort[19]
    }

  }

  public ushort m_nHeadVariation {
    set {
      NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_nHeadVariation_set(swigCPtr, value);
    } 
    get {
      ushort retVal = NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_nHeadVariation_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nTailVariation {
    set {
      NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_nTailVariation_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_nTailVariation_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_nWingVariation {
    set {
      NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_nWingVariation_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_nWingVariation_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bForceArmorAppearanceUpdate {
    set {
      NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_bForceArmorAppearanceUpdate_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_bForceArmorAppearanceUpdate_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_oidCloakItem {
    set {
      NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_oidCloakItem_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_oidCloakItem_get(swigCPtr);
      return retVal;
    }

  }

  public ObjectVisualTransformData m_pRightHandItemVisualTransform {
    set {
      NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_pRightHandItemVisualTransform_set(swigCPtr, ObjectVisualTransformData.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_pRightHandItemVisualTransform_get(swigCPtr);
      ObjectVisualTransformData ret = (cPtr == global::System.IntPtr.Zero) ? null : new ObjectVisualTransformData(cPtr, false);
      return ret;
    } 
  }

  public ObjectVisualTransformData m_pLeftHandItemVisualTransform {
    set {
      NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_pLeftHandItemVisualTransform_set(swigCPtr, ObjectVisualTransformData.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_m_pLeftHandItemVisualTransform_get(swigCPtr);
      ObjectVisualTransformData ret = (cPtr == global::System.IntPtr.Zero) ? null : new ObjectVisualTransformData(cPtr, false);
      return ret;
    } 
  }

  public CNWSCreatureAppearanceInfo() : this(NWNXLibPINVOKE.new_CNWSCreatureAppearanceInfo(), true) {
  }

  public void Clear() {
    NWNXLibPINVOKE.CNWSCreatureAppearanceInfo_Clear(swigCPtr);
  }

}

}

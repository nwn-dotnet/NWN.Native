//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public unsafe class CNWSItemPropertyHandler : CItemPropertyApplierRemover {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CNWSItemPropertyHandler(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NWNXLibPINVOKE.CNWSItemPropertyHandler_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CNWSItemPropertyHandler obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NWNXLibPINVOKE.delete_CNWSItemPropertyHandler(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public global::System.IntPtr Pointer {
    get {
      return swigCPtr.Handle;
    }
  }

  public static unsafe implicit operator void*(CNWSItemPropertyHandler self) {
    return (void*)self.swigCPtr.Handle;
  }

  public static unsafe CNWSItemPropertyHandler FromPointer(void* pointer, bool memoryOwn = false) {
    return pointer != null ? new CNWSItemPropertyHandler((global::System.IntPtr)pointer, memoryOwn) : null;
  }

  public static CNWSItemPropertyHandler FromPointer(global::System.IntPtr pointer, bool memoryOwn = false) {
    return pointer != global::System.IntPtr.Zero ? new CNWSItemPropertyHandler(pointer, memoryOwn) : null;
  }

  public bool Equals(CNWSItemPropertyHandler other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }

    if (ReferenceEquals(this, other)) {
      return true;
    }

    return Pointer.Equals(other.Pointer);
  }

  public override bool Equals(object obj) {
    return ReferenceEquals(this, obj) || obj is CNWSItemPropertyHandler other && Equals(other);
  }

  public override int GetHashCode() {
    return swigCPtr.Handle.GetHashCode();
  }

  public static bool operator ==(CNWSItemPropertyHandler left, CNWSItemPropertyHandler right) {
    return Equals(left, right);
  }

  public static bool operator !=(CNWSItemPropertyHandler left, CNWSItemPropertyHandler right) {
    return !Equals(left, right);
  }

  public SWIGTYPE_p_m_CNWSItemPropertyHandler__f_p_CNWSItem_p_CNWItemProperty_p_CNWSCreature_unsigned_int_int__int m_pApplyItemPropertyCommands {
    set {
      NWNXLibPINVOKE.CNWSItemPropertyHandler_m_pApplyItemPropertyCommands_set(swigCPtr, SWIGTYPE_p_m_CNWSItemPropertyHandler__f_p_CNWSItem_p_CNWItemProperty_p_CNWSCreature_unsigned_int_int__int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSItemPropertyHandler_m_pApplyItemPropertyCommands_get(swigCPtr);
      SWIGTYPE_p_m_CNWSItemPropertyHandler__f_p_CNWSItem_p_CNWItemProperty_p_CNWSCreature_unsigned_int_int__int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_m_CNWSItemPropertyHandler__f_p_CNWSItem_p_CNWItemProperty_p_CNWSCreature_unsigned_int_int__int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_m_CNWSItemPropertyHandler__f_p_CNWSItem_p_CNWItemProperty_p_CNWSCreature_unsigned_int__int m_pRemoveItemPropertyCommands {
    set {
      NWNXLibPINVOKE.CNWSItemPropertyHandler_m_pRemoveItemPropertyCommands_set(swigCPtr, SWIGTYPE_p_m_CNWSItemPropertyHandler__f_p_CNWSItem_p_CNWItemProperty_p_CNWSCreature_unsigned_int__int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSItemPropertyHandler_m_pRemoveItemPropertyCommands_get(swigCPtr);
      SWIGTYPE_p_m_CNWSItemPropertyHandler__f_p_CNWSItem_p_CNWItemProperty_p_CNWSCreature_unsigned_int__int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_m_CNWSItemPropertyHandler__f_p_CNWSItem_p_CNWItemProperty_p_CNWSCreature_unsigned_int__int(cPtr, false);
      return ret;
    } 
  }

  public override void InitializeItemProperties() {
    NWNXLibPINVOKE.CNWSItemPropertyHandler_InitializeItemProperties(swigCPtr);
  }

  public override int OnItemPropertyApplied(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_OnItemPropertyApplied(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public override int OnItemPropertyRemoved(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_OnItemPropertyRemoved(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot);
    return retVal;
  }

  public int ApplyEnhancementBonus(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplyEnhancementBonus(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int ApplyEnhancementPenalty(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplyEnhancementPenalty(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int ApplyDamageBonus(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplyDamageBonus(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int ApplyDamagePenalty(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplyDamagePenalty(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int ApplyDamageReduction(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplyDamageReduction(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int ApplyDamageResistance(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplyDamageResistance(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int ApplyDamageVulnerability(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplyDamageVulnerability(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int ApplyDarkVision(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplyDarkVision(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int ApplyDecreaseAbility(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplyDecreaseAbility(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int ApplyDecreaseAC(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplyDecreaseAC(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int ApplyDecreaseSkill(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplyDecreaseSkill(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int ApplyAttackBonus(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplyAttackBonus(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int ApplyAttackPenalty(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplyAttackPenalty(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int ApplyFreeAction(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplyFreeAction(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int ApplyLight(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplyLight(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int ApplyACBonus(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplyACBonus(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int ApplyAbilityBonus(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplyAbilityBonus(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int ApplyImprovedSpellResistance(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplyImprovedSpellResistance(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int ApplyHaste(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplyHaste(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int ApplyHolyAvenger(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplyHolyAvenger(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int ApplySkillBonus(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplySkillBonus(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int ApplyImprovedSavingThrow(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplyImprovedSavingThrow(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int ApplyReducedSavingThrow(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplyReducedSavingThrow(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int ApplyChangedSavingThrow(CNWSItem pItem, int nBonus, CNWItemProperty pItemProperty, CNWSCreature pCreature, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplyChangedSavingThrow(swigCPtr, CNWSItem.getCPtr(pItem), nBonus, CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), bLoadingGame);
    return retVal;
  }

  public int ApplyImprovedSavingThrowVsX(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplyImprovedSavingThrowVsX(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int ApplyReducedSavingThrowVsX(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplyReducedSavingThrowVsX(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int ApplyChangedSavingThrowVsX(CNWSItem pItem, int nBonus, CNWItemProperty pItemProperty, CNWSCreature pCreature, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplyChangedSavingThrowVsX(swigCPtr, CNWSItem.getCPtr(pItem), nBonus, CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), bLoadingGame);
    return retVal;
  }

  public int ApplyUnlimitedAmmo(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplyUnlimitedAmmo(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int RemoveUnlimitedAmmo(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_RemoveUnlimitedAmmo(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot);
    return retVal;
  }

  public int ApplySpecialWalk(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplySpecialWalk(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int ApplyTrueSeeing(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplyTrueSeeing(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int ApplyImprovedEvasion(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplyImprovedEvasion(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int ApplyTurnResistance(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplyTurnResistance(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int ApplyBonusSpellOfLevel(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplyBonusSpellOfLevel(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int RemoveBonusSpellOfLevel(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_RemoveBonusSpellOfLevel(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot);
    return retVal;
  }

  public int ApplyBonusFeat(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplyBonusFeat(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int ApplyDamageImmunity(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplyDamageImmunity(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int ApplyImmunity(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplyImmunity(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int ApplySpellImmunitySpecific(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplySpellImmunitySpecific(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int ApplySpellImmunitySchool(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplySpellImmunitySchool(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int ApplySpellImmunityLevel(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplySpellImmunityLevel(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int ApplyRegeneration(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplyRegeneration(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public int ApplyArcaneSpellFailure(CNWSItem pItem, CNWItemProperty pItemProperty, CNWSCreature pCreature, uint nInventorySlot, int bLoadingGame) {
    int retVal = NWNXLibPINVOKE.CNWSItemPropertyHandler_ApplyArcaneSpellFailure(swigCPtr, CNWSItem.getCPtr(pItem), CNWItemProperty.getCPtr(pItemProperty), CNWSCreature.getCPtr(pCreature), nInventorySlot, bLoadingGame);
    return retVal;
  }

  public CNWSItemPropertyHandler() : this(NWNXLibPINVOKE.new_CNWSItemPropertyHandler(), true) {
  }

}

}
